} @Override public V getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( lr_11 ) ; }
return lastReturnedNode . getKey () ; } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V previous () { return navigatePrevious () . getValue () ;
return lastReturnedNode . getKey () ; } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V previous () { return navigatePrevious () . getValue () ;
return lastReturnedNode . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; } @Override public V previous () { return navigatePrevious () . getValue () ;
} @Override public V getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( MST[ConstructorCallMutator]MSP[] lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
return lastReturnedNode . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; } @Override public V previous () { return navigatePrevious () . getValue () ;
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR2Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[rv.ROR5Mutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[NegateConditionalsMutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR1Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[InlineConstantMutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.CRCR4Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[ReturnValsMutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; MST[VoidMethodCallMutator]MSP[] return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[InlineConstantMutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[rv.CRCR1Mutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[NegateConditionalsMutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[ReturnValsMutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[rv.ROR5Mutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[InlineConstantMutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean contains ( final Object obj ) {
checkNonNullComparable ( obj , VALUE ) ; return lookupValue ( obj ) != null ; } @Override public boolean remove ( final Object o ) { return doRemoveValue ( o ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean contains ( final Object obj ) {
return lastReturnedNode . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; } @Override public V previous () { return navigatePrevious () . getValue () ;
} @Override public V getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException ( lr_11 ) ; }
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; MST[ConstructorCallMutator]MSP[] } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[InlineConstantMutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.ROR5Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[InlineConstantMutator]MSP[] } @Override
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[ReturnValsMutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR1Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; MST[NullReturnValsMutator]MSP[] } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR2Mutator]MSP[] } @Override
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[InlineConstantMutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR4Mutator]MSP[] } @Override
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[rv.ROR5Mutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; MST[VoidMethodCallMutator]MSP[] return lookupKey ( obj ) != null ; } @Override
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[NegateConditionalsMutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
} @Override public Iterator < K > iterator () { return new ViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) { checkNonNullComparable ( obj , KEY ) ; return lookupKey ( obj ) != null ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[rv.CRCR1Mutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
public boolean remove ( final Object o ) { return doRemoveKey ( o ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override public Iterator < V > iterator () { return new InverseViewMapIterator ( orderType ) ; } @Override public boolean contains ( final Object obj ) {
@Override public String toString () { return description ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
@Override public String toString () { return description ; MST[ReturnValsMutator]MSP[] } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
} @Override public V getKey () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
} @Override public V getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( MST[ConstructorCallMutator]MSP[] lr_11 ) ; }
} @Override public V getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( lr_11 ) ; }
parentNode [ dataElement . ordinal () ] = node ; } private Node < K , V > getParent ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[] }
throw new IllegalArgumentException () ; } } private void setLeft ( final Node < K , V > node , final DataElement dataElement ) { leftNode [ dataElement . ordinal () ] = node ; MST[NonVoidMethodCallMutator]MSP[] } private Node < K , V > getLeft ( final DataElement dataElement ) {
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.UOI2Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
if ( ! ( obj instanceof Map . Entry ) ) { MST[rv.ROR3Mutator]MSP[] return false ; } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
if ( ! ( obj instanceof Map . Entry ) ) { MST[rv.ROR5Mutator]MSP[] return false ; } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
if ( ! ( obj instanceof Map . Entry ) ) { MST[rv.ROR1Mutator]MSP[] return false ; } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
return blackColor [ dataElement . ordinal () ] ; MST[rv.ABSMutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
if ( ! ( obj instanceof Map . Entry ) ) { return false ; MST[rv.CRCR5Mutator]MSP[] } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.ABSMutator]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
if ( ! ( obj instanceof Map . Entry ) ) { return false ; MST[rv.CRCR1Mutator]MSP[] } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
if ( ! ( obj instanceof Map . Entry ) ) { return false ; MST[rv.CRCR3Mutator]MSP[] } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[rv.ROR5Mutator]MSP[]
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[InlineConstantMutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.ROR5Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR5Mutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
private Node < K , V > getRight ( final DataElement dataElement ) { return rightNode [ dataElement . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[] } private void setParent ( final Node < K , V > node , final DataElement dataElement ) {
if ( ! ( obj instanceof Map . Entry ) ) { return false ; MST[ReturnValsMutator]MSP[] } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.ABSMutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; MST[ReturnValsMutator]MSP[] case VALUE : return getValue () ; default:
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; MST[rv.CRCR4Mutator]MSP[] }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.ROR1Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
blackColor [ dataElement . ordinal () ] = node . blackColor [ dataElement . ordinal () ] ; } private boolean isLeftChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; } @Override public K getKey () { return key ; MST[NullReturnValsMutator]MSP[] } @Override public V getValue () { return value ; } @Override
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR4Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI2Mutator]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[NegateConditionalsMutator]MSP[]
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; MST[InlineConstantMutator]MSP[] }
blackColor [ dataElement . ordinal () ] = node . blackColor [ dataElement . ordinal () ] ; } private boolean isLeftChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( ! ( obj instanceof Map . Entry ) ) { MST[NegateConditionalsMutator]MSP[] return false ; } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
private Node < K , V > getRight ( final DataElement dataElement ) { return rightNode [ dataElement . ordinal () ] ; MST[ReturnValsMutator]MSP[] } private void setParent ( final Node < K , V > node , final DataElement dataElement ) {
return blackColor [ dataElement . ordinal () ] ; MST[rv.UOI2Mutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
private void setRed ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = false ; MST[rv.CRCR3Mutator]MSP[] } private void copyColor ( final Node < K , V > node , final DataElement dataElement ) {
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR1Mutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
return leftNode [ dataElement . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[] } private void setRight ( final Node < K , V > node , final DataElement dataElement ) { rightNode [ dataElement . ordinal () ] = node ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[InlineConstantMutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[experimental.SwitchMutator]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR3Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
public V setValue ( final V ignored ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( lr_12 ) ; MST[ConstructorCallMutator]MSP[] } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[NegateConditionalsMutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; MST[NullReturnValsMutator]MSP[] default:
blackColor [ dataElement . ordinal () ] = node . blackColor [ dataElement . ordinal () ] ; } private boolean isLeftChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[BooleanTrueReturnValsMutator]MSP[]
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI3Mutator]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR3Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR1Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
return leftNode [ dataElement . ordinal () ] ; MST[ReturnValsMutator]MSP[] } private void setRight ( final Node < K , V > node , final DataElement dataElement ) { rightNode [ dataElement . ordinal () ] = node ; }
return blackColor [ dataElement . ordinal () ] ; MST[rv.UOI1Mutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; MST[NonVoidMethodCallMutator]MSP[] }
private void setRed ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = false ; MST[NonVoidMethodCallMutator]MSP[] } private void copyColor ( final Node < K , V > node , final DataElement dataElement ) {
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR6Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR4Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; MST[ReturnValsMutator]MSP[] default:
return blackColor [ dataElement . ordinal () ] ; MST[ReturnValsMutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.ROR4Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR6Mutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[experimental.RemoveSwitchMutator_1]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR3Mutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[experimental.RemoveSwitchMutator_0]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
private Node < K , V > getRight ( final DataElement dataElement ) { return rightNode [ dataElement . ordinal () ] ; MST[NullReturnValsMutator]MSP[] } private void setParent ( final Node < K , V > node , final DataElement dataElement ) {
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; MST[rv.CRCR6Mutator]MSP[] }
blackColor [ dataElement . ordinal () ] = node . blackColor [ dataElement . ordinal () ] ; } private boolean isLeftChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[NegateConditionalsMutator]MSP[]
if ( ! ( obj instanceof Map . Entry ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR6Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
return blackColor [ dataElement . ordinal () ] ; MST[BooleanTrueReturnValsMutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR2Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR5Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; MST[ReturnValsMutator]MSP[] } @Override
if ( ! ( obj instanceof Map . Entry ) ) { MST[rv.ROR2Mutator]MSP[] return false ; } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
return leftNode [ dataElement . ordinal () ] ; MST[NullReturnValsMutator]MSP[] } private void setRight ( final Node < K , V > node , final DataElement dataElement ) { rightNode [ dataElement . ordinal () ] = node ; }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[InlineConstantMutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
return blackColor [ dataElement . ordinal () ] ; MST[rv.UOI4Mutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
private void setRed ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = false ; MST[rv.CRCR1Mutator]MSP[] } private void copyColor ( final Node < K , V > node , final DataElement dataElement ) {
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[rv.ROR5Mutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
public V setValue ( final V ignored ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( lr_12 ) ; } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { MST[NegateConditionalsMutator]MSP[] return true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR5Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[NonVoidMethodCallMutator]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[NonVoidMethodCallMutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
parentNode [ dataElement . ordinal () ] = node ; MST[NonVoidMethodCallMutator]MSP[] } private Node < K , V > getParent ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] ; }
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; MST[NullReturnValsMutator]MSP[] case VALUE : return getValue () ; default:
return blackColor [ dataElement . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.UOI3Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.UOI1Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[ReturnValsMutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.ROR5Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; MST[NonVoidMethodCallMutator]MSP[] case VALUE : return getValue () ; default:
private void setRed ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = false ; MST[InlineConstantMutator]MSP[] } private void copyColor ( final Node < K , V > node , final DataElement dataElement ) {
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[InlineConstantMutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; MST[rv.CRCR3Mutator]MSP[] }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.ROR2Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; MST[NullReturnValsMutator]MSP[] } @Override
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR3Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
if ( ! ( obj instanceof Map . Entry ) ) { MST[rv.ROR4Mutator]MSP[] return false ; } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[BooleanTrueReturnValsMutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR3Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[InlineConstantMutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return leftNode [ dataElement . ordinal () ] ; } private void setRight ( final Node < K , V > node , final DataElement dataElement ) { rightNode [ dataElement . ordinal () ] = node ; MST[NonVoidMethodCallMutator]MSP[] }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; } @Override public K getKey () { return key ; MST[ReturnValsMutator]MSP[] } @Override public V getValue () { return value ; } @Override
public V setValue ( final V ignored ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( lr_12 ) ; } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[NegateConditionalsMutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
parentNode [ dataElement . ordinal () ] = node ; } private Node < K , V > getParent ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] ; MST[NullReturnValsMutator]MSP[] }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[BooleanTrueReturnValsMutator]MSP[]
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
blackColor [ dataElement . ordinal () ] = node . blackColor [ dataElement . ordinal () ] ; } private boolean isLeftChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[ReturnValsMutator]MSP[]
return blackColor [ dataElement . ordinal () ] ; MST[rv.UOI3Mutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[NonVoidMethodCallMutator]MSP[]
public V setValue ( final V ignored ) throws UnsupportedOperationException { throw new UnsupportedOperationException ( lr_12 ) ; } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { MST[rv.ROR5Mutator]MSP[] return true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR6Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
if ( ! ( obj instanceof Map . Entry ) ) { return false ; MST[InlineConstantMutator]MSP[] } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI1Mutator]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR2Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . rightNode [ dataElement . ordinal () ] == this ; MST[NegateConditionalsMutator]MSP[] } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
blackColor [ dataElement . ordinal () ] = node . blackColor [ dataElement . ordinal () ] ; } private boolean isLeftChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[NonVoidMethodCallMutator]MSP[]
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.ROR3Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
parentNode [ dataElement . ordinal () ] = node ; } private Node < K , V > getParent ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] ; MST[ReturnValsMutator]MSP[] }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; MST[rv.CRCR5Mutator]MSP[] }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; MST[rv.CRCR2Mutator]MSP[] }
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; MST[NonVoidMethodCallMutator]MSP[] default:
return blackColor [ dataElement . ordinal () ] ; MST[BooleanFalseReturnValsMutator]MSP[] } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR5Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[rv.CRCR6Mutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI4Mutator]MSP[] case KEY : return getKey () ; case VALUE : return getValue () ; default:
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR1Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
private void setRed ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = false ; MST[rv.CRCR5Mutator]MSP[] } private void copyColor ( final Node < K , V > node , final DataElement dataElement ) {
return blackColor [ dataElement . ordinal () ] ; } private boolean isRed ( final DataElement dataElement ) { return ! blackColor [ dataElement . ordinal () ] ; MST[rv.CRCR5Mutator]MSP[] } private void setBlack ( final DataElement dataElement ) { blackColor [ dataElement . ordinal () ] = true ; }
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null MST[ReturnValsMutator]MSP[]
&& parentNode [ dataElement . ordinal () ] . leftNode [ dataElement . ordinal () ] == this ; MST[NonVoidMethodCallMutator]MSP[] } private boolean isRightChild ( final DataElement dataElement ) { return parentNode [ dataElement . ordinal () ] != null
if ( ! ( obj instanceof Map . Entry ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
if ( ! ( obj instanceof Map . Entry ) ) { return false ; MST[rv.CRCR6Mutator]MSP[] } final Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) obj ;
if ( obj instanceof Map . Entry == false ) { MST[rv.ROR5Mutator]MSP[] return false ; } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR6Mutator]MSP[] } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
if ( obj instanceof Map . Entry == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
if ( obj instanceof Map . Entry == false ) { MST[rv.ROR2Mutator]MSP[] return false ; } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
if ( obj instanceof Map . Entry == false ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; MST[NullReturnValsMutator]MSP[] } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; }
if ( obj instanceof Map . Entry == false ) { MST[NegateConditionalsMutator]MSP[] return false ; } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; MST[ConstructorCallMutator]MSP[] } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; }
if ( obj instanceof Map . Entry == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; MST[ReturnValsMutator]MSP[] } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; }
if ( obj instanceof Map . Entry == false ) { MST[rv.ROR4Mutator]MSP[] return false ; } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
if ( obj instanceof Map . Entry == false ) { return false ; MST[InlineConstantMutator]MSP[] } final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final Object value = entry . getValue () ;
return lastReturnedNode . getKey () ; } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public V next () { return navigateNext () . getValue () ; } @Override public V previous () { return navigatePrevious () . getValue () ;
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { MST[rv.ROR5Mutator]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; MST[NullReturnValsMutator]MSP[] } public boolean hasPrevious () { return previousNode != null ; } protected Node < K , V > navigatePrevious () {
lastReturnedNode = previousNode ; previousNode = nextSmaller ( previousNode , orderType ) ; return lastReturnedNode ; } public final void remove () { if ( lastReturnedNode == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; }
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR4Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR3Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR5Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[NegateConditionalsMutator]MSP[]
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR2Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR6Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR3Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR1Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR5Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.CRCR6Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[NegateConditionalsMutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; MST[ReturnValsMutator]MSP[] } public boolean hasPrevious () { return previousNode != null ; } protected Node < K , V > navigatePrevious () {
lastReturnedNode = previousNode ; previousNode = nextSmaller ( previousNode , orderType ) ; return lastReturnedNode ; } public final void remove () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; }
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { MST[NegateConditionalsMutator]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[ReturnValsMutator]MSP[] } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[InlineConstantMutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[InlineConstantMutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.ROR5Mutator]MSP[]
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.ABSMutator]MSP[]
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[rv.CRCR1Mutator]MSP[] } protected Node < K , V > navigatePrevious () {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[rv.CRCR5Mutator]MSP[] } protected Node < K , V > navigatePrevious () {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[rv.CRCR6Mutator]MSP[] } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.ROR2Mutator]MSP[]
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[NegateConditionalsMutator]MSP[] } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[rv.ROR5Mutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
if ( previousNode == null ) { throw new NoSuchElementException () ; MST[ConstructorCallMutator]MSP[] } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; } nextNode = lastReturnedNode ; if ( nextNode == null ) { nextNode = nextGreater ( previousNode , orderType ) ; }
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; MST[experimental.MemberVariableMutator]MSP[] nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; } protected Node < K , V > navigatePrevious () {
lastReturnedNode = previousNode ; previousNode = nextSmaller ( previousNode , orderType ) ; return lastReturnedNode ; } public final void remove () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; }
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[ReturnValsMutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; MST[NonVoidMethodCallMutator]MSP[] return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[BooleanTrueReturnValsMutator]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
if ( previousNode == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; } nextNode = lastReturnedNode ; if ( nextNode == null ) { nextNode = nextGreater ( previousNode , orderType ) ; }
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.UOI2Mutator]MSP[]
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.UOI3Mutator]MSP[]
if ( previousNode == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; } nextNode = lastReturnedNode ; if ( nextNode == null ) { nextNode = nextGreater ( previousNode , orderType ) ; }
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.UOI4Mutator]MSP[]
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.UOI1Mutator]MSP[]
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.ROR1Mutator]MSP[]
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[rv.ROR5Mutator]MSP[] } protected Node < K , V > navigatePrevious () {
lastReturnedNode = previousNode ; previousNode = nextSmaller ( previousNode , orderType ) ; return lastReturnedNode ; } public final void remove () { if ( lastReturnedNode == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; }
lastReturnedNode = previousNode ; previousNode = nextSmaller ( previousNode , orderType ) ; return lastReturnedNode ; } public final void remove () { if ( lastReturnedNode == null ) { throw new IllegalStateException () ; MST[ConstructorCallMutator]MSP[] } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; }
if ( previousNode == null ) { MST[rv.ROR5Mutator]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; } nextNode = lastReturnedNode ; if ( nextNode == null ) { nextNode = nextGreater ( previousNode , orderType ) ; }
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; MST[experimental.MemberVariableMutator]MSP[] return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[BooleanTrueReturnValsMutator]MSP[] } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.ROR4Mutator]MSP[]
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[rv.ROR3Mutator]MSP[]
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[rv.CRCR3Mutator]MSP[] } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { MST[NonVoidMethodCallMutator]MSP[]
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; MST[InlineConstantMutator]MSP[] } protected Node < K , V > navigatePrevious () {
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; MST[ArgumentPropagationMutator]MSP[] return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; } protected Node < K , V > navigatePrevious () {
if ( previousNode == null ) { MST[NegateConditionalsMutator]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) { throw new ConcurrentModificationException () ; } nextNode = lastReturnedNode ; if ( nextNode == null ) { nextNode = nextGreater ( previousNode , orderType ) ; }
throw new ConcurrentModificationException () ; } lastReturnedNode = nextNode ; MST[experimental.MemberVariableMutator]MSP[] previousNode = nextNode ; nextNode = nextGreater ( nextNode , orderType ) ; return lastReturnedNode ; } public boolean hasPrevious () { return previousNode != null ; } protected Node < K , V > navigatePrevious () {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return new InverseViewMapEntryIterator () ; } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; MST[ConstructorCallMutator]MSP[] } if ( modifications != expectedModifications ) {
return new InverseViewMapIterator ( VALUE ) ; } @Override public OrderedBidiMap < K , V > inverseBidiMap () { return TreeBidiMap . this ; } @Override public boolean equals ( final Object obj ) { return TreeBidiMap . this . doEquals ( obj , DataElement . VALUE ) ; MST[ReturnValsMutator]MSP[] }
throw new NoSuchElementException ( lr_1 ) ; } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; MST[ArgumentPropagationMutator]MSP[] } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
@Override public int hashCode () { return TreeBidiMap . this . doHashCode ( DataElement . VALUE ) ; } @Override public String toString () { return TreeBidiMap . this . doToString ( DataElement . VALUE ) ; MST[NonVoidMethodCallMutator]MSP[] }
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getValue () ; } @Override public V previousKey ( final V key ) {
if ( inverseEntrySet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] inverseEntrySet = new InverseEntryView () ; } return inverseEntrySet ; } @Override public OrderedMapIterator < V , K > mapIterator () { if ( isEmpty () ) { return EmptyOrderedMapIterator . <V , K > emptyOrderedMapIterator () ; }
put ( e . getKey () , e . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public K remove ( final Object key ) { return TreeBidiMap . this . removeValue ( key ) ; } @Override public V removeValue ( final Object value ) {
return TreeBidiMap . this . containsValue ( key ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) {
@Override public int hashCode () { return TreeBidiMap . this . doHashCode ( DataElement . VALUE ) ; } @Override public String toString () { return TreeBidiMap . this . doToString ( DataElement . VALUE ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
calculatedHashCode = true ; } return hashcodeValue ; } @Override public int size () { return TreeBidiMap . this . size () ; } @Override public boolean isEmpty () { return TreeBidiMap . this . isEmpty () ; MST[ReturnValsMutator]MSP[] } @Override public K get ( final Object key ) {
return TreeBidiMap . this . getKey ( key ) ; } @Override public V getKey ( final Object value ) { return TreeBidiMap . this . get ( value ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean containsKey ( final Object key ) {
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[rv.ROR4Mutator]MSP[]
if ( inverseEntrySet == null ) { inverseEntrySet = new InverseEntryView () ; } return inverseEntrySet ; MST[ReturnValsMutator]MSP[] } @Override public OrderedMapIterator < V , K > mapIterator () { if ( isEmpty () ) { return EmptyOrderedMapIterator . <V , K > emptyOrderedMapIterator () ; }
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[rv.ROR3Mutator]MSP[]
throw new NoSuchElementException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[] } return leastNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; } @Override public V lastKey () { if ( TreeBidiMap . this . nodeCount == 0 ) {
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { inverseValuesSet = new KeyView ( VALUE ) ; MST[ConstructorCallMutator]MSP[] } return inverseValuesSet ; } @Override public Set < Map . Entry < V , K > > entrySet () {
throw new NoSuchElementException ( lr_1 ) ; } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; MST[ReturnValsMutator]MSP[] } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
throw new NoSuchElementException ( lr_1 ) ; } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; MST[NullReturnValsMutator]MSP[] } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; return node == null ? null : node . getValue () ; MST[ReturnValsMutator]MSP[] } @Override public V previousKey ( final V key ) {
if ( inverseEntrySet == null ) { inverseEntrySet = new InverseEntryView () ; MST[experimental.MemberVariableMutator]MSP[] } return inverseEntrySet ; } @Override public OrderedMapIterator < V , K > mapIterator () { if ( isEmpty () ) { return EmptyOrderedMapIterator . <V , K > emptyOrderedMapIterator () ; }
return TreeBidiMap . this . remove ( value ) ; } @Override public void clear () { TreeBidiMap . this . clear () ; MST[VoidMethodCallMutator]MSP[] } @Override public Set < V > keySet () { if ( inverseKeySet == null ) { inverseKeySet = new ValueView ( VALUE ) ; }
return TreeBidiMap . this . containsValue ( key ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) {
throw new NoSuchElementException ( lr_1 ) ; } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; return node == null ? null : node . getValue () ; MST[rv.ROR5Mutator]MSP[] } @Override public V previousKey ( final V key ) {
if ( inverseEntrySet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] inverseEntrySet = new InverseEntryView () ; } return inverseEntrySet ; } @Override public OrderedMapIterator < V , K > mapIterator () { if ( isEmpty () ) { return EmptyOrderedMapIterator . <V , K > emptyOrderedMapIterator () ; }
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { inverseValuesSet = new KeyView ( VALUE ) ; } return inverseValuesSet ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public Set < Map . Entry < V , K > > entrySet () {
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] inverseValuesSet = new KeyView ( VALUE ) ; } return inverseValuesSet ; } @Override public Set < Map . Entry < V , K > > entrySet () {
throw new NoSuchElementException ( lr_1 ) ; } return leastNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; } @Override public V lastKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[NonVoidMethodCallMutator]MSP[]
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] inverseValuesSet = new KeyView ( VALUE ) ; } return inverseValuesSet ; } @Override public Set < Map . Entry < V , K > > entrySet () {
return TreeBidiMap . this . getKey ( key ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V getKey ( final Object value ) { return TreeBidiMap . this . get ( value ) ; } @Override public boolean containsKey ( final Object key ) {
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { MST[rv.ROR5Mutator]MSP[] inverseValuesSet = new KeyView ( VALUE ) ; } return inverseValuesSet ; } @Override public Set < Map . Entry < V , K > > entrySet () {
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) {
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[NegateConditionalsMutator]MSP[]
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
put ( e . getKey () , e . getValue () ) ; MST[ArgumentPropagationMutator]MSP[] } } @Override public K remove ( final Object key ) { return TreeBidiMap . this . removeValue ( key ) ; } @Override public V removeValue ( final Object value ) {
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; return node == null ? null : node . getValue () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public V previousKey ( final V key ) {
return new InverseViewMapIterator ( VALUE ) ; } @Override public OrderedBidiMap < K , V > inverseBidiMap () { return TreeBidiMap . this ; } @Override public boolean equals ( final Object obj ) { return TreeBidiMap . this . doEquals ( obj , DataElement . VALUE ) ; MST[NonVoidMethodCallMutator]MSP[] }
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; return node == null ? null : node . getValue () ; MST[NullReturnValsMutator]MSP[] } @Override public V previousKey ( final V key ) {
calculatedHashCode = true ; } return hashcodeValue ; } @Override public int size () { return TreeBidiMap . this . size () ; MST[PrimitiveReturnsMutator]MSP[] } @Override public boolean isEmpty () { return TreeBidiMap . this . isEmpty () ; } @Override public K get ( final Object key ) {
throw new NoSuchElementException ( lr_1 ) ; } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; MST[ArgumentPropagationMutator]MSP[] return node == null ? null : node . getValue () ; } @Override public V previousKey ( final V key ) {
put ( e . getKey () , e . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public K remove ( final Object key ) { return TreeBidiMap . this . removeValue ( key ) ; } @Override public V removeValue ( final Object value ) {
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getValue () ; } @Override public V previousKey ( final V key ) {
if ( inverseEntrySet == null ) { MST[rv.ROR5Mutator]MSP[] inverseEntrySet = new InverseEntryView () ; } return inverseEntrySet ; } @Override public OrderedMapIterator < V , K > mapIterator () { if ( isEmpty () ) { return EmptyOrderedMapIterator . <V , K > emptyOrderedMapIterator () ; }
calculatedHashCode = true ; } return hashcodeValue ; } @Override public int size () { return TreeBidiMap . this . size () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean isEmpty () { return TreeBidiMap . this . isEmpty () ; } @Override public K get ( final Object key ) {
return TreeBidiMap . this . containsValue ( key ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) {
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[rv.ROR1Mutator]MSP[]
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[rv.ROR2Mutator]MSP[]
return TreeBidiMap . this . containsValue ( key ) ; } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[NonVoidMethodCallMutator]MSP[]
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { inverseValuesSet = new KeyView ( VALUE ) ; } return inverseValuesSet ; MST[ReturnValsMutator]MSP[] } @Override public Set < Map . Entry < V , K > > entrySet () {
return TreeBidiMap . this . containsValue ( key ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { return TreeBidiMap . this . containsKey ( value ) ; } @Override public V firstKey () { if ( TreeBidiMap . this . nodeCount == 0 ) {
@Override public int hashCode () { return TreeBidiMap . this . doHashCode ( DataElement . VALUE ) ; } @Override public String toString () { return TreeBidiMap . this . doToString ( DataElement . VALUE ) ; MST[ReturnValsMutator]MSP[] }
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { MST[NegateConditionalsMutator]MSP[] inverseValuesSet = new KeyView ( VALUE ) ; } return inverseValuesSet ; } @Override public Set < Map . Entry < V , K > > entrySet () {
if ( inverseEntrySet == null ) { inverseEntrySet = new InverseEntryView () ; } return inverseEntrySet ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public OrderedMapIterator < V , K > mapIterator () { if ( isEmpty () ) { return EmptyOrderedMapIterator . <V , K > emptyOrderedMapIterator () ; }
return new InverseViewMapIterator ( VALUE ) ; } @Override public OrderedBidiMap < K , V > inverseBidiMap () { return TreeBidiMap . this ; MST[NullReturnValsMutator]MSP[] } @Override public boolean equals ( final Object obj ) { return TreeBidiMap . this . doEquals ( obj , DataElement . VALUE ) ; }
public K put ( final V key , final K value ) { final K result = get ( key ) ; TreeBidiMap . this . doPut ( value , key ) ; return result ; MST[NullReturnValsMutator]MSP[] } @Override
return inverseKeySet ; } @Override public Set < K > values () { if ( inverseValuesSet == null ) { inverseValuesSet = new KeyView ( VALUE ) ; MST[experimental.MemberVariableMutator]MSP[] } return inverseValuesSet ; } @Override public Set < Map . Entry < V , K > > entrySet () {
final Node < K , V > node = nextGreater ( TreeBidiMap . this . <V > lookup ( key , VALUE ) , VALUE ) ; return node == null ? null : node . getValue () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public V previousKey ( final V key ) {
public void putAll ( final Map < ? extends V , ? extends K > map ) { for ( final Map . Entry < ? extends V , ? extends K > e : map . entrySet () ) { MST[NonVoidMethodCallMutator]MSP[]
return TreeBidiMap . this . getKey ( key ) ; MST[NullReturnValsMutator]MSP[] } @Override public V getKey ( final Object value ) { return TreeBidiMap . this . get ( value ) ; } @Override public boolean containsKey ( final Object key ) {
throw new NoSuchElementException ( lr_1 ) ; } return leastNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; } @Override public V lastKey () { if ( TreeBidiMap . this . nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return new InverseViewMapIterator ( VALUE ) ; } @Override public OrderedBidiMap < K , V > inverseBidiMap () { return TreeBidiMap . this ; } @Override public boolean equals ( final Object obj ) { return TreeBidiMap . this . doEquals ( obj , DataElement . VALUE ) ; MST[BooleanFalseReturnValsMutator]MSP[] }
public K put ( final V key , final K value ) { final K result = get ( key ) ; TreeBidiMap . this . doPut ( value , key ) ; MST[VoidMethodCallMutator]MSP[] return result ; } @Override
throw new NoSuchElementException ( lr_1 ) ; } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
calculatedHashCode = true ; } return hashcodeValue ; } @Override public int size () { return TreeBidiMap . this . size () ; } @Override public boolean isEmpty () { return TreeBidiMap . this . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public K get ( final Object key ) {
throw new NoSuchElementException ( lr_1 ) ; } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
throw new NoSuchElementException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[] } return greatestNode ( TreeBidiMap . this . rootNode [ VALUE . ordinal () ] , VALUE ) . getValue () ; } @Override public V nextKey ( final V key ) { checkKey ( key ) ;
put ( e . getKey () , e . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public K remove ( final Object key ) { return TreeBidiMap . this . removeValue ( key ) ; } @Override public V removeValue ( final Object value ) {
calculatedHashCode = true ; } return hashcodeValue ; } @Override public int size () { return TreeBidiMap . this . size () ; } @Override public boolean isEmpty () { return TreeBidiMap . this . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K get ( final Object key ) {
if ( inverseEntrySet == null ) { inverseEntrySet = new InverseEntryView () ; MST[ConstructorCallMutator]MSP[] } return inverseEntrySet ; } @Override public OrderedMapIterator < V , K > mapIterator () { if ( isEmpty () ) { return EmptyOrderedMapIterator . <V , K > emptyOrderedMapIterator () ; }
} @Override public V getKey () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
} @Override public V getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( lr_11 ) ; }
} @Override public V getKey () { if ( lastReturnedNode == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
return lastReturnedNode . getKey () ; } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; } @Override public V previous () { return navigatePrevious () . getValue () ; MST[NonVoidMethodCallMutator]MSP[]
return lastReturnedNode . getKey () ; } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; MST[ReturnValsMutator]MSP[] } @Override public V previous () { return navigatePrevious () . getValue () ;
} @Override public V getKey () { if ( lastReturnedNode == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getValue () ; } @Override public K getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
return lastReturnedNode . getKey () ; } @Override public K setValue ( final K obj ) { throw new UnsupportedOperationException () ; } @Override public V next () { return navigateNext () . getValue () ; MST[NullReturnValsMutator]MSP[] } @Override public V previous () { return navigatePrevious () . getValue () ;
stream . writeObject ( entry . getKey () ) ; stream . writeObject ( entry . getValue () ) ; } } @Override public int size () { return TreeBidiMap . this . size () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void clear () { TreeBidiMap . this . clear () ;
stream . writeObject ( entry . getKey () ) ; stream . writeObject ( entry . getValue () ) ; } } @Override public int size () { return TreeBidiMap . this . size () ; MST[PrimitiveReturnsMutator]MSP[] } @Override public void clear () { TreeBidiMap . this . clear () ;
stream . writeObject ( entry . getKey () ) ; stream . writeObject ( entry . getValue () ) ; } } @Override public int size () { return TreeBidiMap . this . size () ; } @Override public void clear () { TreeBidiMap . this . clear () ; MST[VoidMethodCallMutator]MSP[]
stream . writeObject ( entry . getKey () ) ; stream . writeObject ( entry . getValue () ) ; } } @Override public int size () { return TreeBidiMap . this . size () ; MST[ReturnValsMutator]MSP[] } @Override public void clear () { TreeBidiMap . this . clear () ;
} @Override public Map . Entry < K , V > next () { return navigateNext () ; MST[NullReturnValsMutator]MSP[] } @Override public Map . Entry < K , V > previous () { return navigatePrevious () ; } @Override public Map . Entry < V , K > next () {
} @Override public Map . Entry < K , V > next () { return navigateNext () ; MST[ReturnValsMutator]MSP[] } @Override public Map . Entry < K , V > previous () { return navigatePrevious () ; } @Override public Map . Entry < V , K > next () {
} @Override public Map . Entry < K , V > next () { return navigateNext () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Map . Entry < K , V > previous () { return navigatePrevious () ; } @Override public Map . Entry < V , K > next () {
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.UOI3Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[rv.ROR4Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; MST[VoidMethodCallMutator]MSP[] if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[]
node . getParent ( dataElement ) . setLeft ( rightChild , dataElement ) ; } else { node . getParent ( dataElement ) . setRight ( rightChild , dataElement ) ; } rightChild . setLeft ( node , dataElement ) ; node . setParent ( rightChild , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } return rval ; }
if ( leftChild . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; } @Override public int hashCode () { return this . doHashCode ( KEY ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public String toString () { return this . doToString ( KEY ) ; }
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI2Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { MST[NegateConditionalsMutator]MSP[] throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
while ( rval . getLeft ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] rval = rval . getLeft ( dataElement ) ; } } return rval ; } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR4Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.ROR1Mutator]MSP[] } return rval ; }
if ( node . getParent ( dataElement ) == null ) { MST[NegateConditionalsMutator]MSP[] rootNode [ dataElement . ordinal () ] = rightChild ; } else if ( node . getParent ( dataElement ) . getLeft ( dataElement ) == node ) {
node = node . getRight ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; MST[ConstructorCallMutator]MSP[] insertValue ( newNode ) ; node . setRight ( newNode , KEY ) ;
if ( rightChild . getLeft ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; MST[NonVoidMethodCallMutator]MSP[] if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; MST[rv.UOI2Mutator]MSP[] } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
if ( value . equals ( other . get ( key ) ) == false ) { return false ; MST[InlineConstantMutator]MSP[] } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
node . getParent ( dataElement ) . setRight ( leftChild , dataElement ) ; } else { node . getParent ( dataElement ) . setLeft ( leftChild , dataElement ) ; } leftChild . setRight ( node , dataElement ) ; node . setParent ( leftChild , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
if ( node . getParent ( dataElement ) == null ) { MST[NegateConditionalsMutator]MSP[] rootNode [ dataElement . ordinal () ] = leftChild ; } else if ( node . getParent ( dataElement ) . getRight ( dataElement ) == node ) {
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[NonVoidMethodCallMutator]MSP[] return buf . toString () ; }
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getKey () ; } @SuppressWarnings ( lr_4 )
private static void makeBlack ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] node . setBlack ( dataElement ) ; } }
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.ROR4Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
private Node < K , V > getGrandParent ( final Node < K , V > node , final DataElement dataElement ) { return getParent ( getParent ( node , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; MST[rv.CRCR1Mutator]MSP[] } if ( nodeCount > 0 ) { try {
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] child = parent ;
if ( node . getParent ( dataElement ) == null ) { MST[rv.ROR5Mutator]MSP[] rootNode [ dataElement . ordinal () ] = rightChild ; } else if ( node . getParent ( dataElement ) . getLeft ( dataElement ) == node ) {
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } private static void checkKey ( final Object key ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.AOR3Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[rv.CRCR1Mutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.UOI2Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR1Mutator]MSP[] }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.UOI4Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.CRCR2Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.ABSMutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; if ( deletedNode . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rootNode [ dataElement . ordinal () ] = replacement ;
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI4Mutator]MSP[]
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { MST[rv.ROR5Mutator]MSP[] throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; MST[ReturnValsMutator]MSP[] } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.ROR1Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; if ( deletedNode . getParent ( dataElement ) == null ) { MST[NonVoidMethodCallMutator]MSP[] rootNode [ dataElement . ordinal () ] = replacement ;
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ;
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[]
if ( value . equals ( other . get ( key ) ) == false ) { MST[rv.ROR2Mutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI1Mutator]MSP[]
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] . append ( '=' )
keySet = new KeyView ( KEY ) ; MST[ConstructorCallMutator]MSP[] } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
return lookupKey ( key ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.ABSMutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
makeBlack ( getLeftChild ( siblingNode , dataElement ) , dataElement ) ; rotateRight ( getParent ( currentNode , dataElement ) , dataElement ) ; currentNode = rootNode [ dataElement . ordinal () ] ; } } } makeBlack ( currentNode , dataElement ) ; MST[VoidMethodCallMutator]MSP[] }
} private void modify () { modifications ++ ; MST[rv.CRCR3Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[rv.CRCR2Mutator]MSP[] return buf . toString () ; }
public K getKey ( final Object value ) { checkValue ( value ) ; MST[VoidMethodCallMutator]MSP[] final Node < K , V > node = lookupValue ( value ) ; return node == null ? null : node . getKey () ; } @Override
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR2Mutator]MSP[]
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; MST[rv.CRCR3Mutator]MSP[] if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR5Mutator]MSP[]
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; MST[NullReturnValsMutator]MSP[] }
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[]
} private void modify () { modifications ++ ; MST[rv.AOR4Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} private void modify () { modifications ++ ; MST[rv.AOR1Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public K lastKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[NegateConditionalsMutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
if ( deletedNode . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI4Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
if ( rightChild . getLeft ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
return greatestNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K nextKey ( final K key ) { checkKey ( key ) ;
&& currentNode != rootNode [ dataElement . ordinal () ] MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) {
parent = parent . getParent ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } rval = parent ; } return rval ; } private Node < K , V > nextSmaller ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval ;
if ( node . getParent ( dataElement ) == null ) { MST[rv.ROR5Mutator]MSP[] rootNode [ dataElement . ordinal () ] = leftChild ; } else if ( node . getParent ( dataElement ) . getRight ( dataElement ) == node ) {
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; MST[ArgumentPropagationMutator]MSP[] return node == null ? null : node . getKey () ; } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
while ( rval . getLeft ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] rval = rval . getLeft ( dataElement ) ; } } return rval ; } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; MST[ReturnValsMutator]MSP[] } private String doToString ( final DataElement dataElement ) {
private Node < K , V > getGrandParent ( final Node < K , V > node , final DataElement dataElement ) { return getParent ( getParent ( node , dataElement ) , dataElement ) ; MST[NullReturnValsMutator]MSP[] }
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[NegateConditionalsMutator]MSP[]
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR3Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.UOI1Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[NegateConditionalsMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( getGrandParent ( currentNode , dataElement ) != null ) {
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[rv.ROR1Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[NegateConditionalsMutator]MSP[]
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR2Mutator]MSP[] }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; MST[NonVoidMethodCallMutator]MSP[] if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[ReturnValsMutator]MSP[] }
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( replacement != null ) {
if ( node == null ) { MST[rv.ROR5Mutator]MSP[] final Node < K , V > root = new Node <> ( key , value ) ; rootNode [ KEY . ordinal () ] = root ; rootNode [ VALUE . ordinal () ] = root ; grow () ;
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; MST[ReturnValsMutator]MSP[] } @Override public K firstKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.ROR1Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR1Mutator]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public int hashCode () { return this . doHashCode ( KEY ) ; } @Override public String toString () { return this . doToString ( KEY ) ; }
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR3Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
final Node < K , V > node = lookupKey ( key ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getValue () ; } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
if ( node == null ) { MST[NegateConditionalsMutator]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
if ( node . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = rightChild ; MST[NonVoidMethodCallMutator]MSP[] } else if ( node . getParent ( dataElement ) . getLeft ( dataElement ) == node ) {
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[rv.ROR5Mutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] try {
if ( node == null ) { MST[NegateConditionalsMutator]MSP[] final Node < K , V > root = new Node <> ( key , value ) ; rootNode [ KEY . ordinal () ] = root ; rootNode [ VALUE . ordinal () ] = root ; grow () ;
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[rv.ROR1Mutator]MSP[]
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.UOI3Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.AOR4Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
return lookupKey ( key ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
private static void makeBlack ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { node . setBlack ( dataElement ) ; MST[VoidMethodCallMutator]MSP[] } }
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.ABSMutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR5Mutator]MSP[]
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? MST[NegateConditionalsMutator]MSP[] deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.ROR4Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return new ViewMapIterator ( KEY ) ; MST[ConstructorCallMutator]MSP[] case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR5Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { MST[NegateConditionalsMutator]MSP[] inverse = new Inverse () ; } return inverse ; } @Override
if ( value . equals ( other . get ( key ) ) == false ) { return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; MST[InlineConstantMutator]MSP[] }
} private void modify () { modifications ++ ; MST[rv.AOD2Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[ArgumentPropagationMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
node = node . getRight ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ; MST[VoidMethodCallMutator]MSP[] node . setRight ( newNode , KEY ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[ConditionalsBoundaryMutator]MSP[] try {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.UOI3Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } if ( obj instanceof Map == false ) { return false ; }
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( value . equals ( other . get ( key ) ) == false ) { MST[NegateConditionalsMutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; MST[ReturnValsMutator]MSP[] } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
private static void makeRed ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { node . setRed ( dataElement ) ; MST[VoidMethodCallMutator]MSP[] } }
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' ) MST[NegateConditionalsMutator]MSP[]
private static void makeBlack ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] node . setBlack ( dataElement ) ; } }
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( cmp == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[InlineConstantMutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.CRCR6Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
node . setLeft ( newNode , KEY ) ; MST[VoidMethodCallMutator]MSP[] newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) {
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR1Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
public K getKey ( final Object value ) { checkValue ( value ) ; final Node < K , V > node = lookupValue ( value ) ; return node == null ? null : node . getKey () ; MST[NegateConditionalsMutator]MSP[] } @Override
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; MST[VoidMethodCallMutator]MSP[] return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR1Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.ROR5Mutator]MSP[] try {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.AOR3Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( node == null ) { final Node < K , V > root = new Node <> ( key , value ) ; rootNode [ KEY . ordinal () ] = root ; MST[NonVoidMethodCallMutator]MSP[] rootNode [ VALUE . ordinal () ] = root ; grow () ;
private Node < K , V > lookupKey ( final Object key ) { return this . <K > lookup ( key , KEY ) ; MST[NullReturnValsMutator]MSP[] } private Node < K , V > lookupValue ( final Object value ) {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } if ( nodeCount > 0 ) { try {
if ( node == null ) { return null ; MST[ReturnValsMutator]MSP[] } doRedBlackDelete ( node ) ; return node . getKey () ; } @SuppressWarnings ( lr_4 )
if ( rightChild . getLeft ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
if ( nodeCount == 0 ) { MST[rv.UOI3Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; nodeCount = 0 ; MST[rv.CRCR5Mutator]MSP[] rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( VALUE ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] node = node . getLeft ( VALUE ) ; } else {
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.UOI4Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
if ( nodeCount == 0 ) { MST[rv.ROR4Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; if ( deletedNode . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rootNode [ dataElement . ordinal () ] = replacement ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.ABSMutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
Node < K , V > rval = node ; if ( rval != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] while ( rval . getRight ( dataElement ) != null ) { rval = rval . getRight ( dataElement ) ; } } return rval ; }
Node < K , V > node = rootNode [ dataElement . ordinal () ] ; while ( node != null ) { MST[rv.ROR5Mutator]MSP[] final int cmp = compare ( ( T ) data , ( T ) node . getData ( dataElement ) ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.AOD1Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[InlineConstantMutator]MSP[] . append ( '=' )
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { MST[rv.ROR5Mutator]MSP[] inverse = new Inverse () ; } return inverse ; } @Override
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.UOI1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getKey () ; } @SuppressWarnings ( lr_4 )
if ( value . equals ( other . get ( key ) ) == false ) { return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; MST[rv.CRCR4Mutator]MSP[] }
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.ROR5Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI3Mutator]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[NullReturnValsMutator]MSP[] }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR5Mutator]MSP[] }
if ( value . equals ( other . get ( key ) ) == false ) { return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; MST[BooleanFalseReturnValsMutator]MSP[] }
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] if ( cmp == 0 ) { throw new IllegalArgumentException (
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.ROR3Mutator]MSP[] }
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getKey () ; } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[NegateConditionalsMutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
if ( cmp == 0 ) { MST[rv.UOI3Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
node . setLeft ( newNode , VALUE ) ; MST[VoidMethodCallMutator]MSP[] newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) {
if ( cmp == 0 ) { MST[rv.ROR4Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
} private void modify () { modifications ++ ; MST[rv.CRCR6Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.UOI4Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; return node . getKey () ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_4 )
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[rv.ROR1Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.AOR3Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.UOI2Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
boolean hasNext = it . hasNext () ; MST[NonVoidMethodCallMutator]MSP[] while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; MST[InlineConstantMutator]MSP[] } if ( nodeCount > 0 ) { try {
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[ArgumentPropagationMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[rv.CRCR3Mutator]MSP[] . append ( '=' )
for ( final DataElement dataElement : DataElement . values () ) { MST[NonVoidMethodCallMutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; } return valuesSet ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException (
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR3Mutator]MSP[] }
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { return false ; MST[InlineConstantMutator]MSP[] }
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR6Mutator]MSP[] }
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[NegateConditionalsMutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
} private void doRedBlackInsert ( final Node < K , V > insertedNode , final DataElement dataElement ) { Node < K , V > currentNode = insertedNode ; makeRed ( currentNode , dataElement ) ; while ( currentNode != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? MST[rv.ROR5Mutator]MSP[] deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) {
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[rv.ROR3Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
return lookupKey ( key ) != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.UOI4Mutator]MSP[] throw new IllegalArgumentException (
newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; MST[VoidMethodCallMutator]MSP[] break; } } } } } private V doRemoveKey ( final Object key ) { final Node < K , V > node = lookupKey ( key ) ;
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; MST[EmptyObjectReturnValsMutator]MSP[] }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.CRCR2Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
public K getKey ( final Object value ) { checkValue ( value ) ; final Node < K , V > node = lookupValue ( value ) ; return node == null ? null : node . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[rv.ROR3Mutator]MSP[] return false ; }
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return new ViewMapIterator ( KEY ) ; MST[ReturnValsMutator]MSP[] case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[rv.ROR3Mutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[NegateConditionalsMutator]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] }
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[InlineConstantMutator]MSP[] }
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; MST[rv.UOI3Mutator]MSP[] } private String doToString ( final DataElement dataElement ) {
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' ) MST[NonVoidMethodCallMutator]MSP[]
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.UOI4Mutator]MSP[] try {
if ( node == null ) { MST[NegateConditionalsMutator]MSP[] rval = null ; } else if ( node . getLeft ( dataElement ) != null ) { rval = greatestNode ( node . getLeft ( dataElement ) , dataElement ) ; } else {
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[rv.CRCR5Mutator]MSP[] return buf . toString () ; }
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[NullReturnValsMutator]MSP[] }
} private void rotateRight ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > leftChild = node . getLeft ( dataElement ) ; node . setLeft ( leftChild . getRight ( dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[]
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR2Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[NegateConditionalsMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.UOI3Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.ROR5Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
deletedNode . getParent ( dataElement ) . setRight ( null , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } deletedNode . setParent ( null , dataElement ) ; } } } } shrink () ; } private void doRedBlackDeleteFixup ( final Node < K , V > replacementNode , final DataElement dataElement ) {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; MST[ReturnValsMutator]MSP[] } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
while ( rval . getLeft ( dataElement ) != null ) { rval = rval . getLeft ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } } return rval ; } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[NegateConditionalsMutator]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.UOI1Mutator]MSP[] try {
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[]
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { MST[NegateConditionalsMutator]MSP[] entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
return this . <V > lookup ( value , VALUE ) ; MST[NullReturnValsMutator]MSP[] } private Node < K , V > nextGreater ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.AOD2Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? MST[ArgumentPropagationMutator]MSP[] deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) {
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[NegateConditionalsMutator]MSP[]
if ( cmp == 0 ) { MST[rv.ROR1Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR5Mutator]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[ConditionalsBoundaryMutator]MSP[] } return rval ; }
} private void modify () { modifications ++ ; MST[rv.UOI2Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] makeBlack ( y , dataElement ) ;
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[InlineConstantMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI1Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[]
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR5Mutator]MSP[] }
if ( nodeCount == 0 ) { MST[rv.ROR1Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.ROR3Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; MST[ReturnValsMutator]MSP[] } @Override
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public Set < K > keySet () { if ( keySet == null ) {
if ( leftChild . getRight ( dataElement ) != null ) { leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[]
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; MST[ReturnValsMutator]MSP[] } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; } @Override
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; MST[experimental.MemberVariableMutator]MSP[] } return inverse ; } @Override
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( VALUE ) != null ) { MST[NonVoidMethodCallMutator]MSP[] node = node . getLeft ( VALUE ) ; } else {
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; MST[NonVoidMethodCallMutator]MSP[] }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.CRCR5Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR2Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; MST[ConstructorCallMutator]MSP[] } return valuesSet ; } @Override
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } else {
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR5Mutator]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
if ( value . equals ( other . get ( key ) ) == false ) { return false ; MST[rv.CRCR1Mutator]MSP[] } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
if ( node . getParent ( dataElement ) == null ) { MST[ArgumentPropagationMutator]MSP[] rootNode [ dataElement . ordinal () ] = leftChild ; } else if ( node . getParent ( dataElement ) . getRight ( dataElement ) == node ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.AOR1Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.ROR2Mutator]MSP[] try {
for ( final Map . Entry < ? extends K , ? extends V > e : map . entrySet () ) { put ( e . getKey () , e . getValue () ) ; MST[ArgumentPropagationMutator]MSP[] } } @Override public V remove ( final Object key ) {
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; MST[ConstructorCallMutator]MSP[] default: throw new IllegalArgumentException () ; } }
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.ROR2Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
if ( node == null ) { MST[rv.ROR5Mutator]MSP[] rval = null ; } else if ( node . getLeft ( dataElement ) != null ) { rval = greatestNode ( node . getLeft ( dataElement ) , dataElement ) ; } else {
if ( value . equals ( other . get ( key ) ) == false ) { return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; MST[rv.CRCR6Mutator]MSP[] }
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } return rval ; }
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.AOD1Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
if ( deletedNode . getParent ( dataElement ) == null ) { MST[NonVoidMethodCallMutator]MSP[] rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { MST[rv.ROR5Mutator]MSP[] entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) { MST[rv.ROR5Mutator]MSP[]
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
} private void rotateRight ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > leftChild = node . getLeft ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] node . setLeft ( leftChild . getRight ( dataElement ) , dataElement ) ;
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[InlineConstantMutator]MSP[] }
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException (
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; MST[rv.ABSMutator]MSP[] } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
if ( leftChild . getRight ( dataElement ) != null ) { leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[NonVoidMethodCallMutator]MSP[] . append ( '=' )
if ( cmp == 0 ) { MST[rv.ABSMutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
Node < K , V > node = rootNode [ dataElement . ordinal () ] ; while ( node != null ) { final int cmp = compare ( ( T ) data , ( T ) node . getData ( dataElement ) ) ; MST[NonVoidMethodCallMutator]MSP[]
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rval = rval . getRight ( dataElement ) ; } } return rval ; }
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[rv.ROR5Mutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR2Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.UOI4Mutator]MSP[] } return rval ; }
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; MST[ConstructorCallMutator]MSP[] } } private static void checkKey ( final Object key ) {
if ( nodeCount == 0 ) { MST[rv.UOI1Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[rv.CRCR6Mutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.UOI2Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
if ( node == null ) { final Node < K , V > root = new Node <> ( key , value ) ; rootNode [ KEY . ordinal () ] = root ; rootNode [ VALUE . ordinal () ] = root ; MST[NonVoidMethodCallMutator]MSP[] grow () ;
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } else {
if ( deletedNode . getParent ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } if ( nodeCount > 0 ) { try {
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] makeBlack ( y , dataElement ) ;
node = node . getRight ( VALUE ) ; } else { node . setRight ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; MST[VoidMethodCallMutator]MSP[] doRedBlackInsert ( newNode , VALUE ) ; break; } } } }
if ( nodeCount == 0 ) { MST[rv.ROR2Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] } return rval ; }
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; MST[rv.UOI2Mutator]MSP[] } private String doToString ( final DataElement dataElement ) {
if ( deletedNode . getParent ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] child = parent ;
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { rval = rval . getRight ( dataElement ) ; } } return rval ; MST[ReturnValsMutator]MSP[] }
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[NegateConditionalsMutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
if ( deletedNode . getParent ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; MST[rv.CRCR5Mutator]MSP[] } if ( nodeCount > 0 ) { try {
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[rv.ROR5Mutator]MSP[] return false ; }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[rv.ROR5Mutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; MST[rv.ABSMutator]MSP[] } private String doToString ( final DataElement dataElement ) {
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR2Mutator]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR5Mutator]MSP[] }
if ( value . equals ( other . get ( key ) ) == false ) { return false ; MST[rv.CRCR6Mutator]MSP[] } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { MST[rv.ROR1Mutator]MSP[] throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { rval = rval . getRight ( dataElement ) ; } } return rval ; MST[NullReturnValsMutator]MSP[] }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.CRCR6Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.AOD2Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[NegateConditionalsMutator]MSP[]
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.ABSMutator]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) { MST[NegateConditionalsMutator]MSP[]
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[rv.ROR2Mutator]MSP[]
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.ROR4Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
return greatestNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K nextKey ( final K key ) { checkKey ( key ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] try {
if ( node . getLeft ( KEY ) != null ) { MST[NonVoidMethodCallMutator]MSP[] node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.ROR4Mutator]MSP[] try {
for ( final Map . Entry < ? extends K , ? extends V > e : map . entrySet () ) { put ( e . getKey () , e . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public V remove ( final Object key ) {
} private void modify () { modifications ++ ; MST[rv.UOI4Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; MST[VoidMethodCallMutator]MSP[] grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) {
Node < K , V > rval = node ; if ( rval != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] while ( rval . getRight ( dataElement ) != null ) { rval = rval . getRight ( dataElement ) ; } } return rval ; }
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.ROR3Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.ABSMutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.ROR1Mutator]MSP[] }
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR2Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR5Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
if ( node == null ) { final Node < K , V > root = new Node <> ( key , value ) ; rootNode [ KEY . ordinal () ] = root ; rootNode [ VALUE . ordinal () ] = root ; grow () ; MST[VoidMethodCallMutator]MSP[]
if ( deletedNode . getParent ( dataElement ) == null ) { MST[ArgumentPropagationMutator]MSP[] rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.CRCR5Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; MST[ArgumentPropagationMutator]MSP[] return node == null ? null : node . getKey () ; } @Override public Set < K > keySet () { if ( keySet == null ) {
parent = parent . getParent ( dataElement ) ; } rval = parent ; } return rval ; MST[NullReturnValsMutator]MSP[] } private Node < K , V > nextSmaller ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval ;
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI3Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; MST[ReturnValsMutator]MSP[] default: throw new IllegalArgumentException () ; } }
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; MST[InlineConstantMutator]MSP[] if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
if ( node == null ) { MST[NegateConditionalsMutator]MSP[] rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getKey () ; } @Override public Set < K > keySet () { if ( keySet == null ) {
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' ) MST[experimental.NakedReceiverMutator]MSP[]
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[experimental.MemberVariableMutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[rv.CRCR3Mutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Node < K , V > root = new Node <> ( key , value ) ; rootNode [ KEY . ordinal () ] = root ; rootNode [ VALUE . ordinal () ] = root ; grow () ;
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( replacement , dataElement ) ; MST[VoidMethodCallMutator]MSP[] } } else {
if ( value . equals ( other . get ( key ) ) == false ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[NegateConditionalsMutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] child = parent ;
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( VALUE ) != null ) { MST[ArgumentPropagationMutator]MSP[] node = node . getLeft ( VALUE ) ; } else {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[MathMutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[rv.ROR2Mutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
rotateLeft ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } } } } makeBlack ( rootNode [ dataElement . ordinal () ] , dataElement ) ; } private void doRedBlackDelete ( final Node < K , V > deletedNode ) {
if ( node . getLeft ( KEY ) != null ) { MST[ArgumentPropagationMutator]MSP[] node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ;
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.UOI1Mutator]MSP[] throw new IllegalArgumentException (
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) { MST[NegateConditionalsMutator]MSP[]
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[rv.ROR5Mutator]MSP[] } @Override public Set < K > keySet () { if ( keySet == null ) {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.UOI3Mutator]MSP[] try {
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.ROR5Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[rv.ROR2Mutator]MSP[] return false ; }
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; } return valuesSet ; MST[ReturnValsMutator]MSP[] } @Override
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[rv.ROR5Mutator]MSP[]
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[rv.CRCR6Mutator]MSP[] . append ( '=' )
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[ReturnValsMutator]MSP[] }
if ( leftChild . getRight ( dataElement ) != null ) { leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[]
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[rv.ROR4Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
&& currentNode != rootNode [ dataElement . ordinal () ] MST[rv.ROR5Mutator]MSP[] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) {
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K lastKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; return node . getKey () ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_4 )
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) { MST[rv.ROR5Mutator]MSP[]
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[MathMutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; MST[VoidMethodCallMutator]MSP[] break; } } else { if ( node . getRight ( VALUE ) != null ) {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.AOR1Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
private Node < K , V > leastNode ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval = node ; if ( rval != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[NegateConditionalsMutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException (
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.UOI3Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.AOR3Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[NegateConditionalsMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.AOD2Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.CRCR3Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
&& currentNode != rootNode [ dataElement . ordinal () ] MST[NegateConditionalsMutator]MSP[] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR4Mutator]MSP[]
public K getKey ( final Object value ) { checkValue ( value ) ; final Node < K , V > node = lookupValue ( value ) ; return node == null ? null : node . getKey () ; MST[ReturnValsMutator]MSP[] } @Override
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( replacement != null ) {
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { final Object key = it . next () ; MST[NonVoidMethodCallMutator]MSP[] final Object value = it . getValue () ;
if ( nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR6Mutator]MSP[] }
while ( rval . getLeft ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rval = rval . getLeft ( dataElement ) ; } } return rval ; } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR2Mutator]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; MST[VoidMethodCallMutator]MSP[] break; } } else { if ( node . getRight ( KEY ) != null ) {
deletedNode . getParent ( dataElement ) . setRight ( null , dataElement ) ; MST[VoidMethodCallMutator]MSP[] } deletedNode . setParent ( null , dataElement ) ; } } } } shrink () ; } private void doRedBlackDeleteFixup ( final Node < K , V > replacementNode , final DataElement dataElement ) {
keySet = new KeyView ( KEY ) ; } return keySet ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
node = node . getRight ( VALUE ) ; MST[NonVoidMethodCallMutator]MSP[] } else { node . setRight ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } } }
makeBlack ( y , dataElement ) ; MST[VoidMethodCallMutator]MSP[] makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ;
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI2Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI2Mutator]MSP[]
deletedNode . getParent ( dataElement ) . setRight ( null , dataElement ) ; } deletedNode . setParent ( null , dataElement ) ; } } } } shrink () ; MST[VoidMethodCallMutator]MSP[] } private void doRedBlackDeleteFixup ( final Node < K , V > replacementNode , final DataElement dataElement ) {
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.ROR2Mutator]MSP[] } return rval ; }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI3Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; MST[VoidMethodCallMutator]MSP[] return node . getKey () ; } @SuppressWarnings ( lr_4 )
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; nodeCount = 0 ; rootNode [ KEY . ordinal () ] = null ; MST[NonVoidMethodCallMutator]MSP[] rootNode [ VALUE . ordinal () ] = null ; } @Override
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; MST[VoidMethodCallMutator]MSP[] nodeCount = 0 ; rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[rv.ROR2Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( VALUE ) != null ) { MST[rv.ROR5Mutator]MSP[] node = node . getLeft ( VALUE ) ; } else {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.CRCR6Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; nodeCount = 0 ; MST[rv.CRCR1Mutator]MSP[] rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR1Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.ROR4Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[InlineConstantMutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } else {
. append ( value == this ? lr_8 : value ) ; MST[experimental.NakedReceiverMutator]MSP[] hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.ABSMutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
if ( node . getLeft ( KEY ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ;
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[]
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR5Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
node = node . getRight ( KEY ) ; MST[NonVoidMethodCallMutator]MSP[] } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ; node . setRight ( newNode , KEY ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' ) MST[rv.ROR5Mutator]MSP[]
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR4Mutator]MSP[]
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.ROR4Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; MST[rv.CRCR1Mutator]MSP[] if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[rv.ROR2Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( nodeCount > 0 ) { try {
checkNonNullComparable ( key , KEY ) ; MST[VoidMethodCallMutator]MSP[] } private static void checkValue ( final Object value ) { checkNonNullComparable ( value , VALUE ) ; } private static void checkKeyAndValue ( final Object key , final Object value ) { checkKey ( key ) ; checkValue ( value ) ;
} private void modify () { modifications ++ ; MST[rv.AOR2Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI2Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( VALUE ) != null ) { MST[NegateConditionalsMutator]MSP[] node = node . getLeft ( VALUE ) ; } else {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR2Mutator]MSP[]
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; MST[VoidMethodCallMutator]MSP[] nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( value . equals ( other . get ( key ) ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[ConditionalsBoundaryMutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.ROR1Mutator]MSP[] }
private Node < K , V > leastNode ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval = node ; if ( rval != null ) { MST[rv.ROR5Mutator]MSP[]
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
&& currentNode != rootNode [ dataElement . ordinal () ] MST[NonVoidMethodCallMutator]MSP[] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) {
if ( nodeCount == 0 ) { MST[NegateConditionalsMutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; MST[NullReturnValsMutator]MSP[] } @Override
} private void modify () { modifications ++ ; MST[rv.ABSMutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ABSMutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[experimental.MemberVariableMutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( value . equals ( other . get ( key ) ) == false ) { MST[rv.ROR5Mutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[NegateConditionalsMutator]MSP[] try {
if ( value . equals ( other . get ( key ) ) == false ) { return false ; MST[ReturnValsMutator]MSP[] } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[ConditionalsBoundaryMutator]MSP[]
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } else { if ( currentNode . isLeftChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ;
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[ReturnValsMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.ROR4Mutator]MSP[] }
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR6Mutator]MSP[] }
&& currentNode != rootNode [ dataElement . ordinal () ] MST[RemoveConditionalMutator_EQUAL_IF]MSP[] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException (
if ( value . equals ( other . get ( key ) ) == false ) { return false ; MST[rv.CRCR5Mutator]MSP[] } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
private Node < K , V > leastNode ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval = node ; if ( rval != null ) { MST[NegateConditionalsMutator]MSP[]
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K lastKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
} private void modify () { modifications ++ ; MST[rv.CRCR5Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} private void modify () { modifications ++ ; MST[InlineConstantMutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} private void modify () { modifications ++ ; MST[rv.UOI1Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
} private void rotateRight ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > leftChild = node . getLeft ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] node . setLeft ( leftChild . getRight ( dataElement ) , dataElement ) ;
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[] }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
if ( value . equals ( other . get ( key ) ) == false ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.UOI2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = replacement ; MST[NonVoidMethodCallMutator]MSP[]
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; MST[rv.CRCR6Mutator]MSP[] } if ( nodeCount > 0 ) { try {
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI4Mutator]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } return rval ; }
private Node < K , V > getGrandParent ( final Node < K , V > node , final DataElement dataElement ) { return getParent ( getParent ( node , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.ROR1Mutator]MSP[] try {
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.UOI1Mutator]MSP[] } return rval ; }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.ABSMutator]MSP[] } return rval ; }
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[NegateConditionalsMutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[rv.CRCR3Mutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[rv.ROR5Mutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
if ( deletedNode . getParent ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.AOR2Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[ArgumentPropagationMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; MST[NonVoidMethodCallMutator]MSP[] final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
return lookupKey ( key ) != null ; MST[ReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
if ( nodeCount == 0 ) { MST[rv.UOI4Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; MST[NonVoidMethodCallMutator]MSP[] } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; } @Override
return this . <V > lookup ( value , VALUE ) ; MST[NonVoidMethodCallMutator]MSP[] } private Node < K , V > nextGreater ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval ;
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
} private void modify () { modifications ++ ; } private void grow () { modify () ; MST[VoidMethodCallMutator]MSP[] nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] if ( cmp == 0 ) { throw new IllegalArgumentException (
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.ROR1Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR4Mutator]MSP[] }
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.CRCR3Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.ROR4Mutator]MSP[] }
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
private void rotateLeft ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > rightChild = node . getRight ( dataElement ) ; node . setRight ( rightChild . getLeft ( dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[]
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.UOI1Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( cmp == 0 ) { MST[rv.UOI4Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
if ( cmp == 0 ) { MST[rv.ROR5Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
while ( rval . getLeft ( dataElement ) != null ) { rval = rval . getLeft ( dataElement ) ; } } return rval ; MST[NullReturnValsMutator]MSP[] } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
private Node < K , V > lookupKey ( final Object key ) { return this . <K > lookup ( key , KEY ) ; MST[ReturnValsMutator]MSP[] } private Node < K , V > lookupValue ( final Object value ) {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR1Mutator]MSP[] }
if ( deletedNode . getParent ( dataElement ) == null ) { MST[rv.ROR5Mutator]MSP[] rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR2Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.ROR1Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
} private void doRedBlackInsert ( final Node < K , V > insertedNode , final DataElement dataElement ) { Node < K , V > currentNode = insertedNode ; makeRed ( currentNode , dataElement ) ; while ( currentNode != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( value . equals ( other . get ( key ) ) == false ) { return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; MST[rv.CRCR5Mutator]MSP[] }
newNode . setParent ( node , KEY ) ; MST[VoidMethodCallMutator]MSP[] doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } } } } private V doRemoveKey ( final Object key ) { final Node < K , V > node = lookupKey ( key ) ;
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR5Mutator]MSP[]
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[NonVoidMethodCallMutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR3Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
if ( deletedNode . getParent ( dataElement ) == null ) { MST[NegateConditionalsMutator]MSP[] rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } if ( obj instanceof Map == false ) { return false ; }
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
if ( nodeCount == 0 ) { MST[rv.ROR5Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[NegateConditionalsMutator]MSP[] } @Override public Set < K > keySet () { if ( keySet == null ) {
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; MST[ConstructorCallMutator]MSP[] } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; } @Override
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
node . getParent ( dataElement ) . setRight ( leftChild , dataElement ) ; } else { node . getParent ( dataElement ) . setLeft ( leftChild , dataElement ) ; } leftChild . setRight ( node , dataElement ) ; MST[VoidMethodCallMutator]MSP[] node . setParent ( leftChild , dataElement ) ;
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR3Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.UOI3Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
if ( node . getParent ( dataElement ) == null ) { MST[ArgumentPropagationMutator]MSP[] rootNode [ dataElement . ordinal () ] = rightChild ; } else if ( node . getParent ( dataElement ) . getLeft ( dataElement ) == node ) {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; MST[NonVoidMethodCallMutator]MSP[] } } buf . append ( '}' ) ; return buf . toString () ; }
private static void makeRed ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] node . setRed ( dataElement ) ; } }
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[experimental.NakedReceiverMutator]MSP[] return buf . toString () ; }
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.AOR4Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[] }
if ( node == null ) { MST[rv.ROR5Mutator]MSP[] rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; } @Override public Set < K > keySet () { if ( keySet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR2Mutator]MSP[] }
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[]
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void checkKey ( final Object key ) {
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR1Mutator]MSP[]
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.UOI3Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[ReturnValsMutator]MSP[] }
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ;
return doRemoveKey ( key ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void clear () { modify () ; nodeCount = 0 ; rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; } @Override public K previousKey ( final K key ) { checkKey ( key ) ; MST[VoidMethodCallMutator]MSP[]
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; nodeCount = 0 ; rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; MST[NonVoidMethodCallMutator]MSP[] } @Override
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[rv.CRCR1Mutator]MSP[] return buf . toString () ; }
if ( cmp == 0 ) { MST[rv.UOI1Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; MST[ReturnValsMutator]MSP[] }
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; MST[NonVoidMethodCallMutator]MSP[] } else { if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[rv.CRCR2Mutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] }
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.UOI2Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
Node < K , V > node = rootNode [ dataElement . ordinal () ] ; while ( node != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final int cmp = compare ( ( T ) data , ( T ) node . getData ( dataElement ) ) ;
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public Set < K > keySet () { if ( keySet == null ) {
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[InlineConstantMutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[MathMutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR5Mutator]MSP[] }
} private void modify () { modifications ++ ; MST[rv.UOI3Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; MST[VoidMethodCallMutator]MSP[] } else {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.CRCR4Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[rv.ROR1Mutator]MSP[] return false ; }
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.UOI2Mutator]MSP[] try {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[rv.ROR1Mutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
return this . <V > lookup ( value , VALUE ) ; MST[ReturnValsMutator]MSP[] } private Node < K , V > nextGreater ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval ;
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
while ( rval . getLeft ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rval = rval . getLeft ( dataElement ) ; } } return rval ; } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException (
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.UOI2Mutator]MSP[] throw new IllegalArgumentException (
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; MST[PrimitiveReturnsMutator]MSP[] } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[InlineConstantMutator]MSP[] return buf . toString () ; }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.ROR3Mutator]MSP[] try {
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ; MST[VoidMethodCallMutator]MSP[]
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void checkKey ( final Object key ) {
deletedNode . getParent ( dataElement ) . setRight ( null , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } deletedNode . setParent ( null , dataElement ) ; } } } } shrink () ; } private void doRedBlackDeleteFixup ( final Node < K , V > replacementNode , final DataElement dataElement ) {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[InlineConstantMutator]MSP[] }
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return new ViewMapIterator ( KEY ) ; MST[NullReturnValsMutator]MSP[] case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[MathMutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] inverse = new Inverse () ; } return inverse ; } @Override
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI3Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; } @Override public int hashCode () { return this . doHashCode ( KEY ) ; } @Override public String toString () { return this . doToString ( KEY ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.ABSMutator]MSP[] throw new IllegalArgumentException (
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[rv.CRCR5Mutator]MSP[] . append ( '=' )
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] }
checkNonNullComparable ( key , KEY ) ; } private static void checkValue ( final Object value ) { checkNonNullComparable ( value , VALUE ) ; MST[VoidMethodCallMutator]MSP[] } private static void checkKeyAndValue ( final Object key , final Object value ) { checkKey ( key ) ; checkValue ( value ) ;
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; nodeCount = 0 ; MST[InlineConstantMutator]MSP[] rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? MST[NonVoidMethodCallMutator]MSP[] deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) {
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[rv.ROR3Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[rv.CRCR6Mutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; } if ( nodeCount > 0 ) { MST[rv.ABSMutator]MSP[] try {
public K getKey ( final Object value ) { checkValue ( value ) ; final Node < K , V > node = lookupValue ( value ) ; return node == null ? null : node . getKey () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override
keySet = new KeyView ( KEY ) ; } return keySet ; MST[ReturnValsMutator]MSP[] } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; MST[NullReturnValsMutator]MSP[] } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
} private void modify () { modifications ++ ; MST[MathMutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; return node . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_4 )
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.ABSMutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI1Mutator]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR4Mutator]MSP[]
private void doPut ( final K key , final V value ) { checkKeyAndValue ( key , value ) ; doRemoveKey ( key ) ; doRemoveValue ( value ) ; MST[NonVoidMethodCallMutator]MSP[] Node < K , V > node = rootNode [ KEY . ordinal () ] ;
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] }
final Object key = it . next () ; final Object value = it . getValue () ; MST[NonVoidMethodCallMutator]MSP[] total += key . hashCode () ^ value . hashCode () ; } } return total ; } private String doToString ( final DataElement dataElement ) {
return lookupKey ( key ) != null ; MST[rv.CRCR1Mutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( nodeCount == 0 ) { return lr_7 ; MST[EmptyObjectReturnValsMutator]MSP[] } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( cmp == 0 ) { MST[rv.ROR2Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; MST[experimental.MemberVariableMutator]MSP[] } return valuesSet ; } @Override
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public K lastKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
if ( nodeCount == 0 ) { MST[rv.UOI2Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.CRCR5Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR4Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[ReturnValsMutator]MSP[] }
if ( node . getParent ( dataElement ) == null ) { MST[NonVoidMethodCallMutator]MSP[] rootNode [ dataElement . ordinal () ] = leftChild ; } else if ( node . getParent ( dataElement ) . getRight ( dataElement ) == node ) {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.ROR3Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.UOI3Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; MST[ConstructorCallMutator]MSP[] } return inverse ; } @Override
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[NegateConditionalsMutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI4Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.ROR2Mutator]MSP[] }
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR5Mutator]MSP[] }
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; } @Override public int hashCode () { return this . doHashCode ( KEY ) ; MST[PrimitiveReturnsMutator]MSP[] } @Override public String toString () { return this . doToString ( KEY ) ; }
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.ROR4Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ; MST[VoidMethodCallMutator]MSP[]
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[rv.CRCR2Mutator]MSP[] . append ( '=' )
public K getKey ( final Object value ) { checkValue ( value ) ; final Node < K , V > node = lookupValue ( value ) ; return node == null ? null : node . getKey () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[ArgumentPropagationMutator]MSP[] } @Override public K lastKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
if ( leftChild . getRight ( dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
} private void rotateRight ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > leftChild = node . getLeft ( dataElement ) ; node . setLeft ( leftChild . getRight ( dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; MST[VoidMethodCallMutator]MSP[] deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { MST[NegateConditionalsMutator]MSP[] return true ; } if ( obj instanceof Map == false ) { return false ; }
if ( cmp == 0 ) { MST[NegateConditionalsMutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( getGrandParent ( currentNode , dataElement ) != null ) {
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } else {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[InlineConstantMutator]MSP[] }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
private static void makeBlack ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[NegateConditionalsMutator]MSP[] node . setBlack ( dataElement ) ; } }
if ( value . equals ( other . get ( key ) ) == false ) { MST[rv.ROR4Mutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[NegateConditionalsMutator]MSP[] . append ( '=' )
} private void rotateRight ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > leftChild = node . getLeft ( dataElement ) ; node . setLeft ( leftChild . getRight ( dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[]
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; if ( deletedNode . getParent ( dataElement ) == null ) { MST[NegateConditionalsMutator]MSP[] rootNode [ dataElement . ordinal () ] = replacement ;
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] }
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR3Mutator]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
if ( node . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rootNode [ dataElement . ordinal () ] = leftChild ; } else if ( node . getParent ( dataElement ) . getRight ( dataElement ) == node ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.UOI3Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; MST[NullReturnValsMutator]MSP[] } @Override public K firstKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
if ( node . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rootNode [ dataElement . ordinal () ] = rightChild ; } else if ( node . getParent ( dataElement ) . getLeft ( dataElement ) == node ) {
private void rotateLeft ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > rightChild = node . getRight ( dataElement ) ; node . setRight ( rightChild . getLeft ( dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K lastKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[rv.CRCR4Mutator]MSP[] return buf . toString () ; }
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
@Override public String toString () { return description ; } @Override MST[experimental.MemberVariableMutator]MSP[] public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[NonVoidMethodCallMutator]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
if ( rightChild . getLeft ( dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.ABSMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public int hashCode () { return this . doHashCode ( KEY ) ; } @Override public String toString () { return this . doToString ( KEY ) ; }
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.UOI2Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.CRCR1Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.ROR5Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } private static void checkKey ( final Object key ) {
if ( nodeCount == 0 ) { MST[rv.ROR3Mutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[NonVoidMethodCallMutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] }
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; } @Override public int hashCode () { return this . doHashCode ( KEY ) ; } @Override public String toString () { return this . doToString ( KEY ) ; MST[NonVoidMethodCallMutator]MSP[] }
parent = parent . getParent ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } rval = parent ; } return rval ; } private Node < K , V > nextSmaller ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval ;
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.UOI2Mutator]MSP[] } return rval ; }
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[experimental.NakedReceiverMutator]MSP[] . append ( '=' )
if ( deletedNode . getParent ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.UOI1Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
keySet = new KeyView ( KEY ) ; MST[experimental.MemberVariableMutator]MSP[] } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[rv.ROR5Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.ROR3Mutator]MSP[] } return rval ; }
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI4Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
if ( leftChild . getRight ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ;
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR2Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) { MST[ArgumentPropagationMutator]MSP[]
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] }
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; MST[rv.CRCR5Mutator]MSP[] if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; MST[NonVoidMethodCallMutator]MSP[] buf . append ( key == this ? lr_8 : key ) . append ( '=' )
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; MST[ReturnValsMutator]MSP[] } @Override public int hashCode () { return this . doHashCode ( KEY ) ; } @Override public String toString () { return this . doToString ( KEY ) ; }
private Node < K , V > getGrandParent ( final Node < K , V > node , final DataElement dataElement ) { return getParent ( getParent ( node , dataElement ) , dataElement ) ; MST[ReturnValsMutator]MSP[] }
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[experimental.SwitchMutator]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR4Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? MST[RemoveConditionalMutator_EQUAL_IF]MSP[] deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) {
Node < K , V > node = rootNode [ dataElement . ordinal () ] ; while ( node != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final int cmp = compare ( ( T ) data , ( T ) node . getData ( dataElement ) ) ;
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] rval = rval . getRight ( dataElement ) ; } } return rval ; }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
} private void modify () { modifications ++ ; MST[rv.CRCR2Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] }
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = replacement ;
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI1Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
while ( rval . getLeft ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] rval = rval . getLeft ( dataElement ) ; } } return rval ; } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.ROR5Mutator]MSP[] }
if ( node . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rootNode [ dataElement . ordinal () ] = leftChild ; } else if ( node . getParent ( dataElement ) . getRight ( dataElement ) == node ) {
return doRemoveKey ( key ) ; MST[NullReturnValsMutator]MSP[] } @Override public void clear () { modify () ; nodeCount = 0 ; rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; } @Override public Set < K > keySet () { if ( keySet == null ) { MST[NegateConditionalsMutator]MSP[]
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.ROR3Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.ABSMutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR4Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } return rval ; }
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] inverse = new Inverse () ; } return inverse ; } @Override
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ABSMutator]MSP[]
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; } @Override public Set < K > keySet () { if ( keySet == null ) { MST[rv.ROR5Mutator]MSP[]
private void rotateLeft ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > rightChild = node . getRight ( dataElement ) ; node . setRight ( rightChild . getLeft ( dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[]
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI3Mutator]MSP[]
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR3Mutator]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[NegateConditionalsMutator]MSP[] child = parent ;
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; MST[NullReturnValsMutator]MSP[] default: throw new IllegalArgumentException () ; } }
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[NegateConditionalsMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
rotateLeft ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] } } } } makeBlack ( rootNode [ dataElement . ordinal () ] , dataElement ) ; } private void doRedBlackDelete ( final Node < K , V > deletedNode ) {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; MST[rv.CRCR3Mutator]MSP[] } if ( nodeCount > 0 ) { try {
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[]
} private void modify () { modifications ++ ; MST[rv.AOD1Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] if ( cmp == 0 ) { throw new IllegalArgumentException (
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
Node < K , V > parent = node . getParent ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { child = parent ;
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; if ( deletedNode . getParent ( dataElement ) == null ) { MST[rv.ROR5Mutator]MSP[] rootNode [ dataElement . ordinal () ] = replacement ;
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR3Mutator]MSP[] }
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { MST[rv.ROR3Mutator]MSP[] throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.UOI2Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.ROR1Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR3Mutator]MSP[]
if ( node . getLeft ( KEY ) != null ) { MST[rv.ROR5Mutator]MSP[] node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.UOI4Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; MST[rv.UOI3Mutator]MSP[] } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
if ( nodeCount == 0 ) { return lr_7 ; MST[ReturnValsMutator]MSP[] } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[rv.CRCR5Mutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
private void doPut ( final K key , final V value ) { checkKeyAndValue ( key , value ) ; MST[VoidMethodCallMutator]MSP[] doRemoveKey ( key ) ; doRemoveValue ( value ) ; Node < K , V > node = rootNode [ KEY . ordinal () ] ;
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; if ( deletedNode . getParent ( dataElement ) == null ) { MST[ArgumentPropagationMutator]MSP[] rootNode [ dataElement . ordinal () ] = replacement ;
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[rv.ROR5Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
if ( node . getParent ( dataElement ) == null ) { MST[NonVoidMethodCallMutator]MSP[] rootNode [ dataElement . ordinal () ] = rightChild ; } else if ( node . getParent ( dataElement ) . getLeft ( dataElement ) == node ) {
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { final Object key = it . next () ; final Object value = it . getValue () ; MST[NonVoidMethodCallMutator]MSP[]
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[ArgumentPropagationMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ;
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[ReturnValsMutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rval = null ; } else if ( node . getLeft ( dataElement ) != null ) { rval = greatestNode ( node . getLeft ( dataElement ) , dataElement ) ; } else {
parent = parent . getParent ( dataElement ) ; } rval = parent ; } return rval ; MST[ReturnValsMutator]MSP[] } private Node < K , V > nextSmaller ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval ;
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR5Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
if ( node . getLeft ( KEY ) != null ) { node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; MST[ConstructorCallMutator]MSP[] insertValue ( newNode ) ;
checkNonNullComparable ( key , KEY ) ; } private static void checkValue ( final Object value ) { checkNonNullComparable ( value , VALUE ) ; } private static void checkKeyAndValue ( final Object key , final Object value ) { checkKey ( key ) ; MST[VoidMethodCallMutator]MSP[] checkValue ( value ) ;
} private void doRedBlackInsert ( final Node < K , V > insertedNode , final DataElement dataElement ) { Node < K , V > currentNode = insertedNode ; makeRed ( currentNode , dataElement ) ; while ( currentNode != null MST[rv.ROR5Mutator]MSP[]
if ( value . equals ( other . get ( key ) ) == false ) { return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; MST[ReturnValsMutator]MSP[] }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] }
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.UOI2Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[rv.ROR5Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
if ( node == null ) { return null ; MST[ReturnValsMutator]MSP[] } doRedBlackDelete ( node ) ; return node . getValue () ; } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
} private void modify () { modifications ++ ; MST[rv.AOR3Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] child = parent ;
if ( node . getLeft ( KEY ) != null ) { node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ; MST[VoidMethodCallMutator]MSP[]
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR1Mutator]MSP[]
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
public K getKey ( final Object value ) { checkValue ( value ) ; final Node < K , V > node = lookupValue ( value ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getKey () ; } @Override
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR1Mutator]MSP[]
for ( final DataElement dataElement : DataElement . values () ) { if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; MST[ArgumentPropagationMutator]MSP[] if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
Node < K , V > node = rootNode [ dataElement . ordinal () ] ; while ( node != null ) { final int cmp = compare ( ( T ) data , ( T ) node . getData ( dataElement ) ) ; MST[NonVoidMethodCallMutator]MSP[]
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; MST[rv.UOI1Mutator]MSP[] } private String doToString ( final DataElement dataElement ) {
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException (
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
return greatestNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[ArgumentPropagationMutator]MSP[] } @Override public K nextKey ( final K key ) { checkKey ( key ) ;
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.UOI2Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) {
node = node . getRight ( VALUE ) ; } else { node . setRight ( newNode , VALUE ) ; MST[VoidMethodCallMutator]MSP[] newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } } }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.ABSMutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
return lookupKey ( key ) != null ; MST[NegateConditionalsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( node == null ) { return null ; } doRedBlackDelete ( node ) ; MST[VoidMethodCallMutator]MSP[] return node . getValue () ; } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
deletedNode . getParent ( dataElement ) . setRight ( null , dataElement ) ; } deletedNode . setParent ( null , dataElement ) ; MST[VoidMethodCallMutator]MSP[] } } } } shrink () ; } private void doRedBlackDeleteFixup ( final Node < K , V > replacementNode , final DataElement dataElement ) {
if ( value . equals ( other . get ( key ) ) == false ) { MST[rv.ROR1Mutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } } } } private V doRemoveKey ( final Object key ) { final Node < K , V > node = lookupKey ( key ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( node . getLeft ( KEY ) != null ) { MST[NegateConditionalsMutator]MSP[] node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ;
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
return greatestNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K nextKey ( final K key ) { checkKey ( key ) ;
node . getParent ( dataElement ) . setLeft ( rightChild , dataElement ) ; } else { node . getParent ( dataElement ) . setRight ( rightChild , dataElement ) ; } rightChild . setLeft ( node , dataElement ) ; MST[VoidMethodCallMutator]MSP[] node . setParent ( rightChild , dataElement ) ;
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[NegateConditionalsMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; MST[ConstructorCallMutator]MSP[] } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( replacement != null ) {
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
return greatestNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public K nextKey ( final K key ) { checkKey ( key ) ;
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.UOI3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; MST[NullReturnValsMutator]MSP[] } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = replacement ;
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.ROR3Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.ROR2Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
if ( nodeCount == 0 ) { MST[rv.ABSMutator]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR1Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
if ( leftChild . getRight ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
Node < K , V > rval = node ; if ( rval != null ) { MST[rv.ROR5Mutator]MSP[] while ( rval . getRight ( dataElement ) != null ) { rval = rval . getRight ( dataElement ) ; } } return rval ; }
private Node < K , V > getGrandParent ( final Node < K , V > node , final DataElement dataElement ) { return getParent ( getParent ( node , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[NegateConditionalsMutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.AOR4Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.ABSMutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ; MST[NonVoidMethodCallMutator]MSP[]
} private void doRedBlackInsert ( final Node < K , V > insertedNode , final DataElement dataElement ) { Node < K , V > currentNode = insertedNode ; makeRed ( currentNode , dataElement ) ; while ( currentNode != null MST[NegateConditionalsMutator]MSP[]
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[rv.ROR3Mutator]MSP[]
if ( value . equals ( other . get ( key ) ) == false ) { MST[ArgumentPropagationMutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public Set < K > keySet () { if ( keySet == null ) {
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] }
parent = parent . getParent ( dataElement ) ; } rval = parent ; } return rval ; } private static < T extends Comparable < T > > int compare ( final T o1 , final T o2 ) { return o1 . compareTo ( o2 ) ; MST[NonVoidMethodCallMutator]MSP[] }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.CRCR2Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } else { if ( currentNode . isRightChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
while ( rval . getLeft ( dataElement ) != null ) { rval = rval . getLeft ( dataElement ) ; } } return rval ; MST[ReturnValsMutator]MSP[] } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
return lookupKey ( key ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getKey () ; } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
for ( final Map . Entry < ? extends K , ? extends V > e : map . entrySet () ) { put ( e . getKey () , e . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public V remove ( final Object key ) {
} private void modify () { modifications ++ ; MST[rv.CRCR4Mutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.UOI2Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[rv.ROR3Mutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; nodeCount = 0 ; MST[rv.CRCR3Mutator]MSP[] rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; MST[ReturnValsMutator]MSP[] } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.ROR2Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[experimental.NakedReceiverMutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[NegateConditionalsMutator]MSP[] return false ; }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[NegateConditionalsMutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; } @Override public Set < K > keySet () { if ( keySet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } else { if ( currentNode . isLeftChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ;
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[]
parent = parent . getParent ( dataElement ) ; } rval = parent ; } return rval ; MST[ReturnValsMutator]MSP[] } private static < T extends Comparable < T > > int compare ( final T o1 , final T o2 ) { return o1 . compareTo ( o2 ) ; }
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( replacement != null ) {
for ( final Map . Entry < ? extends K , ? extends V > e : map . entrySet () ) { put ( e . getKey () , e . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public V remove ( final Object key ) {
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.AOR1Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
checkNonNullComparable ( key , KEY ) ; } private static void checkValue ( final Object value ) { checkNonNullComparable ( value , VALUE ) ; } private static void checkKeyAndValue ( final Object key , final Object value ) { checkKey ( key ) ; checkValue ( value ) ; MST[VoidMethodCallMutator]MSP[]
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void checkKey ( final Object key ) {
return lookupKey ( key ) != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.UOI1Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
if ( node . getLeft ( KEY ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] node = node . getLeft ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ;
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { return false ; MST[ReturnValsMutator]MSP[] } if ( nodeCount > 0 ) { try {
private Node < K , V > getRightChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getRight ( dataElement ) ; MST[NullReturnValsMutator]MSP[] }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[InlineConstantMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) { MST[NonVoidMethodCallMutator]MSP[]
return lookupKey ( key ) != null ; MST[rv.ROR5Mutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
if ( value . equals ( other . get ( key ) ) == false ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; MST[NonVoidMethodCallMutator]MSP[] if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.UOI4Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[rv.CRCR5Mutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.CRCR4Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
private void rotateLeft ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > rightChild = node . getRight ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] node . setRight ( rightChild . getLeft ( dataElement ) , dataElement ) ;
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[NegateConditionalsMutator]MSP[] } return rval ; }
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR1Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
doPut ( key , value ) ; return result ; MST[NullReturnValsMutator]MSP[] } @Override public void putAll ( final Map < ? extends K , ? extends V > map ) {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { return false ; MST[ReturnValsMutator]MSP[] }
Node < K , V > rval = node ; if ( rval != null ) { MST[NegateConditionalsMutator]MSP[] while ( rval . getRight ( dataElement ) != null ) { rval = rval . getRight ( dataElement ) ; } } return rval ; }
if ( value . equals ( other . get ( key ) ) == false ) { MST[rv.ROR3Mutator]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
if ( value . equals ( other . get ( key ) ) == false ) { return false ; MST[rv.CRCR3Mutator]MSP[] } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[] while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException (
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.UOI4Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException (
if ( value . equals ( other . get ( key ) ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; }
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.ABSMutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] rval = rval . getRight ( dataElement ) ; } } return rval ; }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[ReturnValsMutator]MSP[] }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.ROR2Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.UOI4Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int hashCode () { return this . doHashCode ( KEY ) ; } @Override public String toString () { return this . doToString ( KEY ) ; }
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; MST[PrimitiveReturnsMutator]MSP[] } private String doToString ( final DataElement dataElement ) {
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
final Node < K , V > replacement = deletedNode . getLeft ( dataElement ) != null ? deletedNode . getLeft ( dataElement ) : deletedNode . getRight ( dataElement ) ; if ( replacement != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.UOI1Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.AOD2Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
doPut ( key , value ) ; return result ; MST[ReturnValsMutator]MSP[] } @Override public void putAll ( final Map < ? extends K , ? extends V > map ) {
if ( rightChild . getLeft ( dataElement ) != null ) { rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[]
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { MST[NegateConditionalsMutator]MSP[] valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( VALUE ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] node = node . getLeft ( VALUE ) ; } else {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR3Mutator]MSP[] }
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) {
parent = parent . getParent ( dataElement ) ; } rval = parent ; } return rval ; MST[NullReturnValsMutator]MSP[] } private static < T extends Comparable < T > > int compare ( final T o1 , final T o2 ) { return o1 . compareTo ( o2 ) ; }
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; MST[VoidMethodCallMutator]MSP[] doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) {
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.ROR3Mutator]MSP[] }
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[InlineConstantMutator]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
private Node < K , V > getLeftChild ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getLeft ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
while ( rval . getLeft ( dataElement ) != null ) { MST[ArgumentPropagationMutator]MSP[] rval = rval . getLeft ( dataElement ) ; } } return rval ; } private Node < K , V > greatestNode ( final Node < K , V > node , final DataElement dataElement ) {
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; MST[experimental.MemberVariableMutator]MSP[] } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.UOI2Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.UOI1Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR6Mutator]MSP[] }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.AOR2Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) { MST[NegateConditionalsMutator]MSP[]
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public Set < K > keySet () { if ( keySet == null ) {
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } else {
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; MST[ReturnValsMutator]MSP[] }
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; MST[NonVoidMethodCallMutator]MSP[] } else {
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( cmp == 0 ) { MST[rv.UOI2Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
if ( cmp == 0 ) { MST[rv.ROR3Mutator]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR3Mutator]MSP[]
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR4Mutator]MSP[] }
replacement . setParent ( deletedNode . getParent ( dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = replacement ;
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.ROR5Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[rv.ROR1Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[rv.UOI2Mutator]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI1Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
parent = parent . getParent ( dataElement ) ; } rval = parent ; } return rval ; } private static < T extends Comparable < T > > int compare ( final T o1 , final T o2 ) { return o1 . compareTo ( o2 ) ; MST[ReturnValsMutator]MSP[] }
rotateLeft ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; } } } } makeBlack ( rootNode [ dataElement . ordinal () ] , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } private void doRedBlackDelete ( final Node < K , V > deletedNode ) {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.UOI4Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rval = null ; } else if ( node . getLeft ( dataElement ) != null ) { rval = greatestNode ( node . getLeft ( dataElement ) , dataElement ) ; } else {
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[NegateConditionalsMutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[NegateConditionalsMutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
return lookupKey ( key ) != null ; MST[InlineConstantMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[NegateConditionalsMutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[rv.CRCR3Mutator]MSP[] return buf . toString () ; }
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.CRCR1Mutator]MSP[] }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.AOR4Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
private void rotateLeft ( final Node < K , V > node , final DataElement dataElement ) { final Node < K , V > rightChild = node . getRight ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] node . setRight ( rightChild . getLeft ( dataElement ) , dataElement ) ;
final Node < K , V > node = nextSmaller ( lookupKey ( key ) , KEY ) ; MST[NonVoidMethodCallMutator]MSP[] return node == null ? null : node . getKey () ; } @Override public Set < K > keySet () { if ( keySet == null ) {
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; MST[ReturnValsMutator]MSP[] } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; } @Override
private Node < K , V > getParent ( final Node < K , V > node , final DataElement dataElement ) { return node == null ? null : node . getParent ( dataElement ) ; MST[ArgumentPropagationMutator]MSP[] }
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
private static void makeRed ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] node . setRed ( dataElement ) ; } }
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[rv.ROR5Mutator]MSP[] child = parent ;
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.ROR5Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
if ( node == null ) { final Node < K , V > root = new Node <> ( key , value ) ; MST[ConstructorCallMutator]MSP[] rootNode [ KEY . ordinal () ] = root ; rootNode [ VALUE . ordinal () ] = root ; grow () ;
rotateLeft ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } } } } makeBlack ( rootNode [ dataElement . ordinal () ] , dataElement ) ; } private void doRedBlackDelete ( final Node < K , V > deletedNode ) {
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] } else {
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[rv.CRCR1Mutator]MSP[] . append ( '=' )
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] rval = rval . getRight ( dataElement ) ; } } return rval ; }
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[rv.ROR5Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] makeBlack ( y , dataElement ) ;
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.UOI3Mutator]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
if ( value . equals ( other . get ( key ) ) == false ) { return false ; } } } catch ( final ClassCastException ex ) { return false ; } catch ( final NullPointerException ex ) { return false ; } } return true ; MST[rv.CRCR3Mutator]MSP[] }
private Node < K , V > lookupKey ( final Object key ) { return this . <K > lookup ( key , KEY ) ; MST[NonVoidMethodCallMutator]MSP[] } private Node < K , V > lookupValue ( final Object value ) {
newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; MST[VoidMethodCallMutator]MSP[] grow () ; break; } } } } } private V doRemoveKey ( final Object key ) { final Node < K , V > node = lookupKey ( key ) ;
if ( rightChild . getLeft ( dataElement ) != null ) { rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[]
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR3Mutator]MSP[]
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.AOR1Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[ConstructorCallMutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
return greatestNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K nextKey ( final K key ) { checkKey ( key ) ; MST[VoidMethodCallMutator]MSP[]
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR3Mutator]MSP[] }
Node < K , V > currentNode = replacementNode ; while ( currentNode != rootNode [ dataElement . ordinal () ] && isBlack ( currentNode , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; MST[rv.UOI1Mutator]MSP[] } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; MST[NullReturnValsMutator]MSP[] } return new ViewMapIterator ( KEY ) ; } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; } @Override
public K getKey ( final Object value ) { checkValue ( value ) ; final Node < K , V > node = lookupValue ( value ) ; return node == null ? null : node . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; MST[rv.UOI4Mutator]MSP[] } @Override public boolean isEmpty () { return nodeCount == 0 ; } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR4Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
Node < K , V > node = rootNode [ dataElement . ordinal () ] ; while ( node != null ) { MST[NegateConditionalsMutator]MSP[] final int cmp = compare ( ( T ) data , ( T ) node . getData ( dataElement ) ) ;
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.UOI4Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
final Object key = it . next () ; MST[NonVoidMethodCallMutator]MSP[] final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; } private String doToString ( final DataElement dataElement ) {
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[rv.CRCR4Mutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( leftChild . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] rval = rval . getRight ( dataElement ) ; } } return rval ; }
node = node . getRight ( KEY ) ; } else { final Node < K , V > newNode = new Node <> ( key , value ) ; insertValue ( newNode ) ; node . setRight ( newNode , KEY ) ; MST[VoidMethodCallMutator]MSP[]
private static void makeBlack ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[rv.ROR5Mutator]MSP[] node . setBlack ( dataElement ) ; } }
} private void modify () { modifications ++ ; MST[experimental.MemberVariableMutator]MSP[] } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[rv.CRCR6Mutator]MSP[] }
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[rv.ROR5Mutator]MSP[] } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rval = null ; } else if ( node . getRight ( dataElement ) != null ) { rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; } } return total ; MST[rv.UOI4Mutator]MSP[] } private String doToString ( final DataElement dataElement ) {
if ( rightChild . getLeft ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
if ( deletedNode . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR4Mutator]MSP[] doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
boolean hasNext = it . hasNext () ; while ( hasNext ) { MST[rv.ROR1Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) . append ( '=' )
if ( rightChild . getLeft ( dataElement ) != null ) { rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[]
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[rv.ROR5Mutator]MSP[] . append ( '=' )
final Node < K , V > node = nextGreater ( lookupKey ( key ) , KEY ) ; return node == null ? null : node . getKey () ; MST[NegateConditionalsMutator]MSP[] } @Override public K previousKey ( final K key ) { checkKey ( key ) ;
rotateLeft ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; } } } } makeBlack ( rootNode [ dataElement . ordinal () ] , dataElement ) ; MST[VoidMethodCallMutator]MSP[] } private void doRedBlackDelete ( final Node < K , V > deletedNode ) {
private Node < K , V > getGrandParent ( final Node < K , V > node , final DataElement dataElement ) { return getParent ( getParent ( node , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] }
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; MST[VoidMethodCallMutator]MSP[] doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) {
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) { MST[ArgumentPropagationMutator]MSP[]
return lookupKey ( key ) != null ; } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public V get ( final Object key ) { checkKey ( key ) ;
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[ArgumentPropagationMutator]MSP[] child = parent ;
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] child = parent ;
return lookupKey ( key ) != null ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI4Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
private void doPut ( final K key , final V value ) { checkKeyAndValue ( key , value ) ; doRemoveKey ( key ) ; MST[NonVoidMethodCallMutator]MSP[] doRemoveValue ( value ) ; Node < K , V > node = rootNode [ KEY . ordinal () ] ;
Node < K , V > rval = node ; if ( rval != null ) { while ( rval . getRight ( dataElement ) != null ) { MST[rv.ROR5Mutator]MSP[] rval = rval . getRight ( dataElement ) ; } } return rval ; }
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.AOD1Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
lr_6 + newNode . getData ( VALUE ) + lr_3 ) ; } else if ( cmp < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( node . getLeft ( VALUE ) != null ) { node = node . getLeft ( VALUE ) ; } else {
if ( rightChild . getLeft ( dataElement ) != null ) { MST[NegateConditionalsMutator]MSP[] rightChild . getLeft ( dataElement ) . setParent ( node , dataElement ) ; } rightChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
} private void doRedBlackInsert ( final Node < K , V > insertedNode , final DataElement dataElement ) { Node < K , V > currentNode = insertedNode ; makeRed ( currentNode , dataElement ) ; MST[VoidMethodCallMutator]MSP[] while ( currentNode != null
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.UOI1Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[rv.AOR2Mutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { throw new ClassCastException ( dataElement + lr_5 ) ; MST[ConstructorCallMutator]MSP[] } } private static void checkKey ( final Object key ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[InlineConstantMutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.UOI1Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
for ( final DataElement dataElement : DataElement . values () ) { MST[rv.UOI1Mutator]MSP[] if ( deletedNode . getLeft ( dataElement ) != null && deletedNode . getRight ( dataElement ) != null ) { swapPosition ( nextGreater ( deletedNode , dataElement ) , deletedNode , dataElement ) ; }
public Set < Map . Entry < K , V > > entrySet () { if ( entrySet == null ) { entrySet = new EntryView () ; } return entrySet ; } @Override public OrderedMapIterator < K , V > mapIterator () { if ( isEmpty () ) { MST[rv.ROR4Mutator]MSP[]
return doRemoveKey ( key ) ; MST[ReturnValsMutator]MSP[] } @Override public void clear () { modify () ; nodeCount = 0 ; rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR1Mutator]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
node = node . getRight ( VALUE ) ; } else { node . setRight ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; MST[VoidMethodCallMutator]MSP[] break; } } } }
} else if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { deletedNode . getParent ( dataElement ) . setLeft ( replacement , dataElement ) ; } else { deletedNode . getParent ( dataElement ) . setRight ( replacement , dataElement ) ; MST[ArgumentPropagationMutator]MSP[]
private static void makeRed ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[NegateConditionalsMutator]MSP[] node . setRed ( dataElement ) ; } }
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { MST[rv.ROR5Mutator]MSP[] return true ; } if ( obj instanceof Map == false ) { return false ; }
if ( node . getParent ( dataElement ) == null ) { rootNode [ dataElement . ordinal () ] = leftChild ; MST[NonVoidMethodCallMutator]MSP[] } else if ( node . getParent ( dataElement ) . getRight ( dataElement ) == node ) {
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; MST[rv.CRCR6Mutator]MSP[] if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] . append ( '=' )
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.ROR3Mutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; MST[rv.ROR5Mutator]MSP[] } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { if ( currentNode . isLeftChild ( dataElement ) ) { MST[NonVoidMethodCallMutator]MSP[]
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.CRCR4Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; } @Override public K firstKey () { if ( nodeCount == 0 ) { MST[rv.ABSMutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.AOR2Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.UOI4Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } buf . append ( '}' ) ; return buf . toString () ; }
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] if ( getGrandParent ( currentNode , dataElement ) != null ) {
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[rv.ROR5Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
} deletedNode . setLeft ( null , dataElement ) ; deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { MST[rv.ROR4Mutator]MSP[] doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException (
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] } else { if ( currentNode . isRightChild ( dataElement ) ) { currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.CRCR4Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
final Object key = it . next () ; final Object value = it . getValue () ; total += key . hashCode () ^ value . hashCode () ; MST[NonVoidMethodCallMutator]MSP[] } } return total ; } private String doToString ( final DataElement dataElement ) {
if ( node == null ) { MST[rv.ROR5Mutator]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getKey () ; } @SuppressWarnings ( lr_4 )
if ( node == null ) { rval = null ; } else if ( node . getRight ( dataElement ) != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rval = leastNode ( node . getRight ( dataElement ) , dataElement ) ; } else {
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.UOI3Mutator]MSP[] } return rval ; }
for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[rv.ROR1Mutator]MSP[] final Object key = it . next () ; final Object value = it . getValue () ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[MathMutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; MST[rv.CRCR1Mutator]MSP[] final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[ArgumentPropagationMutator]MSP[] makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) {
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[NegateConditionalsMutator]MSP[] child = parent ;
for ( final Map . Entry < ? extends K , ? extends V > e : map . entrySet () ) { MST[NonVoidMethodCallMutator]MSP[] put ( e . getKey () , e . getValue () ) ; } } @Override public V remove ( final Object key ) {
if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Node < K , V > root = new Node <> ( key , value ) ; rootNode [ KEY . ordinal () ] = root ; rootNode [ VALUE . ordinal () ] = root ; grow () ;
if ( node == null ) { MST[rv.ROR5Mutator]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getValue () ; } private K doRemoveValue ( final Object value ) { final Node < K , V > node = lookupValue ( value ) ;
} makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; MST[VoidMethodCallMutator]MSP[] makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { rotateRight ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; }
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[rv.ROR4Mutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
Node < K , V > node = rootNode [ VALUE . ordinal () ] ; while ( true ) { final int cmp = compare ( newNode . getValue () , node . getValue () ) ; if ( cmp == 0 ) { MST[rv.UOI3Mutator]MSP[] throw new IllegalArgumentException (
Objects . requireNonNull ( obj , Objects . toString ( dataElement ) ) ; if ( ! ( obj instanceof Comparable ) ) { MST[rv.ROR2Mutator]MSP[] throw new ClassCastException ( dataElement + lr_5 ) ; } } private static void checkKey ( final Object key ) {
if ( deletedNode . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rootNode [ dataElement . ordinal () ] = null ; } else { if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( deletedNode , dataElement ) ; }
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.UOI3Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
} deletedNode . setLeft ( null , dataElement ) ; MST[VoidMethodCallMutator]MSP[] deletedNode . setRight ( null , dataElement ) ; deletedNode . setParent ( null , dataElement ) ; if ( isBlack ( deletedNode , dataElement ) ) { doRedBlackDeleteFixup ( replacement , dataElement ) ; } } else {
final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != size () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } if ( nodeCount > 0 ) { try {
private void doPut ( final K key , final V value ) { checkKeyAndValue ( key , value ) ; doRemoveKey ( key ) ; doRemoveValue ( value ) ; Node < K , V > node = rootNode [ KEY . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[]
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.UOI4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
Node < K , V > parent = node . getParent ( dataElement ) ; Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { MST[rv.ROR5Mutator]MSP[] child = parent ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; MST[rv.CRCR3Mutator]MSP[] buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
if ( nodeCount == 0 ) { return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[]
final Node < K , V > y = getRightChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( isRed ( y , dataElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeBlack ( y , dataElement ) ;
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; } @Override public int hashCode () { return this . doHashCode ( KEY ) ; } @Override public String toString () { return this . doToString ( KEY ) ; MST[ReturnValsMutator]MSP[] }
node . setLeft ( newNode , VALUE ) ; newNode . setParent ( node , VALUE ) ; doRedBlackInsert ( newNode , VALUE ) ; break; } } else { if ( node . getRight ( VALUE ) != null ) { MST[rv.ROR5Mutator]MSP[]
if ( leftChild . getRight ( dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[] leftChild . getRight ( dataElement ) . setParent ( node , dataElement ) ; } leftChild . setParent ( node . getParent ( dataElement ) , dataElement ) ;
return leastNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; } @Override public K lastKey () { if ( nodeCount == 0 ) { MST[rv.ABSMutator]MSP[] throw new NoSuchElementException ( lr_1 ) ; }
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[rv.ROR4Mutator]MSP[] } return rval ; }
return lookupKey ( key ) != null ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) { checkValue ( value ) ; return lookupValue ( value ) != null ; } @Override public V get ( final Object key ) { checkKey ( key ) ;
return doRemoveKey ( key ) ; } @Override public void clear () { modify () ; nodeCount = 0 ; MST[experimental.MemberVariableMutator]MSP[] rootNode [ KEY . ordinal () ] = null ; rootNode [ VALUE . ordinal () ] = null ; } @Override
parent = parent . getParent ( dataElement ) ; } rval = parent ; } return rval ; } private static < T extends Comparable < T > > int compare ( final T o1 , final T o2 ) { return o1 . compareTo ( o2 ) ; MST[PrimitiveReturnsMutator]MSP[] }
private Node < K , V > leastNode ( final Node < K , V > node , final DataElement dataElement ) { Node < K , V > rval = node ; if ( rval != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( deletedNode . getParent ( dataElement ) != null ) { if ( deletedNode == deletedNode . getParent ( dataElement ) . getLeft ( dataElement ) ) { MST[ArgumentPropagationMutator]MSP[] deletedNode . getParent ( dataElement ) . setLeft ( null , dataElement ) ; } else {
return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; } return new ViewMapIterator ( KEY ) ; MST[NullReturnValsMutator]MSP[] } @Override public OrderedBidiMap < V , K > inverseBidiMap () { if ( inverse == null ) { inverse = new Inverse () ; } return inverse ; } @Override
if ( cmp == 0 ) { rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } return rval ; }
private static void makeRed ( final Node < ? , ? > node , final DataElement dataElement ) { if ( node != null ) { MST[rv.ROR5Mutator]MSP[] node . setRed ( dataElement ) ; } }
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { MST[rv.ROR2Mutator]MSP[] for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) {
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[experimental.RemoveSwitchMutator_0]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
} } else { final Node < K , V > y = getLeftChild ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] if ( isRed ( y , dataElement ) ) { makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ;
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; } private void shrink () { modify () ; nodeCount -- ; MST[rv.UOI1Mutator]MSP[] } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
private MapIterator < ? , ? > getMapIterator ( final DataElement dataElement ) { switch ( dataElement ) { MST[experimental.RemoveSwitchMutator_1]MSP[] case KEY : return new ViewMapIterator ( KEY ) ; case VALUE : return new InverseViewMapIterator ( VALUE ) ; default: throw new IllegalArgumentException () ; } }
public boolean equals ( final Object obj ) { return this . doEquals ( obj , KEY ) ; } @Override public int hashCode () { return this . doHashCode ( KEY ) ; MST[ReturnValsMutator]MSP[] } @Override public String toString () { return this . doToString ( KEY ) ; }
return greatestNode ( rootNode [ KEY . ordinal () ] , KEY ) . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public K nextKey ( final K key ) { checkKey ( key ) ;
keySet = new KeyView ( KEY ) ; } return keySet ; } @Override public Set < V > values () { if ( valuesSet == null ) { MST[rv.ROR5Mutator]MSP[] valuesSet = new ValueView ( KEY ) ; } return valuesSet ; } @Override
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) {
} private void modify () { modifications ++ ; } private void grow () { modify () ; nodeCount ++ ; MST[rv.AOD1Mutator]MSP[] } private void shrink () { modify () ; nodeCount -- ; } private void insertValue ( final Node < K , V > newNode ) throws IllegalArgumentException {
rotateRight ( currentNode , dataElement ) ; } makeBlack ( getParent ( currentNode , dataElement ) , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; if ( getGrandParent ( currentNode , dataElement ) != null ) { MST[NonVoidMethodCallMutator]MSP[]
if ( node == null ) { MST[NegateConditionalsMutator]MSP[] return null ; } doRedBlackDelete ( node ) ; return node . getKey () ; } @SuppressWarnings ( lr_4 )
private static boolean isBlack ( final Node < ? , ? > node , final DataElement dataElement ) { return node == null || node . isBlack ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( cmp == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rval = node ; break; } node = cmp < 0 ? node . getLeft ( dataElement ) : node . getRight ( dataElement ) ; } return rval ; }
} else { to . copyColor ( from , dataElement ) ; } } } private static boolean isRed ( final Node < ? , ? > node , final DataElement dataElement ) { return node != null && node . isRed ( dataElement ) ; MST[rv.ROR2Mutator]MSP[] }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[rv.UOI1Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { MST[rv.ROR2Mutator]MSP[] buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
node . setLeft ( newNode , KEY ) ; newNode . setParent ( node , KEY ) ; doRedBlackInsert ( newNode , KEY ) ; grow () ; break; } } else { if ( node . getRight ( KEY ) != null ) { MST[NonVoidMethodCallMutator]MSP[]
} else { while ( true ) { final int cmp = compare ( key , node . getKey () ) ; if ( cmp == 0 ) { throw new IllegalArgumentException ( lr_2 + key + lr_3 ) ; } else if ( cmp < 0 ) { MST[rv.ROR2Mutator]MSP[]
. append ( value == this ? lr_8 : value ) ; hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; MST[rv.CRCR6Mutator]MSP[] return buf . toString () ; }
if ( node . getParent ( dataElement ) == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] rootNode [ dataElement . ordinal () ] = rightChild ; } else if ( node . getParent ( dataElement ) . getLeft ( dataElement ) == node ) {
&& currentNode != rootNode [ dataElement . ordinal () ] && isRed ( currentNode . getParent ( dataElement ) , dataElement ) ) { MST[rv.ROR4Mutator]MSP[] if ( currentNode . isLeftChild ( dataElement ) ) {
Node < K , V > node = rootNode [ dataElement . ordinal () ] ; MST[NonVoidMethodCallMutator]MSP[] while ( node != null ) { final int cmp = compare ( ( T ) data , ( T ) node . getData ( dataElement ) ) ;
if ( nodeCount == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return lr_7 ; } final StringBuilder buf = new StringBuilder ( nodeCount * 32 ) ; buf . append ( '{' ) ; final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ;
makeBlack ( y , dataElement ) ; makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isLeftChild ( dataElement ) ) { MST[NegateConditionalsMutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ;
Node < K , V > parent = node . getParent ( dataElement ) ; MST[NonVoidMethodCallMutator]MSP[] Node < K , V > child = node ; while ( parent != null && child == parent . getRight ( dataElement ) ) { child = parent ;
private boolean doEquals ( final Object obj , final DataElement dataElement ) { if ( obj == this ) { return true ; } if ( obj instanceof Map == false ) { MST[rv.ROR4Mutator]MSP[] return false ; }
@Override public String toString () { return description ; } @Override public int size () { return nodeCount ; } @Override public boolean isEmpty () { return nodeCount == 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public boolean containsKey ( final Object key ) { checkKey ( key ) ;
private int doHashCode ( final DataElement dataElement ) { int total = 0 ; if ( nodeCount > 0 ) { for ( final MapIterator < ? , ? > it = getMapIterator ( dataElement ) ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final Node < K , V > node = lookupKey ( key ) ; return node == null ? null : node . getValue () ; MST[NegateConditionalsMutator]MSP[] } @Override public V put ( final K key , final V value ) { final V result = get ( key ) ;
boolean hasNext = it . hasNext () ; while ( hasNext ) { final Object key = it . next () ; final Object value = it . getValue () ; buf . append ( key == this ? lr_8 : key ) MST[rv.CRCR4Mutator]MSP[] . append ( '=' )
. append ( value == this ? lr_8 : value ) ; MST[NonVoidMethodCallMutator]MSP[] hasNext = it . hasNext () ; if ( hasNext ) { buf . append ( lr_9 ) ; } } buf . append ( '}' ) ; return buf . toString () ; }
public K removeValue ( final Object value ) { return doRemoveValue ( value ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K firstKey () { if ( nodeCount == 0 ) { throw new NoSuchElementException ( lr_1 ) ; }
makeRed ( getGrandParent ( currentNode , dataElement ) , dataElement ) ; currentNode = getGrandParent ( currentNode , dataElement ) ; } else { if ( currentNode . isRightChild ( dataElement ) ) { MST[rv.ROR2Mutator]MSP[] currentNode = getParent ( currentNode , dataElement ) ; rotateLeft ( currentNode , dataElement ) ;
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR5Mutator]MSP[] return false ; }
return new InverseViewMapEntryIterator () ; MST[ReturnValsMutator]MSP[] } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR3Mutator]MSP[] }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR5Mutator]MSP[] }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR1Mutator]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR3Mutator]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR1Mutator]MSP[] }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[InlineConstantMutator]MSP[] }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[NegateConditionalsMutator]MSP[] return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR1Mutator]MSP[] }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR5Mutator]MSP[] }
return new InverseViewMapEntryIterator () ; MST[ConstructorCallMutator]MSP[] } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR5Mutator]MSP[] return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[ReturnValsMutator]MSP[] }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR4Mutator]MSP[] return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR1Mutator]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR4Mutator]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[ReturnValsMutator]MSP[] }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[InlineConstantMutator]MSP[] }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[NegateConditionalsMutator]MSP[] return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR6Mutator]MSP[] }
return new InverseViewMapEntryIterator () ; MST[NullReturnValsMutator]MSP[] } public final boolean hasNext () { return nextNode != null ; } protected Node < K , V > navigateNext () { if ( nextNode == null ) { throw new NoSuchElementException () ; } if ( modifications != expectedModifications ) {
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR3Mutator]MSP[] }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR3Mutator]MSP[] return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR2Mutator]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] }
public Iterator < Map . Entry < K , V > > iterator () { return new ViewMapEntryIterator () ; } @Override public boolean contains ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { return false ; MST[rv.CRCR6Mutator]MSP[] }
return node != null && node . getKey () . equals ( value ) ; } @Override public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry == false ) { MST[rv.ROR2Mutator]MSP[] return false ; }
return createEntry ( navigateNext () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Map . Entry < V , K > previous () { return createEntry ( navigatePrevious () ) ; } private Map . Entry < V , K > createEntry ( final Node < K , V > node ) {
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; default:
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; default:
return createEntry ( navigateNext () ) ; MST[NullReturnValsMutator]MSP[] } @Override public Map . Entry < V , K > previous () { return createEntry ( navigatePrevious () ) ; } private Map . Entry < V , K > createEntry ( final Node < K , V > node ) {
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; MST[NullReturnValsMutator]MSP[] } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; default:
return createEntry ( navigateNext () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Map . Entry < V , K > previous () { return createEntry ( navigatePrevious () ) ; } private Map . Entry < V , K > createEntry ( final Node < K , V > node ) {
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; MST[ReturnValsMutator]MSP[] } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; default:
return createEntry ( navigateNext () ) ; } @Override public Map . Entry < V , K > previous () { return createEntry ( navigatePrevious () ) ; MST[NonVoidMethodCallMutator]MSP[] } private Map . Entry < V , K > createEntry ( final Node < K , V > node ) {
return createEntry ( navigateNext () ) ; MST[ReturnValsMutator]MSP[] } @Override public Map . Entry < V , K > previous () { return createEntry ( navigatePrevious () ) ; } private Map . Entry < V , K > createEntry ( final Node < K , V > node ) {
return new UnmodifiableMapEntry <> ( node . getValue () , node . getKey () ) ; MST[ConstructorCallMutator]MSP[] } private Object getData ( final DataElement dataElement ) { switch ( dataElement ) { case KEY : return getKey () ; case VALUE : return getValue () ; default:
public K getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( lr_11 ) ; }
return lastReturnedNode . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; } @Override public K previous () { return navigatePrevious () . getKey () ;
return lastReturnedNode . getValue () ; } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public K previous () { return navigatePrevious () . getKey () ;
return lastReturnedNode . getValue () ; } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public K next () { return navigateNext () . getKey () ; } @Override public K previous () { return navigatePrevious () . getKey () ;
return lastReturnedNode . getValue () ; } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public K previous () { return navigatePrevious () . getKey () ;
return lastReturnedNode . getValue () ; MST[ReturnValsMutator]MSP[] } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; } @Override public K previous () { return navigatePrevious () . getKey () ;
return lastReturnedNode . getValue () ; MST[NullReturnValsMutator]MSP[] } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; } @Override public K previous () { return navigatePrevious () . getKey () ;
return lastReturnedNode . getValue () ; } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K previous () { return navigatePrevious () . getKey () ;
return lastReturnedNode . getValue () ; } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K previous () { return navigatePrevious () . getKey () ;
public K getKey () { if ( lastReturnedNode == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
public K getKey () { if ( lastReturnedNode == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
public K getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( lr_11 ) ; }
public K getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException ( lr_11 ) ; }
return lastReturnedNode . getValue () ; } @Override public V setValue ( final V obj ) { throw new UnsupportedOperationException () ; } @Override public K next () { return navigateNext () . getKey () ; } @Override public K previous () { return navigatePrevious () . getKey () ; MST[NonVoidMethodCallMutator]MSP[]
public K getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( MST[ConstructorCallMutator]MSP[] lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
public K getKey () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_11 ) ; }
public K getKey () { if ( lastReturnedNode == null ) { throw new IllegalStateException ( lr_10 ) ; } return lastReturnedNode . getKey () ; } @Override public V getValue () { if ( lastReturnedNode == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( lr_11 ) ; }
