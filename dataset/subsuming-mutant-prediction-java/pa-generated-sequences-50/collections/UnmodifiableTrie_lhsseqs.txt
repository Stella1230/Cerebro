public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] @SuppressWarnings ( lr_1 )
public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_1 )
return Collections . unmodifiableSet ( delegate . entrySet () ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public Set < K > keySet () { return Collections . unmodifiableSet ( delegate . keySet () ) ; } @Override public Collection < V > values () {
return Collections . unmodifiableSet ( delegate . entrySet () ) ; MST[ReturnValsMutator]MSP[] } @Override public Set < K > keySet () { return Collections . unmodifiableSet ( delegate . keySet () ) ; } @Override public Collection < V > values () {
public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_1 )
public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_1 )
public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] @SuppressWarnings ( lr_1 )
return Collections . unmodifiableSet ( delegate . entrySet () ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public Set < K > keySet () { return Collections . unmodifiableSet ( delegate . keySet () ) ; } @Override public Collection < V > values () {
final Trie < K , V > tmpTrie = ( Trie < K , V > ) trie ; return tmpTrie ; } return new UnmodifiableTrie <> ( trie ) ; MST[ConstructorCallMutator]MSP[] } @Override public Set < Entry < K , V > > entrySet () {
final Trie < K , V > tmpTrie = ( Trie < K , V > ) trie ; return tmpTrie ; MST[NullReturnValsMutator]MSP[] } return new UnmodifiableTrie <> ( trie ) ; } @Override public Set < Entry < K , V > > entrySet () {
return Collections . unmodifiableSet ( delegate . entrySet () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Set < K > keySet () { return Collections . unmodifiableSet ( delegate . keySet () ) ; } @Override public Collection < V > values () {
final Trie < K , V > tmpTrie = ( Trie < K , V > ) trie ; return tmpTrie ; } return new UnmodifiableTrie <> ( trie ) ; MST[NullReturnValsMutator]MSP[] } @Override public Set < Entry < K , V > > entrySet () {
return Collections . unmodifiableSet ( delegate . entrySet () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Set < K > keySet () { return Collections . unmodifiableSet ( delegate . keySet () ) ; } @Override public Collection < V > values () {
public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_1 )
final Trie < K , V > tmpTrie = ( Trie < K , V > ) trie ; return tmpTrie ; MST[ReturnValsMutator]MSP[] } return new UnmodifiableTrie <> ( trie ) ; } @Override public Set < Entry < K , V > > entrySet () {
public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_1 )
final Trie < K , V > tmpTrie = ( Trie < K , V > ) trie ; return tmpTrie ; } return new UnmodifiableTrie <> ( trie ) ; MST[ReturnValsMutator]MSP[] } @Override public Set < Entry < K , V > > entrySet () {
public static < K , V > Trie < K , V > unmodifiableTrie ( final Trie < K , ? extends V > trie ) { if ( trie instanceof Unmodifiable ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_1 )
