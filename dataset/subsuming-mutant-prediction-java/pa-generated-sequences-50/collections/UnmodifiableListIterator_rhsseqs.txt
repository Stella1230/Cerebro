return iterator . next () ; MST[ReturnValsMutator]MSP[N] } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; } @Override
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; } return new UnmodifiableListIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public E next () {
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public E previous () { return iterator . previous () ; } @Override
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] @SuppressWarnings ( lr_2 )
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; MST[PrimitiveReturnsMutator]MSP[S] } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; } @Override
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; } return new UnmodifiableListIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public E next () {
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; MST[ReturnValsMutator]MSP[N] } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; } @Override
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; } return new UnmodifiableListIterator <> ( iterator ) ; MST[ReturnValsMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override public E next () {
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; } return new UnmodifiableListIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override public E next () {
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; MST[BooleanFalseReturnValsMutator]MSP[S] } @Override public E previous () { return iterator . previous () ; } @Override
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public E previous () { return iterator . previous () ; } @Override
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[N] if ( iterator instanceof Unmodifiable ) { @SuppressWarnings ( lr_2 )
public int previousIndex () { return iterator . previousIndex () ; MST[PrimitiveReturnsMutator]MSP[N] } @Override public void remove () { throw new UnsupportedOperationException ( lr_3 ) ; } @Override public void set ( final E obj ) { throw new UnsupportedOperationException ( lr_4 ) ; } @Override
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; } @Override
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; MST[ReturnValsMutator]MSP[S] } @Override
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; MST[NullReturnValsMutator]MSP[S] } @Override
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; } return new UnmodifiableListIterator <> ( iterator ) ; MST[ConstructorCallMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override public E next () {
public int previousIndex () { return iterator . previousIndex () ; MST[ReturnValsMutator]MSP[N] } @Override public void remove () { throw new UnsupportedOperationException ( lr_3 ) ; } @Override public void set ( final E obj ) { throw new UnsupportedOperationException ( lr_4 ) ; } @Override
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; MST[ReturnValsMutator]MSP[N] } @Override public E previous () { return iterator . previous () ; } @Override
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR2Mutator]MSP[S] @SuppressWarnings ( lr_2 )
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR1Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public int previousIndex () { return iterator . previousIndex () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public void remove () { throw new UnsupportedOperationException ( lr_3 ) ; } @Override public void set ( final E obj ) { throw new UnsupportedOperationException ( lr_4 ) ; } @Override
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR3Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR4Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( iterator instanceof Unmodifiable ) { @SuppressWarnings ( lr_2 )
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; } return new UnmodifiableListIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[N] } @Override public E next () {
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR5Mutator]MSP[N] @SuppressWarnings ( lr_2 )
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; } return new UnmodifiableListIterator <> ( iterator ) ; MST[NullReturnValsMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override public E next () {
public int previousIndex () { return iterator . previousIndex () ; } @Override public void remove () { throw new UnsupportedOperationException ( lr_3 ) ; } @Override public void set ( final E obj ) { throw new UnsupportedOperationException ( lr_4 ) ; MST[ConstructorCallMutator]MSP[S] } @Override
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; MST[ReturnValsMutator]MSP[N] } return new UnmodifiableListIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override public E next () {
public void add ( final E obj ) { throw new UnsupportedOperationException ( lr_5 ) ; MST[ConstructorCallMutator]MSP[S] }
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[NegateConditionalsMutator]MSP[N] @SuppressWarnings ( lr_2 )
return iterator . next () ; MST[NullReturnValsMutator]MSP[N] } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; } @Override
return iterator . next () ; } @Override public int nextIndex () { return iterator . nextIndex () ; } @Override public boolean hasPrevious () { return iterator . hasPrevious () ; } @Override public E previous () { return iterator . previous () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
final ListIterator < E > tmpIterator = ( ListIterator < E > ) iterator ; return tmpIterator ; MST[NullReturnValsMutator]MSP[N] } return new UnmodifiableListIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override public E next () {
public int previousIndex () { return iterator . previousIndex () ; } @Override public void remove () { throw new UnsupportedOperationException ( lr_3 ) ; MST[ConstructorCallMutator]MSP[S] } @Override public void set ( final E obj ) { throw new UnsupportedOperationException ( lr_4 ) ; } @Override
public static < E > ListIterator < E > umodifiableListIterator ( final ListIterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] @SuppressWarnings ( lr_2 )
