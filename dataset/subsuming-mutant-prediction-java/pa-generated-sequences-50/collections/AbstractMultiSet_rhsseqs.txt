@Override public void clear () { parent . clear () ; } @Override public int size () { return parent . uniqueElements () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public Iterator < Entry < E > > iterator () { return parent . createEntrySetIterator () ; } @Override
@Override public void clear () { parent . clear () ; } @Override public int size () { return parent . uniqueElements () ; MST[PrimitiveReturnsMutator]MSP[N] } @Override public Iterator < Entry < E > > iterator () { return parent . createEntrySetIterator () ; } @Override
@Override public void clear () { parent . clear () ; } @Override public int size () { return parent . uniqueElements () ; MST[ReturnValsMutator]MSP[S] } @Override public Iterator < Entry < E > > iterator () { return parent . createEntrySetIterator () ; } @Override
return parent . containsAll ( coll ) ; } @Override public boolean remove ( final Object key ) { return parent . remove ( key , parent . getCount ( key ) ) != 0 ; } @Override public int size () { return parent . uniqueElements () ; MST[ReturnValsMutator]MSP[S] }
@Override public Iterator < E > iterator () { return parent . createUniqueSetIterator () ; MST[ReturnValsMutator]MSP[S] } @Override public boolean contains ( final Object key ) { return parent . contains ( key ) ; } @Override public boolean containsAll ( final Collection < ? > coll ) {
return parent . containsAll ( coll ) ; } @Override public boolean remove ( final Object key ) { return parent . remove ( key , parent . getCount ( key ) ) != 0 ; } @Override public int size () { return parent . uniqueElements () ; MST[PrimitiveReturnsMutator]MSP[N] }
@Override public Iterator < E > iterator () { return parent . createUniqueSetIterator () ; MST[NullReturnValsMutator]MSP[S] } @Override public boolean contains ( final Object key ) { return parent . contains ( key ) ; } @Override public boolean containsAll ( final Collection < ? > coll ) {
return parent . containsAll ( coll ) ; } @Override public boolean remove ( final Object key ) { return parent . remove ( key , parent . getCount ( key ) ) != 0 ; } @Override public int size () { return parent . uniqueElements () ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public Iterator < E > iterator () { return parent . createUniqueSetIterator () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public boolean contains ( final Object key ) { return parent . contains ( key ) ; } @Override public boolean containsAll ( final Collection < ? > coll ) {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.ROR4Mutator]MSP[N]
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { uniqueSet = createUniqueSet () ; } return uniqueSet ; MST[ReturnValsMutator]MSP[N] } protected Set < E > createUniqueSet () {
add ( object , count - oldCount ) ; } else { remove ( object , oldCount - count ) ; } return oldCount ; MST[rv.UOI1Mutator]MSP[N] } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
add ( object , count - oldCount ) ; } else { remove ( object , oldCount - count ) ; } return oldCount ; MST[ReturnValsMutator]MSP[N] } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] uniqueSet = createUniqueSet () ; } return uniqueSet ; } protected Set < E > createUniqueSet () {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI3Mutator]MSP[N]
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { MST[NegateConditionalsMutator]MSP[S] entrySet = createEntrySet () ; } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
add ( object , count - oldCount ) ; MST[rv.AOR1Mutator]MSP[S] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return new UniqueSet <> ( this ) ; MST[EmptyObjectReturnValsMutator]MSP[N] } protected Iterator < E > createUniqueSetIterator () { final Transformer < Entry < E > , E > transformer = entry -> entry . getElement () ; return IteratorUtils . transformedIterator ( entrySet () . iterator () , transformer ) ;
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.UOI2Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[ConditionalsBoundaryMutator]MSP[N]
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.ROR3Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
add ( object , 1 ) ; return true ; MST[rv.CRCR5Mutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] entrySet = createEntrySet () ; } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI3Mutator]MSP[N]
add ( object , count - oldCount ) ; MST[rv.UOI1Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { entrySet = createEntrySet () ; } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; MST[ConstructorCallMutator]MSP[S] }
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[ConditionalsBoundaryMutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
add ( object , 1 ) ; return true ; MST[ReturnValsMutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , count - oldCount ) ; } else { remove ( object , oldCount - count ) ; } return oldCount ; MST[rv.ABSMutator]MSP[N] } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , count - oldCount ) ; MST[ArgumentPropagationMutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { entrySet = createEntrySet () ; } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; MST[EmptyObjectReturnValsMutator]MSP[N] }
add ( object , 1 ) ; MST[rv.CRCR4Mutator]MSP[N] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
return new UniqueSet <> ( this ) ; MST[ConstructorCallMutator]MSP[N] } protected Iterator < E > createUniqueSetIterator () { final Transformer < Entry < E > , E > transformer = entry -> entry . getElement () ; return IteratorUtils . transformedIterator ( entrySet () . iterator () , transformer ) ;
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.ROR1Mutator]MSP[N]
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.ROR3Mutator]MSP[N]
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.ABSMutator]MSP[N]
add ( object , count - oldCount ) ; } else { remove ( object , oldCount - count ) ; } return oldCount ; MST[rv.UOI2Mutator]MSP[N] } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , 1 ) ; MST[InlineConstantMutator]MSP[N] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , 1 ) ; return true ; MST[rv.CRCR4Mutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.UOI3Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( oldCount < count ) {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.ABSMutator]MSP[N]
add ( object , count - oldCount ) ; } else { remove ( object , oldCount - count ) ; } return oldCount ; MST[PrimitiveReturnsMutator]MSP[N] } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , 1 ) ; return true ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , 1 ) ; MST[NonVoidMethodCallMutator]MSP[N] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI4Mutator]MSP[N]
add ( object , count - oldCount ) ; MST[rv.UOI1Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , count - oldCount ) ; MST[rv.AOR2Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[S] } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { MST[rv.ROR5Mutator]MSP[S] entrySet = createEntrySet () ; } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI4Mutator]MSP[N]
add ( object , count - oldCount ) ; MST[rv.UOI2Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , 1 ) ; MST[rv.CRCR3Mutator]MSP[N] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.ABSMutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { entrySet = createEntrySet () ; } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; MST[ReturnValsMutator]MSP[S] }
add ( object , count - oldCount ) ; MST[NonVoidMethodCallMutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , count - oldCount ) ; MST[MathMutator]MSP[S] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.ROR1Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.UOI4Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.ROR2Mutator]MSP[N]
add ( object , count - oldCount ) ; } else { remove ( object , oldCount - count ) ; } return oldCount ; MST[rv.UOI3Mutator]MSP[N] } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { MST[rv.ROR5Mutator]MSP[N] uniqueSet = createUniqueSet () ; } return uniqueSet ; } protected Set < E > createUniqueSet () {
add ( object , count - oldCount ) ; MST[rv.UOI2Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { uniqueSet = createUniqueSet () ; } return uniqueSet ; MST[EmptyObjectReturnValsMutator]MSP[N] } protected Set < E > createUniqueSet () {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { entrySet = createEntrySet () ; MST[NonVoidMethodCallMutator]MSP[S] } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
add ( object , count - oldCount ) ; MST[rv.AOD2Mutator]MSP[S] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , 1 ) ; MST[rv.CRCR6Mutator]MSP[N] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , 1 ) ; MST[rv.CRCR2Mutator]MSP[N] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] uniqueSet = createUniqueSet () ; } return uniqueSet ; } protected Set < E > createUniqueSet () {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] entrySet = createEntrySet () ; } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI1Mutator]MSP[N]
add ( object , count - oldCount ) ; MST[rv.UOI3Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.ROR2Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { uniqueSet = createUniqueSet () ; MST[experimental.MemberVariableMutator]MSP[N] } return uniqueSet ; } protected Set < E > createUniqueSet () {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI1Mutator]MSP[N]
add ( object , count - oldCount ) ; MST[rv.UOI3Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , count - oldCount ) ; MST[rv.AOR3Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , 1 ) ; return true ; MST[InlineConstantMutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , 1 ) ; return true ; MST[rv.CRCR3Mutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.ROR5Mutator]MSP[S] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.ROR5Mutator]MSP[N]
add ( object , count - oldCount ) ; } else { remove ( object , oldCount - count ) ; } return oldCount ; MST[rv.UOI4Mutator]MSP[N] } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { uniqueSet = createUniqueSet () ; MST[NonVoidMethodCallMutator]MSP[N] } return uniqueSet ; } protected Set < E > createUniqueSet () {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { entrySet = createEntrySet () ; MST[experimental.MemberVariableMutator]MSP[S] } return entrySet ; } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.UOI1Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
add ( object , 1 ) ; return true ; MST[rv.CRCR2Mutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , 1 ) ; return true ; MST[rv.CRCR6Mutator]MSP[N] } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , count - oldCount ) ; MST[rv.ABSMutator]MSP[S] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[NegateConditionalsMutator]MSP[N]
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { entrySet = createEntrySet () ; } return entrySet ; MST[ReturnValsMutator]MSP[S] } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
add ( object , 1 ) ; MST[ArgumentPropagationMutator]MSP[N] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
add ( object , count - oldCount ) ; MST[rv.ABSMutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI2Mutator]MSP[N]
add ( object , count - oldCount ) ; MST[rv.UOI4Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , count - oldCount ) ; MST[rv.AOR4Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[NegateConditionalsMutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
add ( object , count - oldCount ) ; MST[rv.AOD1Mutator]MSP[S] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
add ( object , 1 ) ; MST[rv.CRCR5Mutator]MSP[S] return true ; } @Override public int add ( final E object , final int occurrences ) { throw new UnsupportedOperationException () ; } @Override public void clear () {
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
} @Override public Set < Entry < E > > entrySet () { if ( entrySet == null ) { entrySet = createEntrySet () ; } return entrySet ; MST[EmptyObjectReturnValsMutator]MSP[N] } protected Set < Entry < E > > createEntrySet () { return new EntrySet <> ( this ) ; }
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { MST[rv.ROR4Mutator]MSP[N] throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) {
return new UniqueSet <> ( this ) ; MST[ReturnValsMutator]MSP[N] } protected Iterator < E > createUniqueSetIterator () { final Transformer < Entry < E > , E > transformer = entry -> entry . getElement () ; return IteratorUtils . transformedIterator ( entrySet () . iterator () , transformer ) ;
return 0 ; } @Override public int setCount ( final E object , final int count ) { if ( count < 0 ) { throw new IllegalArgumentException ( lr_1 ) ; } final int oldCount = getCount ( object ) ; if ( oldCount < count ) { MST[rv.UOI2Mutator]MSP[N]
add ( object , count - oldCount ) ; MST[rv.UOI4Mutator]MSP[N] } else { remove ( object , oldCount - count ) ; } return oldCount ; } @Override public boolean contains ( final Object object ) { return getCount ( object ) > 0 ; } @Override
result = result || changed ; } return result ; } @Override public Set < E > uniqueSet () { if ( uniqueSet == null ) { MST[NegateConditionalsMutator]MSP[N] uniqueSet = createUniqueSet () ; } return uniqueSet ; } protected Set < E > createUniqueSet () {
