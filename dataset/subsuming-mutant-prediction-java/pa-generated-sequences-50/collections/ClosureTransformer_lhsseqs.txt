public static < T > Transformer < T , T > closureTransformer ( final Closure < ? super T > closure ) { return new ClosureTransformer <> ( Objects . requireNonNull ( closure , lr_1 ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public T transform ( final T input ) {
public static < T > Transformer < T , T > closureTransformer ( final Closure < ? super T > closure ) { return new ClosureTransformer <> ( Objects . requireNonNull ( closure , lr_1 ) ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public T transform ( final T input ) {
iClosure . execute ( input ) ; MST[VoidMethodCallMutator]MSP[] return input ; } public Closure < ? super T > getClosure () { return iClosure ; }
public static < T > Transformer < T , T > closureTransformer ( final Closure < ? super T > closure ) { return new ClosureTransformer <> ( Objects . requireNonNull ( closure , lr_1 ) ) ; MST[ConstructorCallMutator]MSP[] } @Override public T transform ( final T input ) {
iClosure . execute ( input ) ; return input ; } public Closure < ? super T > getClosure () { return iClosure ; MST[ReturnValsMutator]MSP[] }
public static < T > Transformer < T , T > closureTransformer ( final Closure < ? super T > closure ) { return new ClosureTransformer <> ( Objects . requireNonNull ( closure , lr_1 ) ) ; MST[NullReturnValsMutator]MSP[] } @Override public T transform ( final T input ) {
iClosure . execute ( input ) ; return input ; MST[NullReturnValsMutator]MSP[] } public Closure < ? super T > getClosure () { return iClosure ; }
iClosure . execute ( input ) ; return input ; } public Closure < ? super T > getClosure () { return iClosure ; MST[NullReturnValsMutator]MSP[] }
public static < T > Transformer < T , T > closureTransformer ( final Closure < ? super T > closure ) { return new ClosureTransformer <> ( Objects . requireNonNull ( closure , lr_1 ) ) ; MST[ReturnValsMutator]MSP[] } @Override public T transform ( final T input ) {
iClosure . execute ( input ) ; return input ; MST[ReturnValsMutator]MSP[] } public Closure < ? super T > getClosure () { return iClosure ; }
