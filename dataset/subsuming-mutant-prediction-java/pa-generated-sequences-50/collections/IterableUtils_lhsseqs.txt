final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.AOD1Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.ROR5Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ; MST[rv.UOI1Mutator]MSP[]
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[NegateConditionalsMutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.CRCR5Mutator]MSP[]
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.CRCR2Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; MST[NonVoidMethodCallMutator]MSP[] for ( final Predicate < ? > predicate : predicates ) {
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.ABSMutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI4Mutator]MSP[]
final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ; return partition ( iterable , factory , predicates ) ; MST[NonVoidMethodCallMutator]MSP[] }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.CRCR1Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI3Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[ReturnValsMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[] } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI2Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
for ( final Iterable < ? > iterable : iterables ) { MST[rv.ABSMutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override MST[NullReturnValsMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . matchesAny ( emptyIteratorIfNull ( iterable ) , predicate ) ; } public static < E > long countMatches ( final Iterable < E > input , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[]
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.CRCR3Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI3Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[rv.UOI4Mutator]MSP[] }
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR5Mutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[rv.ROR2Mutator]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[NonVoidMethodCallMutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.UOI2Mutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR4Mutator]MSP[] } @Override
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR1Mutator]MSP[]
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; MST[ReturnValsMutator]MSP[] }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR3Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[rv.UOI2Mutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[NegateConditionalsMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
} } return partitions ; } public static < E > List < E > toList ( final Iterable < E > iterable ) { return IteratorUtils . toList ( emptyIteratorIfNull ( iterable ) ) ; MST[ReturnValsMutator]MSP[] }
public Iterator < E > iterator () { return new UniqueFilterIterator <> ( iterable . iterator () ) ; } public static < E > Iterable < E > unmodifiableIterable ( final Iterable < E > iterable ) { checkNotNull ( iterable ) ; MST[VoidMethodCallMutator]MSP[]
if ( iterable instanceof Collection < ? > ) { MST[rv.ROR2Mutator]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.ROR3Mutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[InlineConstantMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.CRCR3Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[ConditionalsBoundaryMutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI3Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; MST[rv.CRCR5Mutator]MSP[] break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[NegateConditionalsMutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
return ( ( Collection < ? > ) iterable ) . size () ; MST[ReturnValsMutator]MSP[] } return IteratorUtils . size ( emptyIteratorIfNull ( iterable ) ) ; } public static < O > List < List < O > > partition ( final Iterable < ? extends O > iterable ,
if ( predicates [ i ] . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return iterable == null ? IterableUtils . <E > emptyIterable () : iterable ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static < E > void forEach ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.ABSMutator]MSP[]
return IteratorUtils . matchesAll ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[ReturnValsMutator]MSP[] } public static < E > boolean matchesAny ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
return ( ( Collection < ? > ) iterable ) . size () ; } return IteratorUtils . size ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < O > List < List < O > > partition ( final Iterable < ? extends O > iterable ,
for ( final Iterable < ? > iterable : iterables ) { checkNotNull ( iterable ) ; MST[VoidMethodCallMutator]MSP[] } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI3Mutator]MSP[]
final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ; return partition ( iterable , factory , predicates ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
static void checkNotNull ( final Iterable < ? > iterable ) { Objects . requireNonNull ( iterable , lr_7 ) ; } static void checkNotNull ( final Iterable < ? > ... iterables ) { Objects . requireNonNull ( iterables , lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[]
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR3Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.ABSMutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR2Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ROR2Mutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.UOI1Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR6Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable instanceof List < ? > ) { MST[rv.ROR2Mutator]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR1Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR4Mutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[rv.ROR2Mutator]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[NegateConditionalsMutator]MSP[] }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[InlineConstantMutator]MSP[]
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR3Mutator]MSP[]
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.ROR4Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR2Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.ROR1Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[NullReturnValsMutator]MSP[] }
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ; MST[VoidMethodCallMutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.UOI4Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; } return iterable . iterator () ; } @Override MST[NullReturnValsMutator]MSP[] public Iterator < E > iterator () {
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; MST[ReturnValsMutator]MSP[] } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
public static < E > String toString ( final Iterable < E > iterable ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) ) ; MST[ReturnValsMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI2Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override MST[ReturnValsMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; } @Override MST[ReturnValsMutator]MSP[] public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[rv.ROR5Mutator]MSP[] }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI4Mutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[ReturnValsMutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.ROR2Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.ROR1Mutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[NullReturnValsMutator]MSP[]
return IteratorUtils . forEachButLast ( emptyIteratorIfNull ( iterable ) , closure ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > E find ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR4Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.UOI2Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[ConditionalsBoundaryMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[InlineConstantMutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR3Mutator]MSP[] } @Override
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; } @Override MST[ReturnValsMutator]MSP[] public Iterator < E > iterator () {
if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; MST[rv.UOI4Mutator]MSP[] for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; MST[ReturnValsMutator]MSP[] } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) {
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[rv.CRCR1Mutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
return IteratorUtils . matchesAny ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > long countMatches ( final Iterable < E > input , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ;
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR4Mutator]MSP[]
return iterable == null ? IterableUtils . <E > emptyIterable () : iterable ; MST[NegateConditionalsMutator]MSP[] } public static < E > void forEach ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ; MST[rv.UOI3Mutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR5Mutator]MSP[] } @Override
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 )
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[ConstructorCallMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[ArgumentPropagationMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.CRCR6Mutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[InlineConstantMutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
return IteratorUtils . find ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > int indexOf ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[ReturnValsMutator]MSP[] }
final Transformer < ? super E , String > transformer ) { Objects . requireNonNull ( transformer , lr_6 ) ; return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , transformer ) ; MST[ReturnValsMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR2Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI4Mutator]MSP[]
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; return partition ( iterable , factory , predicates ) ; MST[ReturnValsMutator]MSP[] }
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; } @Override MST[NullReturnValsMutator]MSP[] public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; MST[rv.CRCR4Mutator]MSP[] break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[rv.ROR5Mutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
final Transformer < ? super E , String > transformer , final String delimiter , final String prefix , final String suffix ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , MST[NonVoidMethodCallMutator]MSP[] transformer , delimiter , prefix , suffix ) ; }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI1Mutator]MSP[]
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI2Mutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.AOR2Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
return IteratorUtils . matchesAny ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > long countMatches ( final Iterable < E > input , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ;
return IteratorUtils . matchesAny ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static < E > long countMatches ( final Iterable < E > input , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ;
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI4Mutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[rv.ROR1Mutator]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI1Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
for ( final Iterable < ? > iterable : iterables ) { MST[rv.ABSMutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ROR1Mutator]MSP[]
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[NegateConditionalsMutator]MSP[]
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[rv.UOI1Mutator]MSP[] }
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; MST[NonVoidMethodCallMutator]MSP[] return Collections . singletonList ( singlePartition ) ; }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.ROR4Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI2Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; MST[rv.CRCR5Mutator]MSP[] for ( int i = 0 ; i < numberOfPredicates ; ++ i ) {
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; MST[rv.UOI3Mutator]MSP[] elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[NegateConditionalsMutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI3Mutator]MSP[]
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR4Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.CRCR6Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ROR5Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR4Mutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ; MST[rv.ABSMutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.CRCR5Mutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR2Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR6Mutator]MSP[] } @Override
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[rv.ABSMutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ; MST[rv.UOI2Mutator]MSP[]
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI3Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
return iterable == null ? IterableUtils . <E > emptyIterable () : iterable ; MST[ReturnValsMutator]MSP[] } public static < E > void forEach ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.CRCR5Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
if ( iterable instanceof List < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; MST[InlineConstantMutator]MSP[] for ( int i = 0 ; i < numberOfPredicates ; ++ i ) {
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.ABSMutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI4Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI3Mutator]MSP[]
static void checkNotNull ( final Iterable < ? > iterable ) { Objects . requireNonNull ( iterable , lr_7 ) ; MST[NonVoidMethodCallMutator]MSP[] } static void checkNotNull ( final Iterable < ? > ... iterables ) { Objects . requireNonNull ( iterables , lr_8 ) ;
if ( predicates [ i ] . evaluate ( element ) ) { MST[NonVoidMethodCallMutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; MST[BooleanFalseReturnValsMutator]MSP[] } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[NegateConditionalsMutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI1Mutator]MSP[]
return IteratorUtils . forEachButLast ( emptyIteratorIfNull ( iterable ) , closure ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > E find ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
return IteratorUtils . find ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > int indexOf ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
@Override public Iterator < Object > iterator () { return IteratorUtils . emptyIterator () ; } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > emptyIterable () { return EMPTY_ITERABLE ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI3Mutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.UOI3Mutator]MSP[]
public static < E > boolean contains ( final Iterable < ? extends E > iterable , final E object , final Equator < ? super E > equator ) { Objects . requireNonNull ( equator , lr_3 ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[]
public static < E > String toString ( final Iterable < E > iterable ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) ) ; MST[EmptyObjectReturnValsMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.ROR1Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.ROR3Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.ROR2Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
public static < E > String toString ( final Iterable < E > iterable ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 )
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.UOI1Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( iterable instanceof List < ? > ) { MST[rv.ROR1Mutator]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.ROR4Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ABSMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR3Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable instanceof List < ? > ) { MST[rv.ROR5Mutator]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[InlineConstantMutator]MSP[] } @Override
return ( ( Collection < ? > ) iterable ) . size () ; } return IteratorUtils . size ( emptyIteratorIfNull ( iterable ) ) ; MST[PrimitiveReturnsMutator]MSP[] } public static < O > List < List < O > > partition ( final Iterable < ? extends O > iterable ,
if ( iterable instanceof Collection < ? > ) { MST[rv.ROR3Mutator]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI3Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; MST[PrimitiveReturnsMutator]MSP[] }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI4Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; MST[rv.CRCR2Mutator]MSP[] break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; } return iterable . iterator () ; } @Override MST[ReturnValsMutator]MSP[] public Iterator < E > iterator () {
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI3Mutator]MSP[]
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.ABSMutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[ConditionalsBoundaryMutator]MSP[]
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR2Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[InlineConstantMutator]MSP[] return partition ( iterable , factory , predicates ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; MST[rv.ABSMutator]MSP[] elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR2Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
return IteratorUtils . find ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[ReturnValsMutator]MSP[] } public static < E > int indexOf ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.AOR4Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI4Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return IteratorUtils . matchesAll ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static < E > boolean matchesAny ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[rv.UOI3Mutator]MSP[] }
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[rv.ROR3Mutator]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
return ( ( Collection < ? > ) iterable ) . isEmpty () ; } return IteratorUtils . isEmpty ( emptyIteratorIfNull ( iterable ) ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static < E > boolean contains ( final Iterable < E > iterable , final Object object ) {
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; MST[ConstructorCallMutator]MSP[] for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.CRCR3Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[NullReturnValsMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR3Mutator]MSP[] } @Override
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ; MST[rv.UOI2Mutator]MSP[]
public static < E > String toString ( final Iterable < E > iterable ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[ArgumentPropagationMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[InlineConstantMutator]MSP[] } @Override
return ( ( Collection < ? > ) iterable ) . size () ; } return IteratorUtils . size ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < O > List < List < O > > partition ( final Iterable < ? extends O > iterable ,
return ( ( Collection < ? > ) iterable ) . isEmpty () ; } return IteratorUtils . isEmpty ( emptyIteratorIfNull ( iterable ) ) ; MST[ReturnValsMutator]MSP[] } public static < E > boolean contains ( final Iterable < E > iterable , final Object object ) {
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[NonVoidMethodCallMutator]MSP[] }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.ROR3Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; MST[rv.UOI1Mutator]MSP[] for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR3Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.ROR2Mutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.ROR5Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
static void checkNotNull ( final Iterable < ? > iterable ) { Objects . requireNonNull ( iterable , lr_7 ) ; } static void checkNotNull ( final Iterable < ? > ... iterables ) { Objects . requireNonNull ( iterables , lr_8 ) ; MST[ArgumentPropagationMutator]MSP[]
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[InlineConstantMutator]MSP[] return partition ( iterable , factory , predicates ) ; }
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[rv.CRCR3Mutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.ROR3Mutator]MSP[]
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[rv.ROR5Mutator]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
} } return partitions ; } public static < E > List < E > toList ( final Iterable < E > iterable ) { return IteratorUtils . toList ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; MST[rv.UOI4Mutator]MSP[] elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[ReturnValsMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR2Mutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[InlineConstantMutator]MSP[]
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; MST[ArgumentPropagationMutator]MSP[] for ( final Predicate < ? > predicate : predicates ) {
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI4Mutator]MSP[]
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 )
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ; MST[rv.UOI1Mutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[InlineConstantMutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR5Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR3Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR1Mutator]MSP[] } @Override
if ( iterable == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ABSMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
if ( iterable instanceof Collection < ? > ) { MST[rv.ROR4Mutator]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.ROR1Mutator]MSP[]
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; MST[rv.CRCR3Mutator]MSP[] break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.CRCR5Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.ABSMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; } @Override MST[ConstructorCallMutator]MSP[] public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; MST[PrimitiveReturnsMutator]MSP[] } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
@Override public Iterator < Object > iterator () { return IteratorUtils . emptyIterator () ; } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > emptyIterable () { return EMPTY_ITERABLE ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR1Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final Transformer < ? super E , String > transformer ) { Objects . requireNonNull ( transformer , lr_6 ) ; MST[ArgumentPropagationMutator]MSP[] return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , transformer ) ; } public static < E > String toString ( final Iterable < E > iterable ,
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ROR5Mutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.AOR3Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI2Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.UOI3Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.CRCR6Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[rv.ROR1Mutator]MSP[]
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI3Mutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; MST[InlineConstantMutator]MSP[] break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; MST[NonVoidMethodCallMutator]MSP[] }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[ConditionalsBoundaryMutator]MSP[]
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.ROR2Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ROR1Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR2Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR6Mutator]MSP[] } @Override
final Predicate < ? super O > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] @SuppressWarnings ( { lr_1 , lr_4 } ) final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ;
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 )
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; MST[ReturnValsMutator]MSP[] } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
return iterable == null ? IterableUtils . <E > emptyIterable () : iterable ; MST[rv.ROR5Mutator]MSP[] } public static < E > void forEach ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.CRCR5Mutator]MSP[]
if ( iterable instanceof Collection < ? > ) { MST[NegateConditionalsMutator]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.ROR3Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI4Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.ABSMutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.CRCR4Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[InlineConstantMutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.CRCR3Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI1Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[NonVoidMethodCallMutator]MSP[] }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[RemoveConditionalMutator_ORDER_IF]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI2Mutator]MSP[]
return IteratorUtils . matchesAll ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > boolean matchesAny ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; MST[ReturnValsMutator]MSP[] } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[rv.UOI2Mutator]MSP[] }
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { final R singlePartition = partitionFactory . create () ; MST[NonVoidMethodCallMutator]MSP[] CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[rv.ROR4Mutator]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR2Mutator]MSP[] } @Override
if ( iterable == null ) { MST[rv.ROR5Mutator]MSP[] final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.CRCR5Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
return iterable == null ? IterableUtils . <E > emptyIterable () : iterable ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > void forEach ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
return IteratorUtils . matchesAll ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static < E > boolean matchesAny ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 )
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR6Mutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; MST[NullReturnValsMutator]MSP[] } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
return ( ( Collection < ? > ) iterable ) . size () ; } return IteratorUtils . size ( emptyIteratorIfNull ( iterable ) ) ; MST[ReturnValsMutator]MSP[] } public static < O > List < List < O > > partition ( final Iterable < ? extends O > iterable ,
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.UOI4Mutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR1Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
Objects . requireNonNull ( predicate , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( predicates . length < 1 ) { final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR3Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI1Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR5Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[rv.UOI4Mutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI4Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; MST[ReturnValsMutator]MSP[] }
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[NonVoidMethodCallMutator]MSP[] }
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[InlineConstantMutator]MSP[] } @Override
return iterable == null ? IterableUtils . <E > emptyIterable () : iterable ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static < E > void forEach ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
} } return partitions ; MST[EmptyObjectReturnValsMutator]MSP[] } public static < E > List < E > toList ( final Iterable < E > iterable ) { return IteratorUtils . toList ( emptyIteratorIfNull ( iterable ) ) ; }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI2Mutator]MSP[]
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[IncrementsMutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[ReturnValsMutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[NegateConditionalsMutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.AOR1Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[rv.ROR3Mutator]MSP[]
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; MST[NonVoidMethodCallMutator]MSP[] } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
final Transformer < ? super E , String > transformer , final String delimiter , final String prefix , final String suffix ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , MST[ReturnValsMutator]MSP[] transformer , delimiter , prefix , suffix ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; MST[rv.ABSMutator]MSP[] for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ; MST[NonVoidMethodCallMutator]MSP[] return partition ( iterable , factory , predicates ) ; }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.UOI4Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
IteratorUtils . forEach ( emptyIteratorIfNull ( iterable ) , closure ) ; MST[VoidMethodCallMutator]MSP[] } public static < E > E forEachButLast ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
} } return partitions ; } public static < E > List < E > toList ( final Iterable < E > iterable ) { return IteratorUtils . toList ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.ABSMutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; MST[rv.UOI1Mutator]MSP[] elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[NonVoidMethodCallMutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
if ( predicates [ i ] . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[rv.CRCR6Mutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI4Mutator]MSP[]
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR2Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[InlineConstantMutator]MSP[]
return iterable == null ? IterableUtils . <E > emptyIterable () : iterable ; MST[NullReturnValsMutator]MSP[] } public static < E > void forEach ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override MST[NullReturnValsMutator]MSP[] public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
return IteratorUtils . forEachButLast ( emptyIteratorIfNull ( iterable ) , closure ) ; MST[ReturnValsMutator]MSP[] } public static < E > E find ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[NullReturnValsMutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
if ( iterable == null ) { MST[NegateConditionalsMutator]MSP[] final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ROR3Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; MST[rv.CRCR3Mutator]MSP[] for ( int i = 0 ; i < numberOfPredicates ; ++ i ) {
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR1Mutator]MSP[] } @SuppressWarnings ( lr_1 )
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ; MST[rv.UOI3Mutator]MSP[]
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR4Mutator]MSP[] } @Override
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[ReturnValsMutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[NullReturnValsMutator]MSP[] }
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI1Mutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.ROR5Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ABSMutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.ROR1Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.ROR4Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI2Mutator]MSP[]
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI1Mutator]MSP[]
return IteratorUtils . find ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NullReturnValsMutator]MSP[] } public static < E > int indexOf ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.ROR4Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; MST[NonVoidMethodCallMutator]MSP[] }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; MST[ReturnValsMutator]MSP[] }
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) {
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.ABSMutator]MSP[]
final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ; return partition ( iterable , factory , predicates ) ; MST[ReturnValsMutator]MSP[] }
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[rv.ROR1Mutator]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR2Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
return IteratorUtils . matchesAll ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > boolean matchesAny ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override MST[ReturnValsMutator]MSP[]
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR5Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; MST[rv.UOI2Mutator]MSP[] for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI4Mutator]MSP[]
return ( ( Collection < ? > ) iterable ) . isEmpty () ; } return IteratorUtils . isEmpty ( emptyIteratorIfNull ( iterable ) ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static < E > boolean contains ( final Iterable < E > iterable , final Object object ) {
public static < E > boolean contains ( final Iterable < ? extends E > iterable , final E object , final Equator < ? super E > equator ) { Objects . requireNonNull ( equator , lr_3 ) ; MST[ArgumentPropagationMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ROR2Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[MathMutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR1Mutator]MSP[] } @Override
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 )
partitions . add ( partitionFactory . create () ) ; MST[NonVoidMethodCallMutator]MSP[] } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) {
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR4Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR5Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR3Mutator]MSP[] } @Override
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.ROR2Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.CRCR1Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return IteratorUtils . indexOf ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[ReturnValsMutator]MSP[] } public static < E > boolean matchesAll ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ABSMutator]MSP[]
if ( iterable instanceof Collection < ? > ) { MST[rv.ROR5Mutator]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
return IteratorUtils . matchesAny ( emptyIteratorIfNull ( iterable ) , predicate ) ; } public static < E > long countMatches ( final Iterable < E > input , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.ROR5Mutator]MSP[]
} } return partitions ; } public static < E > List < E > toList ( final Iterable < E > iterable ) { return IteratorUtils . toList ( emptyIteratorIfNull ( iterable ) ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.CRCR6Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[NegateConditionalsMutator]MSP[]
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[rv.ROR2Mutator]MSP[]
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override MST[ConstructorCallMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR4Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI1Mutator]MSP[]
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR4Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ROR4Mutator]MSP[]
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[NegateConditionalsMutator]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; MST[EmptyObjectReturnValsMutator]MSP[] } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.UOI3Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.CRCR2Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { MST[NegateConditionalsMutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR6Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR1Mutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[rv.ROR4Mutator]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; MST[ConstructorCallMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[NonVoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR1Mutator]MSP[]
final Transformer < ? super E , String > transformer ) { Objects . requireNonNull ( transformer , lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , transformer ) ; } public static < E > String toString ( final Iterable < E > iterable ,
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.CRCR1Mutator]MSP[]
if ( iterable instanceof List < ? > ) { MST[NegateConditionalsMutator]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; MST[rv.ABSMutator]MSP[] }
final Predicate < ? super O > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] @SuppressWarnings ( { lr_1 , lr_4 } ) final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ;
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.UOI2Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[rv.UOI1Mutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR4Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable instanceof List < ? > ) { MST[rv.ROR4Mutator]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[NegateConditionalsMutator]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.CRCR6Mutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.CRCR3Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
IteratorUtils . forEach ( emptyIteratorIfNull ( iterable ) , closure ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > E forEachButLast ( final Iterable < E > iterable , final Closure < ? super E > closure ) {
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.AOD2Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
final Transformer < ? super E , String > transformer ) { Objects . requireNonNull ( transformer , lr_6 ) ; return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , transformer ) ; MST[EmptyObjectReturnValsMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI2Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
if ( iterable instanceof List < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
final Transformer < ? super E , String > transformer , final String delimiter , final String prefix , final String suffix ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , MST[NonVoidMethodCallMutator]MSP[] transformer , delimiter , prefix , suffix ) ; }
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI1Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; MST[BooleanFalseReturnValsMutator]MSP[] }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[NonVoidMethodCallMutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; MST[ArgumentPropagationMutator]MSP[] } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[InlineConstantMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return ( ( Collection < ? > ) iterable ) . isEmpty () ; } return IteratorUtils . isEmpty ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > boolean contains ( final Iterable < E > iterable , final Object object ) {
return IteratorUtils . forEachButLast ( emptyIteratorIfNull ( iterable ) , closure ) ; MST[NullReturnValsMutator]MSP[] } public static < E > E find ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR6Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
final Transformer < ? super E , String > transformer ) { Objects . requireNonNull ( transformer , lr_6 ) ; return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , transformer ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
return ( ( Collection < ? > ) iterable ) . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[] } return IteratorUtils . isEmpty ( emptyIteratorIfNull ( iterable ) ) ; } public static < E > boolean contains ( final Iterable < E > iterable , final Object object ) {
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) {
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.ROR5Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[rv.UOI3Mutator]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[RemoveConditionalMutator_ORDER_IF]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ; MST[rv.UOI4Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override MST[ReturnValsMutator]MSP[] public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR5Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
if ( iterable instanceof List < ? > ) { MST[rv.ROR3Mutator]MSP[] return ( ( List < T > ) iterable ) . get ( index ) ; } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ROR3Mutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; MST[rv.CRCR6Mutator]MSP[] break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[NonVoidMethodCallMutator]MSP[] }
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.ROR4Mutator]MSP[]
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[InlineConstantMutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[InlineConstantMutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override MST[NullReturnValsMutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[] elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override MST[ReturnValsMutator]MSP[]
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) { MST[rv.ROR4Mutator]MSP[]
return ( ( Collection < ? > ) iterable ) . isEmpty () ; MST[ReturnValsMutator]MSP[] } return IteratorUtils . isEmpty ( emptyIteratorIfNull ( iterable ) ) ; } public static < E > boolean contains ( final Iterable < E > iterable , final Object object ) {
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[ReturnValsMutator]MSP[] }
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI2Mutator]MSP[]
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.ABSMutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.UOI4Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR4Mutator]MSP[] } @Override
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[rv.CRCR4Mutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override MST[NullReturnValsMutator]MSP[]
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 )
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.CRCR6Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
return ( ( Collection < ? > ) iterable ) . isEmpty () ; } return IteratorUtils . isEmpty ( emptyIteratorIfNull ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > boolean contains ( final Iterable < E > iterable , final Object object ) {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; } @Override MST[NullReturnValsMutator]MSP[] public Iterator < E > iterator () {
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; return partition ( iterable , factory , predicates ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.CRCR3Mutator]MSP[]
return ( ( Collection < ? > ) iterable ) . size () ; MST[PrimitiveReturnsMutator]MSP[] } return IteratorUtils . size ( emptyIteratorIfNull ( iterable ) ) ; } public static < O > List < List < O > > partition ( final Iterable < ? extends O > iterable ,
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR2Mutator]MSP[]
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
partitions . add ( partitionFactory . create () ) ; MST[NonVoidMethodCallMutator]MSP[] } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) {
if ( iterable instanceof List < ? > ) { return ( ( List < T > ) iterable ) . get ( index ) ; MST[rv.UOI3Mutator]MSP[] } return IteratorUtils . get ( emptyIteratorIfNull ( iterable ) , index ) ; }
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[NegateConditionalsMutator]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
return IteratorUtils . indexOf ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[PrimitiveReturnsMutator]MSP[] } public static < E > boolean matchesAll ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; } @Override MST[ConstructorCallMutator]MSP[] public Iterator < E > iterator () {
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[] elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[ConstructorCallMutator]MSP[]
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override MST[NullReturnValsMutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[NegateConditionalsMutator]MSP[]
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI1Mutator]MSP[]
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; } return iterable . iterator () ; } @Override MST[ConstructorCallMutator]MSP[] public Iterator < E > iterator () {
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.ROR2Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[ReturnValsMutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR1Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; MST[NonVoidMethodCallMutator]MSP[] return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.UOI3Mutator]MSP[]
if ( predicates [ i ] . evaluate ( element ) ) { MST[rv.ROR3Mutator]MSP[] partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; MST[ArgumentPropagationMutator]MSP[] } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; MST[rv.UOI1Mutator]MSP[] final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
if ( iterable instanceof UnmodifiableIterable < ? > ) { MST[rv.ROR3Mutator]MSP[] return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR5Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR3Mutator]MSP[] } @Override
final Predicate < ? super O > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ; @SuppressWarnings ( { lr_1 , lr_4 } ) final Factory < List < O > > factory = FactoryUtils . instantiateFactory ( ( Class ) ArrayList . class ) ; MST[NonVoidMethodCallMutator]MSP[]
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[rv.ROR5Mutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR1Mutator]MSP[] } @Override
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[rv.ROR1Mutator]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; MST[rv.CRCR6Mutator]MSP[] for ( int i = 0 ; i < numberOfPredicates ; ++ i ) {
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; MST[rv.UOI2Mutator]MSP[] elementAssigned = true ; break; } } if ( ! elementAssigned ) { partitions . get ( numberOfPredicates ) . add ( element ) ;
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ; MST[rv.ABSMutator]MSP[]
final Transformer < ? super E , String > transformer ) { Objects . requireNonNull ( transformer , lr_6 ) ; return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , transformer ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > String toString ( final Iterable < E > iterable ,
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[rv.CRCR5Mutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
return IteratorUtils . indexOf ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > boolean matchesAll ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
final Transformer < ? super E , String > transformer , final String delimiter , final String prefix , final String suffix ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , MST[ArgumentPropagationMutator]MSP[] transformer , delimiter , prefix , suffix ) ; }
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR1Mutator]MSP[] } @SuppressWarnings ( lr_1 )
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } if ( iterable instanceof Bag < ? > ) { return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 )
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ROR4Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override MST[ConstructorCallMutator]MSP[]
Objects . requireNonNull ( predicate , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] } if ( predicates . length < 1 ) { final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.CRCR6Mutator]MSP[]
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override MST[ConstructorCallMutator]MSP[]
} } return partitions ; MST[ReturnValsMutator]MSP[] } public static < E > List < E > toList ( final Iterable < E > iterable ) { return IteratorUtils . toList ( emptyIteratorIfNull ( iterable ) ) ; }
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; MST[ReturnValsMutator]MSP[] } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override MST[ConstructorCallMutator]MSP[] public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
return IteratorUtils . matchesAny ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[ReturnValsMutator]MSP[] } public static < E > long countMatches ( final Iterable < E > input , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ;
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override
if ( iterable instanceof Collection < ? > ) { MST[rv.ROR1Mutator]MSP[] return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; }
if ( iterable == null ) { final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) { MST[rv.UOI1Mutator]MSP[]
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; for ( int i = 0 ; i < numberOfPartitions ; ++ i ) { MST[rv.UOI1Mutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[ReturnValsMutator]MSP[] } @Override
return IteratorUtils . indexOf ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > boolean matchesAll ( final Iterable < E > iterable , final Predicate < ? super E > predicate ) {
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; }
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; return partition ( iterable , factory , predicates ) ; MST[NonVoidMethodCallMutator]MSP[] }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR1Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
Objects . requireNonNull ( predicate , lr_2 ) ; } if ( predicates . length < 1 ) { final R singlePartition = partitionFactory . create () ; CollectionUtils . addAll ( singlePartition , iterable ) ; return Collections . singletonList ( singlePartition ) ; MST[NonVoidMethodCallMutator]MSP[] }
return chainedIterable ( new Iterable [] { a , b , c } ) ; MST[rv.CRCR4Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ,
for ( final Iterable < ? > iterable : iterables ) { MST[rv.UOI1Mutator]MSP[] checkNotNull ( iterable ) ; } } private static < E > Iterator < E > emptyIteratorIfNull ( final Iterable < E > iterable ) {
return IteratorUtils . matchesAny ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static < E > long countMatches ( final Iterable < E > input , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_2 ) ;
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override MST[ReturnValsMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override MST[ConstructorCallMutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR2Mutator]MSP[] } @Override
if ( iterable instanceof Collection < ? > ) { return ( ( Collection < E > ) iterable ) . contains ( object ) ; } return IteratorUtils . contains ( emptyIteratorIfNull ( iterable ) , object ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
return iterable != null ? iterable . iterator () : IteratorUtils . <E > emptyIterator () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR5Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
@SuppressWarnings ( lr_1 ) final Predicate < ? super O > [] predicates = new Predicate [] { predicate } ; MST[rv.CRCR6Mutator]MSP[] return partition ( iterable , factory , predicates ) ; }
return ( ( Set < E > ) iterable ) . contains ( obj ) ? 1 : 0 ; } if ( iterable instanceof Bag < ? > ) { MST[rv.ROR5Mutator]MSP[] return ( ( Bag < E > ) iterable ) . getCount ( obj ) ; }
public static < T > T first ( final Iterable < T > iterable ) { return get ( iterable , 0 ) ; MST[NullReturnValsMutator]MSP[] } public static int size ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) {
final Transformer < ? super E , String > transformer , final String delimiter , final String prefix , final String suffix ) { return IteratorUtils . toString ( emptyIteratorIfNull ( iterable ) , MST[EmptyObjectReturnValsMutator]MSP[] transformer , delimiter , prefix , suffix ) ; }
public static < E > Iterable < E > chainedIterable ( final Iterable < ? extends E > a , final Iterable < ? extends E > b ) { return chainedIterable ( new Iterable [] { a , b } ) ; MST[NonVoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 )
final int numberOfPredicates = predicates . length ; final int numberOfPartitions = numberOfPredicates + 1 ; final List < R > partitions = new ArrayList <> ( numberOfPartitions ) ; MST[rv.UOI3Mutator]MSP[] for ( int i = 0 ; i < numberOfPartitions ; ++ i ) {
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) {
return matchesAny ( iterable , EqualPredicate . equalPredicate ( object , equator ) ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static < E , T extends E > int frequency ( final Iterable < E > iterable , final T obj ) { if ( iterable instanceof Set < ? > ) {
static void checkNotNull ( final Iterable < ? > iterable ) { Objects . requireNonNull ( iterable , lr_7 ) ; MST[ArgumentPropagationMutator]MSP[] } static void checkNotNull ( final Iterable < ? > ... iterables ) { Objects . requireNonNull ( iterables , lr_8 ) ;
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[NullReturnValsMutator]MSP[] } @Override
if ( predicates [ i ] . evaluate ( element ) ) { partitions . get ( i ) . add ( element ) ; elementAssigned = true ; break; } } if ( ! elementAssigned ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] partitions . get ( numberOfPredicates ) . add ( element ) ;
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[PrimitiveReturnsMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.CRCR1Mutator]MSP[]
return size ( filteredIterable ( emptyIfNull ( input ) , predicate ) ) ; } public static boolean isEmpty ( final Iterable < ? > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR5Mutator]MSP[]
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; for ( int i = 0 ; i < numberOfPredicates ; ++ i ) { MST[ConditionalsBoundaryMutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR6Mutator]MSP[] } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; MST[rv.CRCR5Mutator]MSP[] } @Override
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ; MST[rv.UOI4Mutator]MSP[]
return ( ( Collection < ? > ) iterable ) . size () ; MST[NonVoidMethodCallMutator]MSP[] } return IteratorUtils . size ( emptyIteratorIfNull ( iterable ) ) ; } public static < O > List < List < O > > partition ( final Iterable < ? extends O > iterable ,
partitions . add ( partitionFactory . create () ) ; } for ( final O element : iterable ) { boolean elementAssigned = false ; MST[rv.CRCR1Mutator]MSP[] for ( int i = 0 ; i < numberOfPredicates ; ++ i ) {
return size ( filteredIterable ( emptyIfNull ( iterable ) , EqualPredicate . <E > equalPredicate ( obj ) ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < T > T get ( final Iterable < T > iterable , final int index ) { CollectionUtils . checkIndexBounds ( index ) ;
if ( iterable == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Iterable < O > empty = emptyIterable () ; return partition ( empty , partitionFactory , predicates ) ; } Objects . requireNonNull ( predicates , lr_5 ) ; for ( final Predicate < ? > predicate : predicates ) {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; MST[ReturnValsMutator]MSP[] } return iterable . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; } return iterable . iterator () ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { MST[NegateConditionalsMutator]MSP[] return null ; } return iterable . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { MST[rv.ROR2Mutator]MSP[] return null ; } return iterable . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; } return iterable . iterator () ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () {
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { MST[rv.ROR1Mutator]MSP[] return null ; } return iterable . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { MST[rv.ROR3Mutator]MSP[] return null ; } return iterable . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { MST[rv.ROR5Mutator]MSP[] return null ; } return iterable . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return null ; } return iterable . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; } return iterable . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () {
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
iterators [ i + 1 ] = others [ i ] . iterator () ; } return IteratorUtils . zippingIterator ( iterators ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[InlineConstantMutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; } return IteratorUtils . zippingIterator ( iterators ) ; MST[ReturnValsMutator]MSP[] } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.CRCR4Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.CRCR5Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; MST[rv.CRCR1Mutator]MSP[] for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[InlineConstantMutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.CRCR3Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.CRCR6Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.UOI1Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.ROR4Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.CRCR2Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.ROR2Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.CRCR5Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.AOD2Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.UOI3Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.CRCR3Mutator]MSP[]
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.ABSMutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.UOI4Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.UOI2Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.AOR1Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.AOR3Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.UOI4Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[ConditionalsBoundaryMutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.UOI2Mutator]MSP[]
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.CRCR2Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.CRCR6Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.CRCR4Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[NegateConditionalsMutator]MSP[]
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.AOD1Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.AOR2Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
public Iterator < E > iterator () { return IteratorUtils . zippingIterator ( a . iterator () , b . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () { @SuppressWarnings ( lr_1 ) final
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.AOR3Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.AOR4Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.AOR1Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; } return IteratorUtils . zippingIterator ( iterators ) ; MST[NullReturnValsMutator]MSP[] } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[MathMutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.CRCR1Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; MST[rv.CRCR6Mutator]MSP[] for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; MST[InlineConstantMutator]MSP[] for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.ROR3Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.AOD1Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; MST[rv.CRCR3Mutator]MSP[] for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.CRCR6Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; MST[rv.CRCR5Mutator]MSP[] for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; MST[NonVoidMethodCallMutator]MSP[] for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.ABSMutator]MSP[]
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.UOI4Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.AOR4Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.UOI3Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[InlineConstantMutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.ROR1Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.ROR5Mutator]MSP[]
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.ABSMutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.UOI1Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.UOI3Mutator]MSP[]
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[MathMutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; MST[rv.AOR2Mutator]MSP[] iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) {
Iterator < ? extends E > [] iterators = new Iterator [ others . length + 1 ] ; iterators [ 0 ] = first . iterator () ; for ( int i = 0 ; i < others . length ; i ++ ) { MST[rv.UOI1Mutator]MSP[]
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.CRCR3Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.CRCR5Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
iterators [ i + 1 ] = others [ i ] . iterator () ; MST[rv.AOD2Mutator]MSP[] } return IteratorUtils . zippingIterator ( iterators ) ; } public static < E > Iterable < E > emptyIfNull ( final Iterable < E > iterable ) {
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; MST[ArgumentPropagationMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; MST[NullReturnValsMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; MST[ReturnValsMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
public Iterator < E > iterator () { return new UniqueFilterIterator <> ( iterable . iterator () ) ; MST[NullReturnValsMutator]MSP[] } public static < E > Iterable < E > unmodifiableIterable ( final Iterable < E > iterable ) { checkNotNull ( iterable ) ;
public Iterator < E > iterator () { return new UniqueFilterIterator <> ( iterable . iterator () ) ; MST[ReturnValsMutator]MSP[] } public static < E > Iterable < E > unmodifiableIterable ( final Iterable < E > iterable ) { checkNotNull ( iterable ) ;
public Iterator < E > iterator () { return new UniqueFilterIterator <> ( iterable . iterator () ) ; MST[ConstructorCallMutator]MSP[] } public static < E > Iterable < E > unmodifiableIterable ( final Iterable < E > iterable ) { checkNotNull ( iterable ) ;
public Iterator < E > iterator () { return new UniqueFilterIterator <> ( iterable . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > Iterable < E > unmodifiableIterable ( final Iterable < E > iterable ) { checkNotNull ( iterable ) ;
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[rv.UOI3Mutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[rv.UOI2Mutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[rv.UOI1Mutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[rv.UOI4Mutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI1Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[rv.ABSMutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI4Mutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.ABSMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI2Mutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . skippingIterator ( iterable . iterator () , elementsToSkip ) ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < O > iterator () { return IteratorUtils . transformedIterator ( iterable . iterator () , transformer ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override MST[rv.UOI3Mutator]MSP[]
final List < E > list = ( iterable instanceof List < ? > ) ? MST[NegateConditionalsMutator]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? MST[rv.ROR4Mutator]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; MST[ReturnValsMutator]MSP[] } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? MST[rv.ROR3Mutator]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? MST[rv.ROR5Mutator]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; MST[NullReturnValsMutator]MSP[] } @Override
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( IterableUtils . isEmpty ( iterable ) ) { return null ; } return iterable . iterator () ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () {
final List < E > list = ( iterable instanceof List < ? > ) ? MST[rv.ROR1Mutator]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? MST[rv.ROR2Mutator]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; MST[ConstructorCallMutator]MSP[] } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] return new ReverseListIterator <> ( list ) ; } @Override
final List < E > list = ( iterable instanceof List < ? > ) ? ( List < E > ) iterable : IteratorUtils . toList ( iterable . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] return new ReverseListIterator <> ( list ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override MST[NullReturnValsMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override MST[ReturnValsMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override MST[ConstructorCallMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[rv.UOI3Mutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[rv.UOI4Mutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[rv.UOI1Mutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[rv.UOI2Mutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[rv.ABSMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.ABSMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI4Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[NullReturnValsMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI1Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI3Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override MST[rv.UOI2Mutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; MST[ReturnValsMutator]MSP[] } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
public Iterator < E > iterator () { return IteratorUtils . filteredIterator ( emptyIteratorIfNull ( iterable ) , predicate ) ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . boundedIterator ( iterable . iterator () , maxSize ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; MST[NullReturnValsMutator]MSP[] } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; MST[ReturnValsMutator]MSP[] } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; MST[ArgumentPropagationMutator]MSP[] } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; } @Override MST[experimental.MemberVariableMutator]MSP[] public Iterator < E > iterator () {
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
return IteratorUtils . collatedIterator ( null , a . iterator () , b . iterator () ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public Iterator < E > iterator () { return IteratorUtils . collatedIterator ( comparator , a . iterator () , b . iterator () ) ; } @Override
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; } @Override MST[NullReturnValsMutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; } @Override MST[ConstructorCallMutator]MSP[]
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; } @Override MST[ReturnValsMutator]MSP[]
@Override public Iterator < Object > iterator () { return IteratorUtils . emptyIterator () ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > emptyIterable () { return EMPTY_ITERABLE ; } @SuppressWarnings ( lr_1 )
@Override public Iterator < Object > iterator () { return IteratorUtils . emptyIterator () ; MST[NonVoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > emptyIterable () { return EMPTY_ITERABLE ; } @SuppressWarnings ( lr_1 )
@Override public Iterator < Object > iterator () { return IteratorUtils . emptyIterator () ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > Iterable < E > emptyIterable () { return EMPTY_ITERABLE ; } @SuppressWarnings ( lr_1 )
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.AOR3Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.UOI4Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.AOR4Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.AOR2Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.AOR1Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.UOI3Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.UOI2Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.UOI1Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.AOD1Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.AOD2Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[MathMutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.ROR5Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; MST[ReturnValsMutator]MSP[] } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.CRCR3Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.ABSMutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[InlineConstantMutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[NegateConditionalsMutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.CRCR6Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[ConditionalsBoundaryMutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.CRCR5Mutator]MSP[] } @Override public Iterator < E > iterator () {
final Iterable < ? extends E > c , final Iterable < ? extends E > d ) { return chainedIterable ( new Iterable [] { a , b , c , d } ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.CRCR2Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.CRCR4Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.ABSMutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.ROR1Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.ROR3Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.ROR2Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[rv.ROR4Mutator]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.UOI4Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] return null ; } return iterables [ count - 1 ] . iterator () ; } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.UOI3Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.UOI2Mutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () {
protected Iterator < ? extends E > nextIterator ( final int count ) { if ( count > iterables . length ) { return null ; } return iterables [ count - 1 ] . iterator () ; MST[rv.UOI1Mutator]MSP[] } @Override public Iterator < E > iterator () {
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; MST[ArgumentPropagationMutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; MST[NullReturnValsMutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; MST[ReturnValsMutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
if ( iterable instanceof UnmodifiableIterable < ? > ) { return iterable ; } return new UnmodifiableIterable <> ( iterable ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( unmodifiable . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
