@Override public int size () { return 1 ; MST[rv.CRCR2Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[InlineConstantMutator]MSP[] } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[NullReturnValsMutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
@Override public int size () { return 1 ; MST[PrimitiveReturnsMutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; MST[ReturnValsMutator]MSP[] } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public void clear () { throw new UnsupportedOperationException () ;
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void clear () { throw new UnsupportedOperationException () ;
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[rv.CRCR5Mutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[rv.CRCR3Mutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
@Override public int size () { return 1 ; MST[ReturnValsMutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public void clear () { throw new UnsupportedOperationException () ;
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[InlineConstantMutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[ConstructorCallMutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
@Override public int size () { return 1 ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[ReturnValsMutator]MSP[] } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[]
} @Override public Iterator < V > iterator () { return new SingletonIterator <> ( parent . getValue () , false ) ; MST[ReturnValsMutator]MSP[] } @Override @SuppressWarnings ( lr_7 ) public SingletonMap < K , V > clone () { try {
@Override public int size () { return 1 ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; MST[rv.CRCR4Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; MST[InlineConstantMutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR1Mutator]MSP[] } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
@Override public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean contains ( final Object object ) { return parent . containsValue ( object ) ; } @Override public void clear () { throw new UnsupportedOperationException () ;
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.ROR2Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.ROR3Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; MST[InlineConstantMutator]MSP[] } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; MST[ReturnValsMutator]MSP[] } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.ROR4Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.ROR1Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; MST[ReturnValsMutator]MSP[] } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; MST[ConstructorCallMutator]MSP[] } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.CRCR2Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.CRCR3Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.CRCR4Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.CRCR5Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.CRCR6Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
public boolean hasPrevious () { return hasNext == false ; MST[InlineConstantMutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override MST[experimental.MemberVariableMutator]MSP[]
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
public boolean hasPrevious () { return hasNext == false ; MST[rv.ROR5Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; MST[ConstructorCallMutator]MSP[] } return parent . getKey () ; } @Override public V getValue () {
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
public boolean hasPrevious () { return hasNext == false ; MST[rv.ROR3Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; MST[rv.ROR1Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public V getValue () {
public boolean hasPrevious () { return hasNext == false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[rv.ROR5Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[ConstructorCallMutator]MSP[] }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[experimental.NakedReceiverMutator]MSP[] }
public boolean hasPrevious () { return hasNext == false ; MST[rv.CRCR3Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[NegateConditionalsMutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[rv.ROR2Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ; MST[ConstructorCallMutator]MSP[]
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override MST[rv.CRCR1Mutator]MSP[]
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override MST[rv.CRCR5Mutator]MSP[]
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[rv.ROR3Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[ReturnValsMutator]MSP[] }
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; MST[ReturnValsMutator]MSP[] } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; MST[rv.CRCR5Mutator]MSP[] } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override MST[rv.CRCR6Mutator]MSP[]
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
public boolean hasPrevious () { return hasNext == false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[NegateConditionalsMutator]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
if ( canGetSet == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[experimental.NakedReceiverMutator]MSP[] }
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public V getValue () {
public boolean hasPrevious () { return hasNext == false ; MST[rv.ROR2Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[experimental.NakedReceiverMutator]MSP[] }
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; MST[ConstructorCallMutator]MSP[] } hasNext = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[NegateConditionalsMutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
public void remove () { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public K getKey () { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[rv.ROR1Mutator]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[rv.ROR2Mutator]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
public boolean hasPrevious () { return hasNext == false ; } @Override public K previous () { if ( hasNext == true ) { MST[InlineConstantMutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[rv.ROR3Mutator]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[rv.ROR4Mutator]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[rv.ROR5Mutator]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; MST[rv.CRCR4Mutator]MSP[] return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; MST[rv.CRCR5Mutator]MSP[] return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; MST[rv.CRCR2Mutator]MSP[] return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; MST[rv.CRCR3Mutator]MSP[] return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; MST[rv.CRCR6Mutator]MSP[] return parent . getKey () ; } @Override
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V getValue () {
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override MST[InlineConstantMutator]MSP[]
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; MST[rv.CRCR4Mutator]MSP[] } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; MST[rv.CRCR2Mutator]MSP[] } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; MST[experimental.MemberVariableMutator]MSP[] } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; MST[rv.CRCR6Mutator]MSP[] } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; MST[NullReturnValsMutator]MSP[] } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[experimental.NakedReceiverMutator]MSP[] }
if ( canGetSet == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
if ( canGetSet == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
if ( canGetSet == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
public boolean hasPrevious () { return hasNext == false ; MST[rv.CRCR6Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; MST[rv.CRCR5Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
public boolean hasPrevious () { return hasNext == false ; MST[rv.CRCR1Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[NonVoidMethodCallMutator]MSP[] }
if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[EmptyObjectReturnValsMutator]MSP[] }
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; MST[InlineConstantMutator]MSP[] return parent . getKey () ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override MST[rv.CRCR3Mutator]MSP[]
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[rv.ROR4Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[rv.ROR5Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { MST[rv.ROR1Mutator]MSP[] throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
public boolean hasPrevious () { return hasNext == false ; MST[NegateConditionalsMutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; MST[rv.CRCR3Mutator]MSP[] } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; }
public boolean hasNext () { return hasNext ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; return parent . getKey () ; } @Override
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
} return parent . setValue ( value ) ; } @Override public void reset () { hasNext = true ; } @Override public String toString () { if ( hasNext ) { return lr_3 ; } return lr_4 + getKey () + lr_5 + getValue () + lr_6 ; MST[experimental.NakedReceiverMutator]MSP[] }
public boolean hasPrevious () { return hasNext == false ; MST[rv.ROR4Mutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
public boolean hasNext () { return hasNext ; } @Override public K next () { if ( hasNext == false ) { throw new NoSuchElementException ( AbstractHashedMap . NO_NEXT_ENTRY ) ; } hasNext = false ; canGetSet = true ; MST[experimental.MemberVariableMutator]MSP[] return parent . getKey () ; } @Override
public void remove () { throw new UnsupportedOperationException () ; } @Override public K getKey () { if ( canGetSet == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETKEY_INVALID ) ; } return parent . getKey () ; } @Override public V getValue () {
public boolean hasPrevious () { return hasNext == false ; MST[ReturnValsMutator]MSP[] } @Override public K previous () { if ( hasNext == true ) { throw new NoSuchElementException ( AbstractHashedMap . NO_PREVIOUS_ENTRY ) ; } hasNext = true ; return parent . getKey () ; } @Override
if ( canGetSet == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( AbstractHashedMap . GETVALUE_INVALID ) ; } return parent . getValue () ; } @Override public V setValue ( final V value ) { if ( canGetSet == false ) { throw new IllegalStateException ( AbstractHashedMap . SETVALUE_INVALID ) ;
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[InlineConstantMutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; MST[NullReturnValsMutator]MSP[] } throw new IllegalArgumentException ( lr_1 ) ; } @Override
public Collection < V > values () { return new SingletonValues <> ( this ) ; MST[ConstructorCallMutator]MSP[] } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; } @Override public K firstKey () { return getKey () ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) MST[rv.CRCR5Mutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
. append ( getKey () == this ? lr_8 : getKey () ) MST[rv.CRCR3Mutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[ReturnValsMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
final Map . Entry < ? extends K , ? extends V > entry = map . entrySet () . iterator () . next () ; put ( entry . getKey () , entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] return; default: throw new IllegalArgumentException ( lr_2 ) ; } }
return ( SingletonMap < K , V > ) super . clone () ; MST[ReturnValsMutator]MSP[] } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; }
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) MST[experimental.NakedReceiverMutator]MSP[] . toString () ; }
public K lastKey () { return getKey () ; MST[ReturnValsMutator]MSP[] } @Override public K nextKey ( final K key ) { return null ; } @Override public K previousKey ( final K key ) { return null ; } protected boolean isEqualKey ( final Object key ) {
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[PrimitiveReturnsMutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR3Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int hashCode () {
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR5Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { MST[NegateConditionalsMutator]MSP[] return true ; }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR6Mutator]MSP[] . append ( '{' )
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR1Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR4Mutator]MSP[] . append ( '{' )
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; }
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; return Collections . singleton ( entry ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) MST[rv.CRCR1Mutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
public boolean isFull () { return true ; MST[rv.CRCR5Mutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
return isEqualValue ( value ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[rv.CRCR6Mutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
public boolean isFull () { return true ; MST[rv.CRCR3Mutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) MST[NonVoidMethodCallMutator]MSP[] . toString () ; }
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean containsValue ( final Object value ) {
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[NegateConditionalsMutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[NegateConditionalsMutator]MSP[] } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[InlineConstantMutator]MSP[] } @Override
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.ROR1Mutator]MSP[] return false ; }
. append ( getKey () == this ? lr_8 : getKey () ) MST[NonVoidMethodCallMutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
if ( obj instanceof Map == false ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.ROR5Mutator]MSP[] return false ; }
if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR1Mutator]MSP[] } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR2Mutator]MSP[] . append ( '{' )
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override
@Override public K getKey () { return key ; } @Override public V getValue () { return value ; MST[NullReturnValsMutator]MSP[] } public V setValue ( final V value ) { final V old = this . value ; this . value = value ; return old ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[NonVoidMethodCallMutator]MSP[] . append ( '}' ) . toString () ; }
if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR5Mutator]MSP[] } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[ReturnValsMutator]MSP[] }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.CRCR2Mutator]MSP[] return false ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[rv.ROR4Mutator]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[rv.CRCR6Mutator]MSP[] . append ( '}' ) . toString () ; }
if ( obj instanceof Map == false ) { MST[rv.ROR1Mutator]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
if ( obj instanceof Map == false ) { MST[rv.ROR5Mutator]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.CRCR6Mutator]MSP[] return false ; }
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; MST[NonVoidMethodCallMutator]MSP[] } throw new IllegalArgumentException ( lr_1 ) ; } @Override
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; return Collections . singleton ( entry ) ; } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; MST[ReturnValsMutator]MSP[] } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
public Collection < V > values () { return new SingletonValues <> ( this ) ; MST[ReturnValsMutator]MSP[] } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; } @Override public K firstKey () { return getKey () ; } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int hashCode () {
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR4Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.CRCR3Mutator]MSP[] } @Override public int hashCode () {
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; MST[ReturnValsMutator]MSP[] } return null ; } @Override
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; MST[ConstructorCallMutator]MSP[] return Collections . singleton ( entry ) ; } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR1Mutator]MSP[] } @Override public int hashCode () {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR5Mutator]MSP[] } @Override public int hashCode () {
public boolean isFull () { return true ; MST[ReturnValsMutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[InlineConstantMutator]MSP[] . append ( '{' )
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[InlineConstantMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
public K lastKey () { return getKey () ; } @Override public K nextKey ( final K key ) { return null ; MST[ReturnValsMutator]MSP[] } @Override public K previousKey ( final K key ) { return null ; } protected boolean isEqualKey ( final Object key ) {
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[NonVoidMethodCallMutator]MSP[] . append ( '}' ) . toString () ; }
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR2Mutator]MSP[] } @Override public int hashCode () {
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
. append ( getKey () == this ? lr_8 : getKey () ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
return ( SingletonMap < K , V > ) super . clone () ; MST[experimental.NakedReceiverMutator]MSP[] } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; }
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[rv.CRCR3Mutator]MSP[] }
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[InlineConstantMutator]MSP[] }
@Override public K getKey () { return key ; } @Override public V getValue () { return value ; MST[ReturnValsMutator]MSP[] } public V setValue ( final V value ) { final V old = this . value ; this . value = value ; return old ; } @Override
return isEqualValue ( value ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
public Collection < V > values () { return new SingletonValues <> ( this ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; } @Override public K firstKey () { return getKey () ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[InlineConstantMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
@Override public K getKey () { return key ; MST[NullReturnValsMutator]MSP[] } @Override public V getValue () { return value ; } public V setValue ( final V value ) { final V old = this . value ; this . value = value ; return old ; } @Override
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[NegateConditionalsMutator]MSP[] return false ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
final Map . Entry < ? extends K , ? extends V > entry = map . entrySet () . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[] put ( entry . getKey () , entry . getValue () ) ; return; default: throw new IllegalArgumentException ( lr_2 ) ; } }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' ) MST[NonVoidMethodCallMutator]MSP[]
public Collection < V > values () { return new SingletonValues <> ( this ) ; } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; MST[ReturnValsMutator]MSP[] } @Override public K firstKey () { return getKey () ; } @Override
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[rv.ROR4Mutator]MSP[] return value ; } return null ; } @Override
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; return Collections . singleton ( entry ) ; MST[ReturnValsMutator]MSP[] } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; } @Override
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[rv.ROR2Mutator]MSP[] return value ; } return null ; } @Override
if ( obj instanceof Map == false ) { MST[NegateConditionalsMutator]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[rv.ROR1Mutator]MSP[] return value ; } return null ; } @Override
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) {
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) {
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[rv.CRCR2Mutator]MSP[] . append ( '}' ) . toString () ; }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[NonVoidMethodCallMutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
public Collection < V > values () { return new SingletonValues <> ( this ) ; } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; MST[NullReturnValsMutator]MSP[] } @Override public K firstKey () { return getKey () ; } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int hashCode () {
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[rv.CRCR5Mutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[NonVoidMethodCallMutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR4Mutator]MSP[] } @Override public int hashCode () {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR2Mutator]MSP[] } @Override public int hashCode () {
. append ( getKey () == this ? lr_8 : getKey () ) MST[NegateConditionalsMutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[NegateConditionalsMutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[] return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; } @Override public int hashCode () {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public int hashCode () {
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[rv.CRCR4Mutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[rv.CRCR6Mutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
public int size () { return 1 ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[NegateConditionalsMutator]MSP[] } @Override public int hashCode () {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[ReturnValsMutator]MSP[] } @Override public int hashCode () {
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override
. append ( getKey () == this ? lr_8 : getKey () ) MST[InlineConstantMutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
public int size () { return 1 ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
. append ( getKey () == this ? lr_8 : getKey () ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.ROR4Mutator]MSP[] return false ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[rv.ROR5Mutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR2Mutator]MSP[] . append ( '{' )
@Override public V remove ( final Object key ) { throw new UnsupportedOperationException () ; } @Override public void clear () { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public Set < Map . Entry < K , V > > entrySet () {
final Map . Entry < ? extends K , ? extends V > entry = map . entrySet () . iterator () . next () ; put ( entry . getKey () , entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] return; default: throw new IllegalArgumentException ( lr_2 ) ; } }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[InlineConstantMutator]MSP[] return false ; }
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[rv.ROR2Mutator]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.CRCR3Mutator]MSP[] return false ; }
if ( obj instanceof Map == false ) { MST[rv.ROR4Mutator]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[NegateConditionalsMutator]MSP[] return value ; } return null ; } @Override
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[NonVoidMethodCallMutator]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[rv.CRCR4Mutator]MSP[] . append ( '}' ) . toString () ; }
@Override public K getKey () { return key ; } @Override public V getValue () { return value ; } public V setValue ( final V value ) { final V old = this . value ; this . value = value ; return old ; MST[NullReturnValsMutator]MSP[] } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[NegateConditionalsMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
public int size () { return 1 ; MST[ReturnValsMutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) MST[experimental.NakedReceiverMutator]MSP[] . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[NonVoidMethodCallMutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[rv.ROR5Mutator]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR6Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return ( SingletonMap < K , V > ) super . clone () ; MST[NonVoidMethodCallMutator]MSP[] } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[rv.CRCR2Mutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[rv.CRCR1Mutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR5Mutator]MSP[] . append ( '{' )
public void putAll ( final Map < ? extends K , ? extends V > map ) { switch ( map . size () ) { MST[experimental.SwitchMutator]MSP[] case 0 : return; case 1 :
@Override public V remove ( final Object key ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public void clear () { throw new UnsupportedOperationException () ; } @Override public Set < Map . Entry < K , V > > entrySet () {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[] return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; } @Override public int hashCode () {
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[BooleanTrueReturnValsMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[rv.ROR5Mutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
public boolean isFull () { return true ; MST[rv.CRCR6Mutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; MST[NonVoidMethodCallMutator]MSP[] }
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[NonVoidMethodCallMutator]MSP[] return value ; } return null ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) MST[rv.CRCR6Mutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
@Override public K getKey () { return key ; } @Override public V getValue () { return value ; } public V setValue ( final V value ) { final V old = this . value ; this . value = value ; return old ; MST[ReturnValsMutator]MSP[] } @Override
public void putAll ( final Map < ? extends K , ? extends V > map ) { switch ( map . size () ) { MST[experimental.RemoveSwitchMutator_1]MSP[] case 0 : return; case 1 :
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR1Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
public K lastKey () { return getKey () ; } @Override public K nextKey ( final K key ) { return null ; } @Override public K previousKey ( final K key ) { return null ; MST[ReturnValsMutator]MSP[] } protected boolean isEqualKey ( final Object key ) {
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[rv.ROR5Mutator]MSP[] . append ( '}' ) . toString () ; }
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
public void putAll ( final Map < ? extends K , ? extends V > map ) { switch ( map . size () ) { MST[experimental.RemoveSwitchMutator_0]MSP[] case 0 : return; case 1 :
. append ( getKey () == this ? lr_8 : getKey () ) MST[rv.CRCR4Mutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
public int size () { return 1 ; MST[InlineConstantMutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
final Map . Entry < ? extends K , ? extends V > entry = map . entrySet () . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[] put ( entry . getKey () , entry . getValue () ) ; return; default: throw new IllegalArgumentException ( lr_2 ) ; } }
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; return Collections . singleton ( entry ) ; } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] . append ( '}' ) . toString () ; }
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[experimental.NakedReceiverMutator]MSP[] . append ( '}' ) . toString () ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[NegateConditionalsMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
public K lastKey () { return getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public K nextKey ( final K key ) { return null ; } @Override public K previousKey ( final K key ) { return null ; } protected boolean isEqualKey ( final Object key ) {
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[BooleanFalseReturnValsMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] . append ( '}' ) . toString () ; }
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; MST[ReturnValsMutator]MSP[] } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.CRCR6Mutator]MSP[] } @Override public int hashCode () {
public Collection < V > values () { return new SingletonValues <> ( this ) ; } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; } @Override public K firstKey () { return getKey () ; MST[NullReturnValsMutator]MSP[] } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.CRCR4Mutator]MSP[] } @Override public int hashCode () {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR1Mutator]MSP[] } @Override public int hashCode () {
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[NegateConditionalsMutator]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR3Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR5Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[NonVoidMethodCallMutator]MSP[] . append ( '}' ) . toString () ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[ReturnValsMutator]MSP[] } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR5Mutator]MSP[] } @Override public int hashCode () {
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[rv.CRCR6Mutator]MSP[] }
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.CRCR2Mutator]MSP[] } @Override public int hashCode () {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR3Mutator]MSP[] } @Override public int hashCode () {
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; MST[ReturnValsMutator]MSP[] } throw new IllegalArgumentException ( lr_1 ) ; } @Override
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[] } @Override
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[rv.CRCR4Mutator]MSP[] }
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[rv.CRCR2Mutator]MSP[] }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[EmptyObjectReturnValsMutator]MSP[] . append ( '{' )
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; MST[ReturnValsMutator]MSP[] } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public int hashCode () {
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) MST[NonVoidMethodCallMutator]MSP[] . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
public boolean isFull () { return true ; MST[InlineConstantMutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.ROR5Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.ROR2Mutator]MSP[] return false ; }
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[PrimitiveReturnsMutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR1Mutator]MSP[] . append ( '{' )
if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR6Mutator]MSP[] } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
final Map . Entry < ? extends K , ? extends V > entry = map . entrySet () . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[] put ( entry . getKey () , entry . getValue () ) ; return; default: throw new IllegalArgumentException ( lr_2 ) ; } }
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[rv.ROR3Mutator]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public int hashCode () {
public boolean isFull () { return true ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
if ( obj instanceof Map == false ) { MST[rv.ROR2Mutator]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
final Map . Entry < ? extends K , ? extends V > entry = map . entrySet () . iterator () . next () ; put ( entry . getKey () , entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] return; default: throw new IllegalArgumentException ( lr_2 ) ; } }
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; MST[ArgumentPropagationMutator]MSP[] } throw new IllegalArgumentException ( lr_1 ) ; } @Override
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.CRCR5Mutator]MSP[] return false ; }
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[rv.CRCR5Mutator]MSP[] . append ( '}' ) . toString () ; }
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[NegateConditionalsMutator]MSP[] . append ( '}' ) . toString () ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[rv.CRCR1Mutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[ConstructorCallMutator]MSP[] . append ( '{' )
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[rv.CRCR1Mutator]MSP[] . append ( '}' ) . toString () ; }
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; MST[NonVoidMethodCallMutator]MSP[] return Collections . singleton ( entry ) ; } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; } @Override
@Override public K getKey () { return key ; MST[ReturnValsMutator]MSP[] } @Override public V getValue () { return value ; } public V setValue ( final V value ) { final V old = this . value ; this . value = value ; return old ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[rv.CRCR5Mutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int hashCode () {
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[rv.ROR5Mutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
public Collection < V > values () { return new SingletonValues <> ( this ) ; } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; MST[ConstructorCallMutator]MSP[] } @Override public K firstKey () { return getKey () ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[rv.CRCR4Mutator]MSP[] } @Override
public int size () { return 1 ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[] return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; } @Override public int hashCode () {
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[InlineConstantMutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR5Mutator]MSP[] . append ( '{' )
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[rv.CRCR3Mutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
public Collection < V > values () { return new SingletonValues <> ( this ) ; } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; } @Override public K firstKey () { return getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[rv.CRCR3Mutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR3Mutator]MSP[] . append ( '{' )
public int size () { return 1 ; MST[rv.CRCR2Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
return isEqualValue ( value ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
public boolean isFull () { return true ; MST[rv.CRCR4Mutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[InlineConstantMutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[NegateConditionalsMutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[ReturnValsMutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[InlineConstantMutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[rv.ROR5Mutator]MSP[] } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public int hashCode () {
. append ( getKey () == this ? lr_8 : getKey () ) MST[NonVoidMethodCallMutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.ROR5Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; MST[NullReturnValsMutator]MSP[] } return null ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[MathMutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[InlineConstantMutator]MSP[] } @Override public int hashCode () {
return isEqualValue ( value ) ; MST[ReturnValsMutator]MSP[] } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
if ( obj instanceof Map == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[rv.ROR3Mutator]MSP[] return value ; } return null ; } @Override
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[rv.ROR5Mutator]MSP[] return value ; } return null ; } @Override
. append ( getKey () == this ? lr_8 : getKey () ) MST[NonVoidMethodCallMutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return value ; } return null ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[rv.CRCR6Mutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[rv.CRCR3Mutator]MSP[] } @Override
if ( obj instanceof Map == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[ReturnValsMutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR4Mutator]MSP[] . append ( '{' )
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR6Mutator]MSP[] . append ( '{' )
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' ) MST[experimental.NakedReceiverMutator]MSP[]
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[rv.CRCR2Mutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
public void putAll ( final Map < ? extends K , ? extends V > map ) { switch ( map . size () ) { MST[NonVoidMethodCallMutator]MSP[] case 0 : return; case 1 :
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[NonVoidMethodCallMutator]MSP[] return false ; }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.ROR3Mutator]MSP[] return false ; }
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[InlineConstantMutator]MSP[] . append ( '}' ) . toString () ; }
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; return Collections . singleton ( entry ) ; } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR1Mutator]MSP[] . append ( '{' )
return isEqualValue ( value ) ; } @Override public V put ( final K key , final V value ) { if ( isEqualKey ( key ) ) { MST[rv.ROR1Mutator]MSP[] return setValue ( value ) ; } throw new IllegalArgumentException ( lr_1 ) ; } @Override
if ( obj instanceof Map == false ) { return false ; MST[rv.CRCR3Mutator]MSP[] } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
final Map . Entry < ? extends K , ? extends V > entry = map . entrySet () . iterator () . next () ; put ( entry . getKey () , entry . getValue () ) ; MST[ArgumentPropagationMutator]MSP[] return; default: throw new IllegalArgumentException ( lr_2 ) ; } }
if ( obj instanceof Map == false ) { MST[rv.ROR3Mutator]MSP[] return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
if ( obj instanceof Map == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { MST[rv.CRCR4Mutator]MSP[] return false ; }
if ( obj instanceof Map == false ) { return false ; MST[ReturnValsMutator]MSP[] } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override
. append ( getKey () == this ? lr_8 : getKey () ) MST[rv.ROR5Mutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
. append ( getKey () == this ? lr_8 : getKey () ) . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) MST[rv.CRCR3Mutator]MSP[] . append ( '}' ) . toString () ; }
. append ( getKey () == this ? lr_8 : getKey () ) MST[experimental.NakedReceiverMutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
public boolean isFull () { return true ; MST[rv.CRCR2Mutator]MSP[] } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ MST[rv.CRCR3Mutator]MSP[] ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { MST[rv.ROR5Mutator]MSP[] return true ; }
if ( obj instanceof Map == false ) { return false ; MST[InlineConstantMutator]MSP[] } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; if ( other . size () != 1 ) { return false ; }
return ( SingletonMap < K , V > ) super . clone () ; MST[NullReturnValsMutator]MSP[] } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; }
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.CRCR5Mutator]MSP[] } @Override public int hashCode () {
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR6Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR3Mutator]MSP[] } @Override public int hashCode () {
public Collection < V > values () { return new SingletonValues <> ( this ) ; } @Override public OrderedMapIterator < K , V > mapIterator () { return new SingletonMapIterator <> ( this ) ; } @Override public K firstKey () { return getKey () ; MST[ReturnValsMutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[InlineConstantMutator]MSP[] . append ( '{' )
return key == null ? getKey () == null : key . equals ( getKey () ) ; MST[rv.CRCR2Mutator]MSP[] } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; } @Override
return key == null ? getKey () == null : key . equals ( getKey () ) ; } protected boolean isEqualValue ( final Object value ) { return value == null ? getValue () == null : value . equals ( getValue () ) ; MST[rv.CRCR6Mutator]MSP[] } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[ReturnValsMutator]MSP[] . append ( '{' )
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return value ; } return null ; } @Override
public int size () { return 1 ; MST[PrimitiveReturnsMutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
public boolean isFull () { return true ; } @Override public int maxSize () { return 1 ; MST[rv.CRCR5Mutator]MSP[] } @Override public V get ( final Object key ) { if ( isEqualKey ( key ) ) { return value ; } return null ; } @Override
public int size () { return 1 ; } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public boolean containsValue ( final Object value ) {
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[rv.ROR4Mutator]MSP[] } @Override public int hashCode () {
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; } @Override public String toString () { return new StringBuilder ( 128 ) MST[rv.CRCR3Mutator]MSP[] . append ( '{' )
public int size () { return 1 ; MST[rv.CRCR4Mutator]MSP[] } @Override public boolean isEmpty () { return false ; } @Override public boolean containsKey ( final Object key ) { return isEqualKey ( key ) ; } @Override public boolean containsValue ( final Object value ) {
return ( SingletonMap < K , V > ) super . clone () ; } catch ( final CloneNotSupportedException ex ) { throw new InternalError () ; } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; MST[rv.CRCR5Mutator]MSP[] }
. append ( getKey () == this ? lr_8 : getKey () ) MST[rv.CRCR2Mutator]MSP[] . append ( '=' ) . append ( getValue () == this ? lr_8 : getValue () ) . append ( '}' ) . toString () ; }
final Map . Entry < K , V > entry = new TiedMapEntry <> ( this , getKey () ) ; return Collections . singleton ( entry ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Set < K > keySet () { return Collections . singleton ( key ) ; } @Override
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[NegateConditionalsMutator]MSP[] } @Override public int hashCode () {
public K lastKey () { return getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public K nextKey ( final K key ) { return null ; } @Override public K previousKey ( final K key ) { return null ; } protected boolean isEqualKey ( final Object key ) {
return ( getKey () == null ? 0 : getKey () . hashCode () ) ^ ( getValue () == null ? 0 : getValue () . hashCode () ) ; MST[rv.CRCR5Mutator]MSP[] } @Override public String toString () { return new StringBuilder ( 128 ) . append ( '{' )
@Override public K getKey () { return key ; } @Override public V getValue () { return value ; } public V setValue ( final V value ) { final V old = this . value ; this . value = value ; MST[experimental.MemberVariableMutator]MSP[] return old ; } @Override
final Map . Entry < ? , ? > entry = other . entrySet () . iterator () . next () ; return isEqualKey ( entry . getKey () ) && isEqualValue ( entry . getValue () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public int hashCode () {
