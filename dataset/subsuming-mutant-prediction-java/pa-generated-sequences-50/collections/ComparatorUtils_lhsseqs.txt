final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.ABSMutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
@SuppressWarnings ( lr_1 ) public static < E extends Comparable < ? super E > > Comparator < E > naturalComparator () { return NATURAL_COMPARATOR ; MST[NullReturnValsMutator]MSP[] } public static < E > Comparator < E > chainedComparator ( final Comparator < E > ... comparators ) {
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.ABSMutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
public static < I , O > Comparator < I > transformedComparator ( Comparator < O > comparator , final Transformer < ? super I , ? extends O > transformer ) { if ( comparator == null ) { MST[NegateConditionalsMutator]MSP[] comparator = NATURAL_COMPARATOR ; }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[ReturnValsMutator]MSP[] }
return new TransformingComparator <> ( transformer , comparator ) ; } @SuppressWarnings ( lr_1 ) public static < E > E min ( final E o1 , final E o2 , Comparator < E > comparator ) { if ( comparator == null ) { MST[NegateConditionalsMutator]MSP[] comparator = NATURAL_COMPARATOR ; }
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI3Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI4Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI2Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI1Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[NegateConditionalsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.ROR5Mutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.UOI2Mutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.UOI4Mutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.ROR3Mutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.ROR1Mutator]MSP[] }
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] }
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[NegateConditionalsMutator]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; } @SuppressWarnings ( lr_1 )
return new TransformingComparator <> ( transformer , comparator ) ; } @SuppressWarnings ( lr_1 ) public static < E > E min ( final E o1 , final E o2 , Comparator < E > comparator ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] comparator = NATURAL_COMPARATOR ; }
public static < E > Comparator < E > chainedComparator ( final Collection < Comparator < E > > comparators ) { return chainedComparator ( MST[ReturnValsMutator]MSP[] ( Comparator < E > [] ) comparators . toArray ( new Comparator [ comparators . size () ] ) ) ; }
public static < I , O > Comparator < I > transformedComparator ( Comparator < O > comparator , final Transformer < ? super I , ? extends O > transformer ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] comparator = NATURAL_COMPARATOR ; }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[ConditionalsBoundaryMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; }
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.ABSMutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI3Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[InlineConstantMutator]MSP[] } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI3Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.ROR3Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[rv.CRCR1Mutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < I , O > Comparator < I > transformedComparator ( Comparator < O > comparator , final Transformer < ? super I , ? extends O > transformer ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] comparator = NATURAL_COMPARATOR ; }
if ( comparator == null ) { MST[rv.ROR5Mutator]MSP[] comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.ROR4Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI2Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[ReturnValsMutator]MSP[] }
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; } @SuppressWarnings ( lr_1 )
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 )
return new TransformingComparator <> ( transformer , comparator ) ; } @SuppressWarnings ( lr_1 ) public static < E > E min ( final E o1 , final E o2 , Comparator < E > comparator ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] comparator = NATURAL_COMPARATOR ; }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; MST[NonVoidMethodCallMutator]MSP[] return c > 0 ? o1 : o2 ; }
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[rv.UOI1Mutator]MSP[] }
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 )
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.ROR2Mutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.UOI1Mutator]MSP[] }
public static < E > Comparator < E > chainedComparator ( final Collection < Comparator < E > > comparators ) { return chainedComparator ( ( Comparator < E > [] ) comparators . toArray ( new Comparator [ comparators . size () ] ) MST[NonVoidMethodCallMutator]MSP[] ) ; }
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[rv.ABSMutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.ABSMutator]MSP[] }
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; MST[ConstructorCallMutator]MSP[] } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; }
@SuppressWarnings ( lr_1 ) public static < E extends Comparable < ? super E > > Comparator < E > naturalComparator () { return NATURAL_COMPARATOR ; MST[ReturnValsMutator]MSP[] } public static < E > Comparator < E > chainedComparator ( final Comparator < E > ... comparators ) {
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; MST[VoidMethodCallMutator]MSP[] } return chain ; } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; MST[ConstructorCallMutator]MSP[] for ( final Comparator < E > comparator : comparators ) { chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > chainedComparator ( final Collection < Comparator < E > > comparators ) { return chainedComparator ( MST[NullReturnValsMutator]MSP[] ( Comparator < E > [] ) comparators . toArray ( new Comparator [ comparators . size () ] ) ) ; }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.UOI4Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.UOI3Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[NullReturnValsMutator]MSP[] }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.UOI2Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] }
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > chainedComparator ( final Collection < Comparator < E > > comparators ) { return chainedComparator ( MST[NonVoidMethodCallMutator]MSP[] ( Comparator < E > [] ) comparators . toArray ( new Comparator [ comparators . size () ] ) ) ; }
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; MST[ReturnValsMutator]MSP[] } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.UOI1Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
if ( comparator == null ) { MST[NegateConditionalsMutator]MSP[] comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; MST[NullReturnValsMutator]MSP[] } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; }
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[rv.CRCR2Mutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[rv.CRCR4Mutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[rv.UOI2Mutator]MSP[] }
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[ConstructorCallMutator]MSP[] } @SuppressWarnings ( lr_1 )
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 )
return new TransformingComparator <> ( transformer , comparator ) ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E min ( final E o1 , final E o2 , Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; }
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[rv.ROR5Mutator]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[rv.CRCR6Mutator]MSP[] } @SuppressWarnings ( lr_1 )
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[NonVoidMethodCallMutator]MSP[] }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[rv.ROR5Mutator]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; } @SuppressWarnings ( lr_1 )
return new TransformingComparator <> ( transformer , comparator ) ; } @SuppressWarnings ( lr_1 ) public static < E > E min ( final E o1 , final E o2 , Comparator < E > comparator ) { if ( comparator == null ) { MST[rv.ROR5Mutator]MSP[] comparator = NATURAL_COMPARATOR ; }
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI1Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { MST[NegateConditionalsMutator]MSP[] comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; } @SuppressWarnings ( lr_1 )
return new TransformingComparator <> ( transformer , comparator ) ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E min ( final E o1 , final E o2 , Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[NullReturnValsMutator]MSP[] }
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[ConstructorCallMutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > chainedComparator ( final Collection < Comparator < E > > comparators ) { return chainedComparator ( ( Comparator < E > [] ) comparators . toArray ( new Comparator [ comparators . size () ] ) MST[ArgumentPropagationMutator]MSP[] ) ; }
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI4Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final int c = comparator . compare ( o1 , o2 ) ; MST[NonVoidMethodCallMutator]MSP[] return c < 0 ? o1 : o2 ; } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.ROR2Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
if ( comparator == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; }
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[rv.CRCR3Mutator]MSP[] } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI1Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { MST[rv.UOI4Mutator]MSP[] chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; } @SuppressWarnings ( lr_1 )
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.ROR5Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.ROR1Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
return new TransformingComparator <> ( transformer , comparator ) ; MST[ConstructorCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E min ( final E o1 , final E o2 , Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; }
final int c = comparator . compare ( o1 , o2 ) ; return c < 0 ? o1 : o2 ; MST[rv.ABSMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > E max ( final E o1 , final E o2 , Comparator < E > comparator ) {
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[ConditionalsBoundaryMutator]MSP[] }
public static < E > Comparator < E > reversedComparator ( final Comparator < E > comparator ) { return new ReverseComparator <> ( comparator ) ; } public static Comparator < Boolean > booleanComparator ( final boolean trueFirst ) { return BooleanComparator . booleanComparator ( trueFirst ) ; MST[rv.UOI3Mutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.ROR4Mutator]MSP[] }
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[rv.CRCR5Mutator]MSP[] } @SuppressWarnings ( lr_1 )
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[NegateConditionalsMutator]MSP[] }
if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } final int c = comparator . compare ( o1 , o2 ) ; return c > 0 ? o1 : o2 ; MST[rv.UOI3Mutator]MSP[] }
public static < E > Comparator < E > chainedComparator ( final Collection < Comparator < E > > comparators ) { return chainedComparator ( ( Comparator < E > [] ) comparators . toArray ( new Comparator [ comparators . size () ] ) MST[NonVoidMethodCallMutator]MSP[] ) ; }
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; } return chain ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
public static < I , O > Comparator < I > transformedComparator ( Comparator < O > comparator , final Transformer < ? super I , ? extends O > transformer ) { if ( comparator == null ) { MST[rv.ROR5Mutator]MSP[] comparator = NATURAL_COMPARATOR ; }
@SuppressWarnings ( lr_1 ) public static < E > Comparator < E > nullLowComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , false ) ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; MST[ArgumentPropagationMutator]MSP[] } return chain ; } @SuppressWarnings ( lr_1 )
public static < E > Comparator < E > nullHighComparator ( Comparator < E > comparator ) { if ( comparator == null ) { comparator = NATURAL_COMPARATOR ; } return new NullComparator <> ( comparator , true ) ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 )
final ComparatorChain < E > chain = new ComparatorChain <> () ; for ( final Comparator < E > comparator : comparators ) { chain . addComparator ( Objects . requireNonNull ( comparator , lr_2 ) ) ; MST[NonVoidMethodCallMutator]MSP[] } return chain ; } @SuppressWarnings ( lr_1 )
