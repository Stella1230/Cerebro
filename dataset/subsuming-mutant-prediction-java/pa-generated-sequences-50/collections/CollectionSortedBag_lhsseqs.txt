return true ; MST[InlineConstantMutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; MST[rv.UOI1Mutator]MSP[] return true ; }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR2Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR4Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR5Mutator]MSP[] }
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; MST[rv.UOI3Mutator]MSP[] return true ; }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR2Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR6Mutator]MSP[] }
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[InlineConstantMutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR3Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR1Mutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR4Mutator]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR2Mutator]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR4Mutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } return changed ; } @Override
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[InlineConstantMutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } return changed ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; MST[ReturnValsMutator]MSP[] } }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR5Mutator]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR3Mutator]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR1Mutator]MSP[] } return changed ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR3Mutator]MSP[] } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR1Mutator]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI2Mutator]MSP[] } return changed ; } @Override
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ; MST[InlineConstantMutator]MSP[]
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[rv.ROR2Mutator]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[rv.ROR4Mutator]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR5Mutator]MSP[] } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI4Mutator]MSP[] } return changed ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; MST[InlineConstantMutator]MSP[] final Iterator < E > e = iterator () ;
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override
return result ; MST[rv.UOI3Mutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[rv.ROR3Mutator]MSP[] return false ; } }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI4Mutator]MSP[] } return changed ; } @Override
while ( e . hasNext () ) { MST[rv.ROR4Mutator]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
public static < E > SortedBag < E > collectionSortedBag ( final SortedBag < E > bag ) { return new CollectionSortedBag <> ( bag ) ; MST[ConstructorCallMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; MST[InlineConstantMutator]MSP[] changed = changed || added ; } return changed ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI1Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI4Mutator]MSP[] }
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; MST[rv.CRCR3Mutator]MSP[] } }
public static < E > SortedBag < E > collectionSortedBag ( final SortedBag < E > bag ) { return new CollectionSortedBag <> ( bag ) ; MST[ReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ;
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; MST[rv.CRCR5Mutator]MSP[] } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.CRCR3Mutator]MSP[] } return changed ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } }
return true ; MST[rv.CRCR2Mutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; MST[NonVoidMethodCallMutator]MSP[] changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[rv.UOI1Mutator]MSP[] } @Override
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[rv.CRCR4Mutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ; MST[rv.CRCR1Mutator]MSP[]
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ; MST[rv.CRCR5Mutator]MSP[]
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ABSMutator]MSP[] } return changed ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[rv.ROR5Mutator]MSP[] boolean result = false ;
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] boolean modified = false ; final Iterator < E > e = iterator () ;
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; MST[rv.CRCR6Mutator]MSP[] final Iterator < E > e = iterator () ;
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[rv.UOI2Mutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[rv.ROR2Mutator]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] boolean result = false ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; MST[NonVoidMethodCallMutator]MSP[] while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; } }
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[rv.ROR1Mutator]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
while ( e . hasNext () ) { MST[NegateConditionalsMutator]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[NegateConditionalsMutator]MSP[] return false ; } }
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[rv.ROR4Mutator]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR3Mutator]MSP[] }
return true ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR1Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ABSMutator]MSP[] }
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[BooleanFalseReturnValsMutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } return changed ; } @Override
return result ; MST[ReturnValsMutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ; MST[rv.CRCR6Mutator]MSP[]
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; MST[rv.CRCR3Mutator]MSP[] changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; MST[rv.CRCR5Mutator]MSP[] changed = changed || added ; } return changed ; } @Override
return true ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[rv.UOI4Mutator]MSP[] } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR1Mutator]MSP[] } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR3Mutator]MSP[] } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[rv.UOI2Mutator]MSP[] } @Override
return true ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
return result ; } return decorated () . removeAll ( null ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[rv.CRCR2Mutator]MSP[] }
public static < E > SortedBag < E > collectionSortedBag ( final SortedBag < E > bag ) { return new CollectionSortedBag <> ( bag ) ; } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; MST[VoidMethodCallMutator]MSP[]
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[InlineConstantMutator]MSP[] }
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; MST[rv.CRCR1Mutator]MSP[] final Iterator < E > e = iterator () ;
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[rv.CRCR4Mutator]MSP[] }
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[rv.ROR4Mutator]MSP[] return false ; } }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[ReturnValsMutator]MSP[] } @Override
return result ; MST[rv.UOI2Mutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
while ( e . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI3Mutator]MSP[] } return changed ; } @Override
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[NegateConditionalsMutator]MSP[] boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[NegateConditionalsMutator]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
while ( e . hasNext () ) { MST[rv.ROR1Mutator]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI1Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI4Mutator]MSP[] }
public static < E > SortedBag < E > collectionSortedBag ( final SortedBag < E > bag ) { return new CollectionSortedBag <> ( bag ) ; MST[NullReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; MST[rv.CRCR1Mutator]MSP[] } }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[NegateConditionalsMutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[NegateConditionalsMutator]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.CRCR6Mutator]MSP[] } return changed ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; MST[rv.CRCR2Mutator]MSP[] } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ABSMutator]MSP[] } return changed ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ; MST[rv.CRCR3Mutator]MSP[]
return true ; MST[ReturnValsMutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[BooleanFalseReturnValsMutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[rv.ROR3Mutator]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI1Mutator]MSP[] } return changed ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] boolean result = false ;
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[rv.ROR1Mutator]MSP[] return false ; } }
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; MST[VoidMethodCallMutator]MSP[] modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR1Mutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR5Mutator]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[] result = result || changed ; }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR6Mutator]MSP[] }
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; MST[rv.UOI2Mutator]MSP[] return true ; }
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; MST[NonVoidMethodCallMutator]MSP[] return true ; }
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[rv.ROR5Mutator]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR5Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.CRCR3Mutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[InlineConstantMutator]MSP[] } return changed ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; MST[NonVoidMethodCallMutator]MSP[] while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR3Mutator]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR1Mutator]MSP[] final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ; MST[InlineConstantMutator]MSP[]
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR3Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR5Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ABSMutator]MSP[] }
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; MST[rv.CRCR6Mutator]MSP[] } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
out . writeObject ( decorated () ) ; MST[VoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; setCollection ( ( Collection < E > ) in . readObject () ) ; } @Override
return result ; } return decorated () . removeAll ( null ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ; MST[rv.CRCR3Mutator]MSP[]
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; MST[rv.UOI4Mutator]MSP[] return true ; }
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[rv.ROR2Mutator]MSP[] return false ; } }
out . writeObject ( decorated () ) ; } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; MST[VoidMethodCallMutator]MSP[] setCollection ( ( Collection < E > ) in . readObject () ) ; } @Override
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ; MST[rv.CRCR5Mutator]MSP[]
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ; MST[rv.CRCR1Mutator]MSP[]
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[rv.UOI3Mutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[rv.UOI1Mutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; MST[rv.ABSMutator]MSP[] return true ; }
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ; MST[NonVoidMethodCallMutator]MSP[]
while ( e . hasNext () ) { MST[rv.ROR3Mutator]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[NegateConditionalsMutator]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[InlineConstantMutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[NegateConditionalsMutator]MSP[] } return changed ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; MST[rv.CRCR6Mutator]MSP[] } }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI2Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[] result = result || changed ; }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI3Mutator]MSP[] }
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; MST[InlineConstantMutator]MSP[] } }
while ( e . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[NegateConditionalsMutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.CRCR4Mutator]MSP[] } return changed ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; MST[rv.CRCR4Mutator]MSP[] } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; MST[rv.CRCR6Mutator]MSP[] changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; MST[rv.CRCR2Mutator]MSP[] changed = changed || added ; } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR4Mutator]MSP[] } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR2Mutator]MSP[] } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR2Mutator]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[rv.ROR1Mutator]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
return result ; } return decorated () . removeAll ( null ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[rv.CRCR4Mutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI1Mutator]MSP[] } return changed ; } @Override
out . writeObject ( decorated () ) ; } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; setCollection ( ( Collection < E > ) in . readObject () ) ; MST[VoidMethodCallMutator]MSP[] } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI3Mutator]MSP[] } return changed ; } @Override
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[rv.CRCR5Mutator]MSP[] }
return result ; MST[BooleanFalseReturnValsMutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
return result ; MST[rv.UOI4Mutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[rv.ABSMutator]MSP[] } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[rv.ROR3Mutator]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
out . writeObject ( decorated () ) ; MST[NonVoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; setCollection ( ( Collection < E > ) in . readObject () ) ; } @Override
return result ; MST[rv.ABSMutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[rv.ROR5Mutator]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR5Mutator]MSP[] }
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR4Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.ROR2Mutator]MSP[] }
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; MST[InlineConstantMutator]MSP[] } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[rv.ROR5Mutator]MSP[] boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
return result ; } return decorated () . removeAll ( null ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[ReturnValsMutator]MSP[] }
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] boolean modified = false ; final Iterator < E > e = iterator () ;
return result ; MST[BooleanTrueReturnValsMutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
return true ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[BooleanTrueReturnValsMutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[rv.CRCR6Mutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.UOI2Mutator]MSP[] } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[InlineConstantMutator]MSP[] }
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; MST[rv.CRCR3Mutator]MSP[] final Iterator < E > e = iterator () ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR5Mutator]MSP[] } return changed ; } @Override
return result ; } return decorated () . removeAll ( null ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
return result ; } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; MST[rv.CRCR5Mutator]MSP[] final Iterator < E > e = iterator () ;
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } }
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { MST[NegateConditionalsMutator]MSP[] boolean result = false ;
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { MST[NonVoidMethodCallMutator]MSP[] e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[rv.ABSMutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { MST[rv.ROR5Mutator]MSP[] return false ; } }
return result ; MST[rv.UOI1Mutator]MSP[] } return decorated () . removeAll ( null ) ; } @Override public boolean retainAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean modified = false ; final Iterator < E > e = iterator () ;
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; MST[NonVoidMethodCallMutator]MSP[] return true ; }
while ( e . hasNext () ) { MST[rv.ROR2Mutator]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
while ( e . hasNext () ) { MST[rv.ROR5Mutator]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[ReturnValsMutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[NegateConditionalsMutator]MSP[] } return changed ; } @Override
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { if ( ! contains ( e . next () ) ) { return false ; MST[rv.CRCR5Mutator]MSP[] } }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI3Mutator]MSP[] }
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; MST[rv.UOI2Mutator]MSP[] }
public boolean containsAll ( final Collection < ? > coll ) { final Iterator < ? > e = coll . iterator () ; while ( e . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! contains ( e . next () ) ) { return false ; } }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.CRCR5Mutator]MSP[] } return changed ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.CRCR2Mutator]MSP[] } return changed ; } @Override
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; MST[rv.CRCR3Mutator]MSP[] } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; MST[rv.CRCR4Mutator]MSP[] changed = changed || added ; } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[rv.ROR4Mutator]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR2Mutator]MSP[] } return changed ; } @Override
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? > i = coll . iterator () ; MST[NonVoidMethodCallMutator]MSP[] while ( i . hasNext () ) { final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
return true ; MST[rv.CRCR4Mutator]MSP[] } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ;
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; } return changed ; MST[rv.UOI3Mutator]MSP[] } @Override
public boolean add ( final E object , final int count ) { decorated () . add ( object , count ) ; return true ; MST[rv.CRCR3Mutator]MSP[] }
final Iterator < ? extends E > i = coll . iterator () ; while ( i . hasNext () ) { final boolean added = add ( i . next () , 1 ) ; changed = changed || added ; MST[rv.ROR4Mutator]MSP[] } return changed ; } @Override
final Iterator < ? > i = coll . iterator () ; while ( i . hasNext () ) { MST[NegateConditionalsMutator]MSP[] final Object obj = i . next () ; final boolean changed = remove ( obj , getCount ( obj ) ) ; result = result || changed ; }
out . writeObject ( decorated () ) ; } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; setCollection ( ( Collection < E > ) in . readObject () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
while ( e . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; } return decorated () . retainAll ( null ) ; } @Override
public boolean remove ( final Object object ) { return remove ( object , 1 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { if ( coll != null ) { boolean result = false ;
return true ; } @Override public boolean add ( final E object ) { return add ( object , 1 ) ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { boolean changed = false ; MST[rv.CRCR6Mutator]MSP[]
while ( e . hasNext () ) { if ( ! coll . contains ( e . next () ) ) { e . remove () ; modified = true ; } } return modified ; MST[rv.UOI4Mutator]MSP[] } return decorated () . retainAll ( null ) ; } @Override
