public Set < Map . Entry < K , V > > entrySet () { final Set < Map . Entry < K , V > > set = map . entrySet () ; MST[NonVoidMethodCallMutator]MSP[] return UnmodifiableSet . unmodifiableSet ( set ) ; } @Override
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[rv.CRCR2Mutator]MSP[] } @Override public int maxSize () { return size () ; }
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[rv.CRCR4Mutator]MSP[] } @Override public int maxSize () { return size () ; }
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[rv.CRCR3Mutator]MSP[] } @Override public int maxSize () { return size () ; }
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean isFull () { return true ; } @Override public int maxSize () { return size () ; }
public static < K , V > FixedSizeMap < K , V > fixedSizeMap ( final Map < K , V > map ) { return new FixedSizeMap <> ( map ) ; MST[ReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ;
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
public Set < K > keySet () { final Set < K > set = map . keySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[ReturnValsMutator]MSP[] } @Override public Collection < V > values () { final Collection < V > coll = map . values () ;
out . writeObject ( map ) ; } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; MST[VoidMethodCallMutator]MSP[] map = ( Map < K , V > ) in . readObject () ; } @Override
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; } @Override public int maxSize () { return size () ; MST[PrimitiveReturnsMutator]MSP[] }
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public int maxSize () { return size () ; }
public Set < Map . Entry < K , V > > entrySet () { final Set < Map . Entry < K , V > > set = map . entrySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override
public Set < K > keySet () { final Set < K > set = map . keySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Collection < V > values () { final Collection < V > coll = map . values () ;
public Set < K > keySet () { final Set < K > set = map . keySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public Collection < V > values () { final Collection < V > coll = map . values () ;
public Set < K > keySet () { final Set < K > set = map . keySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public Collection < V > values () { final Collection < V > coll = map . values () ;
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public boolean isFull () { return true ; } @Override public int maxSize () { return size () ; }
public Set < Map . Entry < K , V > > entrySet () { final Set < Map . Entry < K , V > > set = map . entrySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[ArgumentPropagationMutator]MSP[] } @Override
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { throw new IllegalArgumentException ( lr_2 ) ; MST[ConstructorCallMutator]MSP[] } }
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { MST[NonVoidMethodCallMutator]MSP[] if ( ! containsKey ( key ) ) { throw new IllegalArgumentException ( lr_2 ) ; } }
map . putAll ( mapToCopy ) ; MST[VoidMethodCallMutator]MSP[] } @Override public void clear () { throw new UnsupportedOperationException ( lr_3 ) ; } @Override public V remove ( final Object key ) { throw new UnsupportedOperationException ( lr_3 ) ; } @Override
public static < K , V > FixedSizeMap < K , V > fixedSizeMap ( final Map < K , V > map ) { return new FixedSizeMap <> ( map ) ; MST[NullReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ;
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[InlineConstantMutator]MSP[] } @Override public int maxSize () { return size () ; }
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; MST[ConstructorCallMutator]MSP[] } return map . put ( key , value ) ; } @Override
public Set < K > keySet () { final Set < K > set = map . keySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; } @Override public Collection < V > values () { final Collection < V > coll = map . values () ; MST[NonVoidMethodCallMutator]MSP[]
map . putAll ( mapToCopy ) ; } @Override public void clear () { throw new UnsupportedOperationException ( lr_3 ) ; } @Override public V remove ( final Object key ) { throw new UnsupportedOperationException ( lr_3 ) ; MST[ConstructorCallMutator]MSP[] } @Override
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; MST[NullReturnValsMutator]MSP[] } @Override
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[rv.CRCR5Mutator]MSP[] } @Override public int maxSize () { return size () ; }
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; MST[ArgumentPropagationMutator]MSP[] } @Override
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; } @Override public int maxSize () { return size () ; MST[ReturnValsMutator]MSP[] }
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; MST[ReturnValsMutator]MSP[] } @Override
public Set < Map . Entry < K , V > > entrySet () { final Set < Map . Entry < K , V > > set = map . entrySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
out . writeObject ( map ) ; } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; map = ( Map < K , V > ) in . readObject () ; MST[experimental.MemberVariableMutator]MSP[] } @Override
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
out . writeObject ( map ) ; } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; map = ( Map < K , V > ) in . readObject () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
map . putAll ( mapToCopy ) ; } @Override public void clear () { throw new UnsupportedOperationException ( lr_3 ) ; MST[ConstructorCallMutator]MSP[] } @Override public V remove ( final Object key ) { throw new UnsupportedOperationException ( lr_3 ) ; } @Override
public Set < Map . Entry < K , V > > entrySet () { final Set < Map . Entry < K , V > > set = map . entrySet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; MST[ReturnValsMutator]MSP[] } @Override
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; } @Override public int maxSize () { return size () ; MST[NonVoidMethodCallMutator]MSP[] }
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public Set < K > keySet () { final Set < K > set = map . keySet () ; MST[NonVoidMethodCallMutator]MSP[] return UnmodifiableSet . unmodifiableSet ( set ) ; } @Override public Collection < V > values () { final Collection < V > coll = map . values () ;
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
public static < K , V > FixedSizeMap < K , V > fixedSizeMap ( final Map < K , V > map ) { return new FixedSizeMap <> ( map ) ; MST[ConstructorCallMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ;
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean isFull () { return true ; } @Override public int maxSize () { return size () ; }
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public boolean isFull () { return true ; } @Override public int maxSize () { return size () ; }
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[rv.CRCR6Mutator]MSP[] } @Override public int maxSize () { return size () ; }
public static < K , V > FixedSizeMap < K , V > fixedSizeMap ( final Map < K , V > map ) { return new FixedSizeMap <> ( map ) ; } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; MST[VoidMethodCallMutator]MSP[]
return UnmodifiableCollection . unmodifiableCollection ( coll ) ; } @Override public boolean isFull () { return true ; MST[ReturnValsMutator]MSP[] } @Override public int maxSize () { return size () ; }
public V put ( final K key , final V value ) { if ( map . containsKey ( key ) == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } return map . put ( key , value ) ; } @Override
out . writeObject ( map ) ; MST[VoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; map = ( Map < K , V > ) in . readObject () ; } @Override
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) { for ( final K key : mapToCopy . keySet () ) { if ( ! containsKey ( key ) ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } }
