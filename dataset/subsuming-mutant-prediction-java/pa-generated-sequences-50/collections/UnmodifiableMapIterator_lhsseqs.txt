final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; MST[NullReturnValsMutator]MSP[] } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; MST[NullReturnValsMutator]MSP[] } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; MST[NullReturnValsMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; MST[ReturnValsMutator]MSP[] } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] @SuppressWarnings ( lr_2 )
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; MST[ConstructorCallMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; MST[ReturnValsMutator]MSP[] } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public K next () { return iterator . next () ; MST[ReturnValsMutator]MSP[] } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( iterator instanceof Unmodifiable ) { @SuppressWarnings ( lr_2 )
throw new UnsupportedOperationException ( lr_3 ) ; MST[ConstructorCallMutator]MSP[] } @Override public void remove () { throw new UnsupportedOperationException ( lr_4 ) ; }
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_2 )
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_2 )
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_2 )
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_2 )
public K next () { return iterator . next () ; MST[NullReturnValsMutator]MSP[] } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[] if ( iterator instanceof Unmodifiable ) { @SuppressWarnings ( lr_2 )
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_2 )
throw new UnsupportedOperationException ( lr_3 ) ; } @Override public void remove () { throw new UnsupportedOperationException ( lr_4 ) ; MST[ConstructorCallMutator]MSP[] }
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[] } @Override
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_2 )
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; MST[ReturnValsMutator]MSP[] } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; MST[NullReturnValsMutator]MSP[] } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] @SuppressWarnings ( lr_2 )
