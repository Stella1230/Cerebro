private int getHash ( final Object key ) { if ( key == null ) { return 0 ; } int hash = key . hashCode () ; hash += ~ ( hash << 15 ) ; hash ^= ( hash >>> 10 ) ;
hash += ( hash << 3 ) ; hash ^= ( hash >>> 6 ) ; hash += ~ ( hash << 11 ) ; hash ^= ( hash >>> 16 ) ; hash %= buckets . length ;
return ( hash < 0 ) ? hash * - 1 : hash ; } @Override public int size () { int cnt = 0 ; for ( int i = 0 ; i < buckets . length ; i ++ ) { synchronized( locks [ i ] ) {
cnt += locks [ i ] . size ; } } return cnt ; } @Override public boolean isEmpty () { return ( size () == 0 ) ; } @Override public V get ( final Object key ) { final int hash = getHash ( key ) ;
synchronized ( locks [ hash ] ) { Node < K , V > n = buckets [ hash ] ; while ( n != null ) {
if ( n . key == key || ( n . key != null && n . key . equals ( key ) ) ) { return n . value ; } n = n . next ; } } return null ; } @Override
public boolean containsKey ( final Object key ) { final int hash = getHash ( key ) ; synchronized ( locks [ hash ] ) { Node < K , V > n = buckets [ hash ] ; while ( n != null ) {
if ( n . key == key || ( n . key != null && n . key . equals ( key ) ) ) { return true ; } n = n . next ; } } return false ; } @Override
public boolean containsValue ( final Object value ) { for ( int i = 0 ; i < buckets . length ; i ++ ) { synchronized ( locks [ i ] ) { Node < K , V > n = buckets [ i ] ;
while ( n != null ) { if ( n . value == value || ( n . value != null && n . value . equals ( value ) ) ) { return true ; } n = n . next ; } } } return false ; }
@Override public V put ( final K key , final V value ) { final int hash = getHash ( key ) ; synchronized ( locks [ hash ] ) { Node < K , V > n = buckets [ hash ] ;
if ( n == null ) { n = new Node <> () ; n . key = key ; n . value = value ; buckets [ hash ] = n ; locks [ hash ] . size ++ ; return null ; }
for ( Node < K , V > next = n ; next != null ; next = next . next ) { n = next ;
if ( n . key == key || ( n . key != null && n . key . equals ( key ) ) ) { final V returnVal = n . value ; n . value = value ; return returnVal ; } }
final Node < K , V > newNode = new Node <> () ; newNode . key = key ; newNode . value = value ; n . next = newNode ; locks [ hash ] . size ++ ; } return null ; } @Override
public V remove ( final Object key ) { final int hash = getHash ( key ) ; synchronized ( locks [ hash ] ) { Node < K , V > n = buckets [ hash ] ; Node < K , V > prev = null ;
while ( n != null ) { if ( n . key == key || ( n . key != null && n . key . equals ( key ) ) ) { if ( null == prev ) { buckets [ hash ] = n . next ;
} else { prev . next = n . next ; } locks [ hash ] . size -- ; return n . value ; } prev = n ; n = n . next ; } } return null ; } @Override
public Set < K > keySet () { return new KeySet () ; } @Override public Collection < V > values () { return new Values () ; } @Override public Set < Map . Entry < K , V > > entrySet () { return new EntrySet () ;
} @Override public void putAll ( final Map < ? extends K , ? extends V > map ) { for ( final Map . Entry < ? extends K , ? extends V > entry : map . entrySet () ) {
put ( entry . getKey () , entry . getValue () ) ; } } @Override public void clear () { for ( int i = 0 ; i < buckets . length ; i ++ ) { final Lock lock = locks [ i ] ;
synchronized ( lock ) { buckets [ i ] = null ; lock . size = 0 ; } } } @Override public boolean equals ( final Object obj ) { if ( obj == this ) { return true ; }
if ( obj instanceof Map < ? , ? > == false ) { return false ; } final Map < ? , ? > other = ( Map < ? , ? > ) obj ; return entrySet () . equals ( other . entrySet () ) ; }
@Override public int hashCode () { int hashCode = 0 ; for ( int i = 0 ; i < buckets . length ; i ++ ) { synchronized ( locks [ i ] ) { Node < K , V > n = buckets [ i ] ;
while ( n != null ) { hashCode += n . hashCode () ; n = n . next ; } } } return hashCode ; } @Override public K getKey () { return key ; } @Override public V getValue () { return value ; } @Override
public int hashCode () { return ( ( key == null ? 0 : key . hashCode () ) ^ ( value == null ? 0 : value . hashCode () ) ) ; } @Override public boolean equals ( final Object obj ) {
if ( obj == this ) { return true ; } if ( obj instanceof Map . Entry < ? , ? > == false ) { return false ; }
final Map . Entry < ? , ? > e2 = ( Map . Entry < ? , ? > ) obj ; return ( ( key == null ? e2 . getKey () == null : key . equals ( e2 . getKey () ) ) &&
( value == null ? e2 . getValue () == null : value . equals ( e2 . getValue () ) ) ) ; } @Override public V setValue ( final V obj ) { final V retVal = value ; value = obj ; return retVal ; }
public boolean hasNext () { if ( current . size () > 0 ) { return true ; } while ( bucket < buckets . length ) { synchronized ( locks [ bucket ] ) { Node < K , V > n = buckets [ bucket ] ;
while ( n != null ) { current . add ( n ) ; n = n . next ; } bucket ++ ; if ( current . size () > 0 ) { return true ; } } } return false ; }
protected Map . Entry < K , V > nextEntry () { if ( ! hasNext () ) { throw new NoSuchElementException () ; } last = current . remove ( current . size () - 1 ) ; return last ; } public void remove () {
if ( last == null ) { throw new IllegalStateException () ; } StaticBucketMap . this . remove ( last . getKey () ) ; last = null ; } @Override public Map . Entry < K , V > next () { return nextEntry () ; } @Override
public V next () { return nextEntry () . getValue () ; } @Override public K next () { return nextEntry () . getKey () ; } @Override public int size () { return StaticBucketMap . this . size () ; } @Override public void clear () {
StaticBucketMap . this . clear () ; } @Override public Iterator < Map . Entry < K , V > > iterator () { return new EntryIterator () ; } @Override public boolean contains ( final Object obj ) {
final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final int hash = getHash ( entry . getKey () ) ; synchronized ( locks [ hash ] ) {
for ( Node < K , V > n = buckets [ hash ] ; n != null ; n = n . next ) { if ( n . equals ( entry ) ) { return true ; } } } return false ; } @Override
public boolean remove ( final Object obj ) { if ( obj instanceof Map . Entry < ? , ? > == false ) { return false ; }
final Map . Entry < ? , ? > entry = ( Map . Entry < ? , ? > ) obj ; final int hash = getHash ( entry . getKey () ) ; synchronized ( locks [ hash ] ) {
for ( Node < K , V > n = buckets [ hash ] ; n != null ; n = n . next ) { if ( n . equals ( entry ) ) { StaticBucketMap . this . remove ( n . getKey () ) ;
return true ; } } } return false ; } @Override public int size () { return StaticBucketMap . this . size () ; } @Override public void clear () { StaticBucketMap . this . clear () ; } @Override public Iterator < K > iterator () {
return new KeyIterator () ; } @Override public boolean contains ( final Object obj ) { return StaticBucketMap . this . containsKey ( obj ) ; } @Override public boolean remove ( final Object obj ) { final int hash = getHash ( obj ) ;
synchronized ( locks [ hash ] ) { for ( Node < K , V > n = buckets [ hash ] ; n != null ; n = n . next ) { final Object k = n . getKey () ;
if ( ( k == obj ) || ( ( k != null ) && k . equals ( obj ) ) ) { StaticBucketMap . this . remove ( k ) ; return true ; } } } return false ; } @Override public int size () {
return StaticBucketMap . this . size () ; } @Override public void clear () { StaticBucketMap . this . clear () ; } @Override public Iterator < V > iterator () { return new ValueIterator () ; } public void atomic ( final Runnable runnable ) {
atomic ( Objects . requireNonNull ( runnable , lr_1 ) , 0 ) ; } private void atomic ( final Runnable r , final int bucket ) { if ( bucket >= buckets . length ) { r . run () ; return; }
synchronized ( locks [ bucket ] ) { atomic ( r , bucket + 1 ) ; } }
