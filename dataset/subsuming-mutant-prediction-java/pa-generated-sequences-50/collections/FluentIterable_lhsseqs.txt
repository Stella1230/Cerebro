public static < T > FluentIterable < T > empty () { return IterableUtils . EMPTY_ITERABLE ; MST[ReturnValsMutator]MSP[] } public static < T > FluentIterable < T > of ( final T singleton ) {
return new FluentIterable <> ( iterable ) ; MST[ConstructorCallMutator]MSP[] } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; }
return IterableUtils . get ( iterable , position ) ; MST[ReturnValsMutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[rv.ROR1Mutator]MSP[] return ( FluentIterable < T > ) iterable ; }
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[rv.ROR2Mutator]MSP[] return ( FluentIterable < T > ) iterable ; }
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public boolean contains ( final Object object ) {
return of ( IterableUtils . collatedIterable ( iterable , other ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other , final Comparator < ? super E > comparator ) {
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public boolean contains ( final Object object ) {
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[rv.ROR3Mutator]MSP[] return ( FluentIterable < T > ) iterable ; }
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; } public FluentIterable < E > unmodifiable () {
CollectionUtils . addAll ( collection , iterable ) ; } public E [] toArray ( final Class < E > arrayClass ) { return IteratorUtils . toArray ( iterator () , arrayClass ) ; MST[NonVoidMethodCallMutator]MSP[] } public List < E > toList () {
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[rv.ROR4Mutator]MSP[] return ( FluentIterable < T > ) iterable ; }
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; MST[BooleanFalseReturnValsMutator]MSP[] }
return IterableUtils . contains ( iterable , object ) ; MST[NonVoidMethodCallMutator]MSP[] } public void forEach ( final Closure < ? super E > closure ) { IterableUtils . forEach ( iterable , closure ) ; } public E get ( final int position ) {
return IterableUtils . toList ( iterable ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public String toString () { return IterableUtils . toString ( iterable ) ; }
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; } public FluentIterable < E > eval () { return of ( toList () ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; MST[ReturnValsMutator]MSP[] } public boolean contains ( final Object object ) {
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[ArgumentPropagationMutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; } public boolean contains ( final Object object ) {
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IterableUtils . loopingIterable ( iterable ) ) ; } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > skip ( final long elementsToSkip ) {
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; MST[NullReturnValsMutator]MSP[] }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > loop () {
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; MST[NullReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return iterable . iterator () ; }
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; MST[ReturnValsMutator]MSP[] }
return of ( IterableUtils . loopingIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; } public FluentIterable < E > skip ( final long elementsToSkip ) {
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; MST[ReturnValsMutator]MSP[] }
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[rv.ABSMutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
return IterableUtils . get ( iterable , position ) ; MST[rv.ABSMutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
public FluentIterable < E > append ( final Iterable < ? extends E > other ) { return of ( IterableUtils . chainedIterable ( iterable , other ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other ) {
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; } @Override public Iterator < E > iterator () { return iterable . iterator () ; MST[NullReturnValsMutator]MSP[] }
return new FluentIterable <> ( iterable ) ; } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
CollectionUtils . addAll ( collection , iterable ) ; } public E [] toArray ( final Class < E > arrayClass ) { return IteratorUtils . toArray ( iterator () , arrayClass ) ; MST[ReturnValsMutator]MSP[] } public List < E > toList () {
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ( FluentIterable < T > ) iterable ; }
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > eval () { return of ( toList () ) ; } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return new FluentIterable <> ( iterable ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; }
return IterableUtils . toList ( iterable ) ; } @Override public String toString () { return IterableUtils . toString ( iterable ) ; MST[NonVoidMethodCallMutator]MSP[] }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; } public FluentIterable < E > loop () {
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; MST[VoidMethodCallMutator]MSP[] if ( iterable instanceof FluentIterable < ? > ) { return ( FluentIterable < T > ) iterable ; }
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; }
return IterableUtils . get ( iterable , position ) ; MST[NullReturnValsMutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; } public FluentIterable < E > unmodifiable () {
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > unmodifiable () {
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { return ( FluentIterable < T > ) iterable ; MST[NullReturnValsMutator]MSP[] }
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; MST[NullReturnValsMutator]MSP[] } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; }
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[InlineConstantMutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > loop () {
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[ReturnValsMutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; }
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; } public FluentIterable < E > unmodifiable () {
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; }
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; MST[ArgumentPropagationMutator]MSP[] }
public static < T > FluentIterable < T > empty () { return IterableUtils . EMPTY_ITERABLE ; MST[NullReturnValsMutator]MSP[] } public static < T > FluentIterable < T > of ( final T singleton ) {
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; MST[ReturnValsMutator]MSP[] } @Override public Iterator < E > iterator () { return iterable . iterator () ; }
return of ( IterableUtils . loopingIterable ( iterable ) ) ; } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > skip ( final long elementsToSkip ) {
return of ( IterableUtils . collatedIterable ( iterable , other ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other , final Comparator < ? super E > comparator ) {
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; } public FluentIterable < E > eval () { return of ( toList () ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
return IterableUtils . get ( iterable , position ) ; MST[rv.UOI4Mutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
return IterableUtils . toList ( iterable ) ; MST[ReturnValsMutator]MSP[] } @Override public String toString () { return IterableUtils . toString ( iterable ) ; }
return of ( IterableUtils . loopingIterable ( iterable ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; } public FluentIterable < E > skip ( final long elementsToSkip ) {
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > unmodifiable () {
return of ( IterableUtils . loopingIterable ( iterable ) ) ; } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > skip ( final long elementsToSkip ) {
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; } public FluentIterable < E > unmodifiable () {
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; MST[ReturnValsMutator]MSP[] }
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; } @Override public Iterator < E > iterator () { return iterable . iterator () ; MST[ReturnValsMutator]MSP[] }
return IterableUtils . contains ( iterable , object ) ; MST[ReturnValsMutator]MSP[] } public void forEach ( final Closure < ? super E > closure ) { IterableUtils . forEach ( iterable , closure ) ; } public E get ( final int position ) {
return new FluentIterable <> ( iterable ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; }
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[rv.UOI2Mutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
return IterableUtils . toList ( iterable ) ; } @Override public String toString () { return IterableUtils . toString ( iterable ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
return new FluentIterable <> ( iterable ) ; } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > eval () { return of ( toList () ) ; } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[rv.UOI4Mutator]MSP[] } public FluentIterable < E > loop () {
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; }
return IterableUtils . contains ( iterable , object ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public void forEach ( final Closure < ? super E > closure ) { IterableUtils . forEach ( iterable , closure ) ; } public E get ( final int position ) {
CollectionUtils . addAll ( collection , iterable ) ; } public E [] toArray ( final Class < E > arrayClass ) { return IteratorUtils . toArray ( iterator () , arrayClass ) ; MST[NullReturnValsMutator]MSP[] } public List < E > toList () {
public FluentIterable < E > append ( final Iterable < ? extends E > other ) { return of ( IterableUtils . chainedIterable ( iterable , other ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other ) {
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[rv.ROR5Mutator]MSP[] return ( FluentIterable < T > ) iterable ; }
return IterableUtils . get ( iterable , position ) ; } public int size () { return IterableUtils . size ( iterable ) ; MST[NonVoidMethodCallMutator]MSP[] } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; } public FluentIterable < E > loop () {
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public Iterator < E > iterator () { return iterable . iterator () ; }
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { return ( FluentIterable < T > ) iterable ; MST[ReturnValsMutator]MSP[] }
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; MST[ReturnValsMutator]MSP[] } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; } public boolean contains ( final Object object ) {
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > loop () {
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { return iterable . iterator () ; }
public FluentIterable < E > append ( final Iterable < ? extends E > other ) { return of ( IterableUtils . chainedIterable ( iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other ) {
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; }
CollectionUtils . addAll ( collection , iterable ) ; } public E [] toArray ( final Class < E > arrayClass ) { return IteratorUtils . toArray ( iterator () , arrayClass ) ; MST[NonVoidMethodCallMutator]MSP[] } public List < E > toList () {
return of ( IterableUtils . loopingIterable ( iterable ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; } public FluentIterable < E > skip ( final long elementsToSkip ) {
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > unmodifiable () {
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; } public FluentIterable < E > unmodifiable () {
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; } public boolean contains ( final Object object ) {
return IterableUtils . get ( iterable , position ) ; MST[NonVoidMethodCallMutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
return new FluentIterable <> ( iterable ) ; } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; MST[ReturnValsMutator]MSP[] }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; } public FluentIterable < E > loop () {
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; } public boolean contains ( final Object object ) {
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; } public FluentIterable < E > loop () {
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[rv.CRCR3Mutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[rv.CRCR1Mutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return new FluentIterable <> ( iterable ) ; } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; MST[NullReturnValsMutator]MSP[] }
return IterableUtils . get ( iterable , position ) ; MST[rv.UOI1Mutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
CollectionUtils . addAll ( collection , iterable ) ; MST[NonVoidMethodCallMutator]MSP[] } public E [] toArray ( final Class < E > arrayClass ) { return IteratorUtils . toArray ( iterator () , arrayClass ) ; } public List < E > toList () {
return IterableUtils . contains ( iterable , object ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public void forEach ( final Closure < ? super E > closure ) { IterableUtils . forEach ( iterable , closure ) ; } public E get ( final int position ) {
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[rv.UOI1Mutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[rv.UOI3Mutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[ReturnValsMutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[rv.UOI3Mutator]MSP[] } public FluentIterable < E > loop () {
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; MST[NullReturnValsMutator]MSP[] }
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[rv.UOI1Mutator]MSP[] } public FluentIterable < E > loop () {
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; } @Override public Iterator < E > iterator () { return iterable . iterator () ; MST[NonVoidMethodCallMutator]MSP[] }
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[NegateConditionalsMutator]MSP[] return ( FluentIterable < T > ) iterable ; }
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; } public FluentIterable < E > eval () { return of ( toList () ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > eval () { return of ( toList () ) ; } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[ConstructorCallMutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[rv.CRCR5Mutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IterableUtils . loopingIterable ( iterable ) ) ; } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > skip ( final long elementsToSkip ) {
return of ( IterableUtils . collatedIterable ( iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other , final Comparator < ? super E > comparator ) {
return of ( IterableUtils . collatedIterable ( iterable , other ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other , final Comparator < ? super E > comparator ) {
public boolean anyMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAny ( iterable , predicate ) ; } public boolean isEmpty () { return IterableUtils . isEmpty ( iterable ) ; MST[NonVoidMethodCallMutator]MSP[] } public boolean contains ( final Object object ) {
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; } public FluentIterable < E > eval () { return of ( toList () ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
return IterableUtils . toList ( iterable ) ; } @Override public String toString () { return IterableUtils . toString ( iterable ) ; MST[ReturnValsMutator]MSP[] }
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; }
public FluentIterable < E > zip ( final Iterable < ? extends E > ... others ) { return of ( IterableUtils . zippingIterable ( iterable , others ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Iterator < E > iterator () { return iterable . iterator () ; }
return of ( IterableUtils . loopingIterable ( iterable ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; } public FluentIterable < E > skip ( final long elementsToSkip ) {
public FluentIterable < E > append ( final Iterable < ? extends E > other ) { return of ( IterableUtils . chainedIterable ( iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other ) {
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[rv.ABSMutator]MSP[] } public FluentIterable < E > loop () {
return new FluentIterable <> ( iterable ) ; } public FluentIterable < E > append ( final E ... elements ) { return append ( Arrays . asList ( elements ) ) ; MST[experimental.NakedReceiverMutator]MSP[] }
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > eval () { return of ( toList () ) ; } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
return IterableUtils . toList ( iterable ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public String toString () { return IterableUtils . toString ( iterable ) ; }
return IterableUtils . contains ( iterable , object ) ; } public void forEach ( final Closure < ? super E > closure ) { IterableUtils . forEach ( iterable , closure ) ; MST[VoidMethodCallMutator]MSP[] } public E get ( final int position ) {
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > loop () {
return IterableUtils . get ( iterable , position ) ; MST[rv.UOI3Mutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; } public FluentIterable < E > loop () {
return of ( IterableUtils . loopingIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; } public FluentIterable < E > skip ( final long elementsToSkip ) {
return IterableUtils . get ( iterable , position ) ; MST[rv.UOI2Mutator]MSP[] } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[NullReturnValsMutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
return of ( IterableUtils . collatedIterable ( comparator , iterable , other ) ) ; MST[ReturnValsMutator]MSP[] } public FluentIterable < E > eval () { return of ( toList () ) ; } public FluentIterable < E > filter ( final Predicate < ? super E > predicate ) {
public FluentIterable < E > append ( final Iterable < ? extends E > other ) { return of ( IterableUtils . chainedIterable ( iterable , other ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other ) {
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[rv.UOI2Mutator]MSP[] } public FluentIterable < E > loop () {
return IterableUtils . get ( iterable , position ) ; } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[]
return of ( IterableUtils . unmodifiableIterable ( iterable ) ) ; } public FluentIterable < E > zip ( final Iterable < ? extends E > other ) { return of ( IterableUtils . zippingIterable ( iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return IterableUtils . get ( iterable , position ) ; } public int size () { return IterableUtils . size ( iterable ) ; MST[ReturnValsMutator]MSP[] } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
public Enumeration < E > asEnumeration () { return IteratorUtils . asEnumeration ( iterator () ) ; MST[ReturnValsMutator]MSP[] } public boolean allMatch ( final Predicate < ? super E > predicate ) { return IterableUtils . matchesAll ( iterable , predicate ) ; }
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[NullReturnValsMutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > unmodifiable () {
return IterableUtils . get ( iterable , position ) ; } public int size () { return IterableUtils . size ( iterable ) ; } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[]
return of ( IterableUtils . transformedIterable ( iterable , transformer ) ) ; } public FluentIterable < E > unique () { return of ( IterableUtils . uniqueIterable ( iterable ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > unmodifiable () {
return of ( IterableUtils . skippingIterable ( iterable , elementsToSkip ) ) ; MST[rv.UOI4Mutator]MSP[] } public < O > FluentIterable < O > transform ( final Transformer < ? super E , ? extends O > transformer ) {
return IterableUtils . get ( iterable , position ) ; } public int size () { return IterableUtils . size ( iterable ) ; MST[PrimitiveReturnsMutator]MSP[] } public void copyInto ( final Collection < ? super E > collection ) { Objects . requireNonNull ( collection , lr_1 ) ;
return of ( IteratorUtils . asIterable ( new SingletonIterator <> ( singleton , false ) ) ) ; MST[rv.CRCR6Mutator]MSP[] } public static < T > FluentIterable < T > of ( final T ... elements ) { return of ( Arrays . asList ( elements ) ) ; }
public static < T > FluentIterable < T > of ( final Iterable < T > iterable ) { IterableUtils . checkNotNull ( iterable ) ; if ( iterable instanceof FluentIterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ( FluentIterable < T > ) iterable ; }
return of ( IterableUtils . loopingIterable ( iterable ) ) ; } public FluentIterable < E > reverse () { return of ( IterableUtils . reversedIterable ( iterable ) ) ; MST[NullReturnValsMutator]MSP[] } public FluentIterable < E > skip ( final long elementsToSkip ) {
return of ( IterableUtils . filteredIterable ( iterable , predicate ) ) ; } public FluentIterable < E > limit ( final long maxSize ) { return of ( IterableUtils . boundedIterable ( iterable , maxSize ) ) ; MST[ArgumentPropagationMutator]MSP[] } public FluentIterable < E > loop () {
return of ( IterableUtils . collatedIterable ( iterable , other ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public FluentIterable < E > collate ( final Iterable < ? extends E > other , final Comparator < ? super E > comparator ) {
