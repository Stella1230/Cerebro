@Override MST[NegateConditionalsMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[RemoveConditionalMutator_ORDER_IF]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[ConstructorCallMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
return Arrays . stream ( values ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR1Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[NonVoidMethodCallMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; MST[NonVoidMethodCallMutator]MSP[] } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[InlineConstantMutator]MSP[] }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR5Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[ArgumentPropagationMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR6Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR4Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR2Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
public int size () { return values . length ; MST[ReturnValsMutator]MSP[] }
@Override MST[NegateConditionalsMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[NonVoidMethodCallMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[RemoveConditionalMutator_ORDER_IF]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR6Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[InlineConstantMutator]MSP[] }
@Override MST[rv.CRCR4Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[InlineConstantMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR3Mutator]MSP[] }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[ReturnValsMutator]MSP[] }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[InlineConstantMutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.ROR1Mutator]MSP[] }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR1Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.ROR5Mutator]MSP[] }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.ROR4Mutator]MSP[] }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR5Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR4Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.ROR3Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[InlineConstantMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[NegateConditionalsMutator]MSP[] }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR3Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; MST[NullReturnValsMutator]MSP[] } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR6Mutator]MSP[] }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR6Mutator]MSP[] }
@Override MST[rv.ROR3Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[NonVoidMethodCallMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR2Mutator]MSP[] }
@Override MST[rv.CRCR3Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR3Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR1Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR5Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[NonVoidMethodCallMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; MST[ReturnValsMutator]MSP[] } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; MST[ReturnValsMutator]MSP[] } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[InlineConstantMutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[NonVoidMethodCallMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[InlineConstantMutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.ROR4Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
public int size () { return values . length ; MST[PrimitiveReturnsMutator]MSP[] }
@Override MST[rv.ROR2Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[VoidMethodCallMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.ROR2Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; MST[NullReturnValsMutator]MSP[] } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; }
@Override MST[rv.ROR4Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; MST[ReturnValsMutator]MSP[] } @Override public boolean isEmpty () { return values . length == 0 ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR3Mutator]MSP[] }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR5Mutator]MSP[] }
@Override MST[ConditionalsBoundaryMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR1Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR2Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[ConditionalsBoundaryMutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.ROR5Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR1Mutator]MSP[] }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.CRCR5Mutator]MSP[] }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; MST[ArgumentPropagationMutator]MSP[] }
return Arrays . stream ( values ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR3Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[rv.ROR2Mutator]MSP[] }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR6Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR3Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR2Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR5Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( MST[rv.CRCR6Mutator]MSP[] String . format ( lr_1 , shape , this . shape ) ) ; }
@Override public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; MST[ConstructorCallMutator]MSP[] }
@Override MST[rv.ROR1Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.ROR5Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.ROR1Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR6Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
@Override MST[rv.CRCR5Mutator]MSP[] public OfInt getBits ( final Shape shape ) { if ( ! this . shape . equals ( shape ) ) { throw new IllegalArgumentException ( String . format ( lr_1 , shape , this . shape ) ) ; }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; } @Override public boolean isEmpty () { return values . length == 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
return Arrays . stream ( values ) . iterator () ; } @Override public HashFunctionIdentity getHashFunctionIdentity () { return shape . getHashFunctionIdentity () ; } public Shape getShape () { return shape ; MST[NullReturnValsMutator]MSP[] } @Override public boolean isEmpty () { return values . length == 0 ; }
