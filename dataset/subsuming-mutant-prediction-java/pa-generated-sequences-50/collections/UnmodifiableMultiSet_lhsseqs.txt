public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
return UnmodifiableIterator . <E > unmodifiableIterator ( decorated () . iterator () ) ; } @Override public boolean add ( final E object ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) {
public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
} return new UnmodifiableMultiSet <> ( multiset ) ; MST[ConstructorCallMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; out . writeObject ( decorated () ) ; } @SuppressWarnings ( lr_1 )
public static < E > MultiSet < E > unmodifiableMultiSet ( final MultiSet < ? extends E > multiset ) { if ( multiset instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] @SuppressWarnings ( lr_1 ) final MultiSet < E > tmpMultiSet = ( MultiSet < E > ) multiset ; return tmpMultiSet ;
} return new UnmodifiableMultiSet <> ( multiset ) ; MST[NullReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; out . writeObject ( decorated () ) ; } @SuppressWarnings ( lr_1 )
} return new UnmodifiableMultiSet <> ( multiset ) ; MST[ReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; out . writeObject ( decorated () ) ; } @SuppressWarnings ( lr_1 )
public int remove ( final Object object , final int count ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public Set < E > uniqueSet () { final Set < E > set = decorated () . uniqueSet () ; return UnmodifiableSet . unmodifiableSet ( set ) ; }
