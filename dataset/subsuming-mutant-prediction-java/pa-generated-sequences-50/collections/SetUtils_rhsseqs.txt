if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[rv.ROR5Mutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[rv.ROR3Mutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > () ) ; } public static < E > Set < E > orderedSet ( final Set < E > set ) { return ListOrderedSet . listOrderedSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; MST[ReturnValsMutator]MSP[N] } @Override
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < E > Set < E > synchronizedSet ( final Set < E > set ) { return Collections . synchronizedSet ( set ) ; MST[EmptyObjectReturnValsMutator]MSP[N] } public static < E > SortedSet < E > synchronizedSortedSet ( final SortedSet < E > set ) {
if ( set == null ) { return 0 ; } int hashCode = 0 ; MST[InlineConstantMutator]MSP[S] for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; MST[NullReturnValsMutator]MSP[S] } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
if ( set == null ) { return 0 ; MST[rv.CRCR1Mutator]MSP[N] } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { MST[rv.ROR5Mutator]MSP[N] return true ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[rv.ROR1Mutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set == null ) { return 0 ; MST[ReturnValsMutator]MSP[N] } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override MST[ReturnValsMutator]MSP[N] public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
if ( set == null ) { return 0 ; MST[rv.CRCR3Mutator]MSP[N] } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override
if ( set == null ) { return 0 ; MST[rv.CRCR5Mutator]MSP[N] } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; MST[ReturnValsMutator]MSP[N] } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; MST[rv.CRCR1Mutator]MSP[N] } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
return UnmodifiableSortedSet . unmodifiableSortedSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[S] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; MST[rv.CRCR5Mutator]MSP[N] } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < E > Set < E > synchronizedSet ( final Set < E > set ) { return Collections . synchronizedSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < E > SortedSet < E > synchronizedSortedSet ( final SortedSet < E > set ) {
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[ReturnValsMutator]MSP[N] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; MST[rv.CRCR3Mutator]MSP[N] } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
return UnmodifiableSortedSet . unmodifiableSortedSet ( set ) ; MST[NullReturnValsMutator]MSP[S] }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
if ( set == null ) { MST[rv.ROR5Mutator]MSP[N] return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; MST[ReturnValsMutator]MSP[N] }
return Collections . <E > emptySet () ; MST[ReturnValsMutator]MSP[N] } @SuppressWarnings ( lr_1 ) public static < E > SortedSet < E > emptySortedSet () { return EMPTY_SORTED_SET ; } public static < T > int hashCodeForSet ( final Collection < T > set ) {
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return true ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[N] } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < E > Set < E > predicatedSet ( final Set < E > set , final Predicate < ? super E > predicate ) { return PredicatedSet . predicatedSet ( set , predicate ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { MST[rv.ROR5Mutator]MSP[N] return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; }
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; MST[ArgumentPropagationMutator]MSP[S] }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; MST[rv.UOI4Mutator]MSP[S] }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override MST[NullReturnValsMutator]MSP[N]
return TransformedSet . transformingSet ( set , transformer ) ; MST[ReturnValsMutator]MSP[S] } public static < E > SortedSet < E > transformedSortedSet ( final SortedSet < E > set , final Transformer < ? super E , ? extends E > transformer ) {
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; MST[NonVoidMethodCallMutator]MSP[N] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; } return set1 . containsAll ( set2 ) ; MST[ReturnValsMutator]MSP[N] } public static < E > Set < E > newIdentityHashSet () {
public static < E > Set < E > unmodifiableSet ( final Set < ? extends E > set ) { return UnmodifiableSet . unmodifiableSet ( set ) ; MST[ArgumentPropagationMutator]MSP[N] } public static < E > SortedSet < E > unmodifiableSortedSet ( final SortedSet < E > set ) {
public static < E > Set < E > unmodifiableSet ( final Set < ? extends E > set ) { return UnmodifiableSet . unmodifiableSet ( set ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < E > SortedSet < E > unmodifiableSortedSet ( final SortedSet < E > set ) {
if ( set == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[NegateConditionalsMutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { return null ; MST[ReturnValsMutator]MSP[S] } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.UOI3Mutator]MSP[S] } } return hashCode ; }
public static < E > Set < E > predicatedSet ( final Set < E > set , final Predicate < ? super E > predicate ) { return PredicatedSet . predicatedSet ( set , predicate ) ; MST[ReturnValsMutator]MSP[N] }
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override MST[ConstructorCallMutator]MSP[N]
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override MST[ConstructorCallMutator]MSP[N] public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override MST[ReturnValsMutator]MSP[N]
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return true ; }
public static < E > SortedSet < E > predicatedSortedSet ( final SortedSet < E > set , final Predicate < ? super E > predicate ) { return PredicatedSortedSet . predicatedSortedSet ( set , predicate ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override MST[ConstructorCallMutator]MSP[N]
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[rv.CRCR3Mutator]MSP[N] }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; MST[rv.ABSMutator]MSP[S] }
return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > () ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < E > Set < E > orderedSet ( final Set < E > set ) { return ListOrderedSet . listOrderedSet ( set ) ; }
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; MST[NonVoidMethodCallMutator]MSP[N] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[NegateConditionalsMutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[NonVoidMethodCallMutator]MSP[S] } } return hashCode ; }
public static < T > Set < T > emptyIfNull ( final Set < T > set ) { return set == null ? Collections . <T > emptySet () : set ; MST[ReturnValsMutator]MSP[N] } public static < E > Set < E > emptySet () {
public static < E > Set < E > synchronizedSet ( final Set < E > set ) { return Collections . synchronizedSet ( set ) ; MST[ReturnValsMutator]MSP[S] } public static < E > SortedSet < E > synchronizedSortedSet ( final SortedSet < E > set ) {
public static < E > Set < E > unmodifiableSet ( final Set < ? extends E > set ) { return UnmodifiableSet . unmodifiableSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < E > SortedSet < E > unmodifiableSortedSet ( final SortedSet < E > set ) {
public static < E > SortedSet < E > predicatedNavigableSet ( final NavigableSet < E > set , final Predicate < ? super E > predicate ) { return PredicatedNavigableSet . predicatedNavigableSet ( set , predicate ) ; MST[ReturnValsMutator]MSP[S] }
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; }
return setA . size () + bMinusA . size () ; } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; MST[NullReturnValsMutator]MSP[S] }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.UOI2Mutator]MSP[N] } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.AOR3Mutator]MSP[S] } } return hashCode ; }
public static < T > Set < T > emptyIfNull ( final Set < T > set ) { return set == null ? Collections . <T > emptySet () : set ; MST[NonVoidMethodCallMutator]MSP[N] } public static < E > Set < E > emptySet () {
return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > () ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < E > Set < E > orderedSet ( final Set < E > set ) { return ListOrderedSet . listOrderedSet ( set ) ; }
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { MST[NegateConditionalsMutator]MSP[N] return true ; }
return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > () ) ; MST[ConstructorCallMutator]MSP[N] } public static < E > Set < E > orderedSet ( final Set < E > set ) { return ListOrderedSet . listOrderedSet ( set ) ; }
public static < E > Set < E > synchronizedSet ( final Set < E > set ) { return Collections . synchronizedSet ( set ) ; MST[ArgumentPropagationMutator]MSP[N] } public static < E > SortedSet < E > synchronizedSortedSet ( final SortedSet < E > set ) {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] hashCode += obj . hashCode () ; } } return hashCode ; }
return Collections . <E > emptySet () ; } @SuppressWarnings ( lr_1 ) public static < E > SortedSet < E > emptySortedSet () { return EMPTY_SORTED_SET ; MST[NullReturnValsMutator]MSP[S] } public static < T > int hashCodeForSet ( final Collection < T > set ) {
return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > () ) ; } public static < E > Set < E > orderedSet ( final Set < E > set ) { return ListOrderedSet . listOrderedSet ( set ) ; MST[EmptyObjectReturnValsMutator]MSP[N] }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; MST[NullReturnValsMutator]MSP[N] } @Override
return Collections . <E > emptySet () ; MST[NonVoidMethodCallMutator]MSP[N] } @SuppressWarnings ( lr_1 ) public static < E > SortedSet < E > emptySortedSet () { return EMPTY_SORTED_SET ; } public static < T > int hashCodeForSet ( final Collection < T > set ) {
if ( set == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override MST[NullReturnValsMutator]MSP[N] public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
if ( set == null ) { return 0 ; MST[InlineConstantMutator]MSP[N] } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; MST[ReturnValsMutator]MSP[S] } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; MST[rv.UOI1Mutator]MSP[N] }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] hashCode += obj . hashCode () ; } } return hashCode ; }
return Collections . synchronizedSortedSet ( set ) ; MST[ArgumentPropagationMutator]MSP[N] } public static < E > SortedSet < E > transformedNavigableSet ( final NavigableSet < E > set , final Transformer < ? super E , ? extends E > transformer ) {
return setA . size () + bMinusA . size () ; } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; MST[ReturnValsMutator]MSP[S] }
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; }
return Collections . <E > emptySet () ; } @SuppressWarnings ( lr_1 ) public static < E > SortedSet < E > emptySortedSet () { return EMPTY_SORTED_SET ; MST[ReturnValsMutator]MSP[S] } public static < T > int hashCodeForSet ( final Collection < T > set ) {
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { MST[rv.ROR5Mutator]MSP[N] return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; } return set1 . containsAll ( set2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < E > Set < E > newIdentityHashSet () {
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[N] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[rv.ROR4Mutator]MSP[S] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.AOD2Mutator]MSP[S] } } return hashCode ; }
public static < E > SortedSet < E > predicatedNavigableSet ( final NavigableSet < E > set , final Predicate < ? super E > predicate ) { return PredicatedNavigableSet . predicatedNavigableSet ( set , predicate ) ; MST[NonVoidMethodCallMutator]MSP[S] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < T > Set < T > emptyIfNull ( final Set < T > set ) { return set == null ? Collections . <T > emptySet () : set ; MST[NegateConditionalsMutator]MSP[N] } public static < E > Set < E > emptySet () {
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[rv.ROR2Mutator]MSP[S] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[NegateConditionalsMutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set == null ) { return 0 ; MST[rv.CRCR6Mutator]MSP[N] } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
return TransformedNavigableSet . transformingNavigableSet ( set , transformer ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < E > Set < E > transformedSet ( final Set < E > set , final Transformer < ? super E , ? extends E > transformer ) {
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; } return set1 . containsAll ( set2 ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } public static < E > Set < E > newIdentityHashSet () {
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[rv.CRCR4Mutator]MSP[N] }
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[rv.CRCR6Mutator]MSP[N] }
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[rv.CRCR2Mutator]MSP[N] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; MST[InlineConstantMutator]MSP[N] } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override MST[ConstructorCallMutator]MSP[N]
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[rv.ROR5Mutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
return UnmodifiableSortedSet . unmodifiableSortedSet ( set ) ; MST[ArgumentPropagationMutator]MSP[N] }
return Collections . synchronizedSortedSet ( set ) ; MST[ReturnValsMutator]MSP[S] } public static < E > SortedSet < E > transformedNavigableSet ( final NavigableSet < E > set , final Transformer < ? super E , ? extends E > transformer ) {
return TransformedSet . transformingSet ( set , transformer ) ; MST[EmptyObjectReturnValsMutator]MSP[N] } public static < E > SortedSet < E > transformedSortedSet ( final SortedSet < E > set , final Transformer < ? super E , ? extends E > transformer ) {
public static < E > SortedSet < E > predicatedNavigableSet ( final NavigableSet < E > set , final Predicate < ? super E > predicate ) { return PredicatedNavigableSet . predicatedNavigableSet ( set , predicate ) ; MST[NullReturnValsMutator]MSP[S] }
if ( set == null ) { return 0 ; } int hashCode = 0 ; MST[rv.CRCR5Mutator]MSP[S] for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; MST[rv.CRCR1Mutator]MSP[S] for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; MST[rv.UOI3Mutator]MSP[S] }
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override MST[ReturnValsMutator]MSP[N]
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { MST[NegateConditionalsMutator]MSP[N] hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; MST[PrimitiveReturnsMutator]MSP[S] }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override MST[ReturnValsMutator]MSP[N]
public static < T > Set < T > emptyIfNull ( final Set < T > set ) { return set == null ? Collections . <T > emptySet () : set ; MST[rv.ROR5Mutator]MSP[N] } public static < E > Set < E > emptySet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.AOR2Mutator]MSP[S] } } return hashCode ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; MST[rv.CRCR6Mutator]MSP[N] } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; MST[ReturnValsMutator]MSP[S] }
return setA . size () + bMinusA . size () ; } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; MST[ArgumentPropagationMutator]MSP[N] }
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[InlineConstantMutator]MSP[N] }
return setA . size () + bMinusA . size () ; } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[S] }
return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > () ) ; } public static < E > Set < E > orderedSet ( final Set < E > set ) { return ListOrderedSet . listOrderedSet ( set ) ; MST[ReturnValsMutator]MSP[S] }
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { MST[NegateConditionalsMutator]MSP[N] return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override MST[NullReturnValsMutator]MSP[N]
if ( set == null ) { MST[NegateConditionalsMutator]MSP[N] return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.ABSMutator]MSP[S] } } return hashCode ; }
return Collections . synchronizedSortedSet ( set ) ; MST[NullReturnValsMutator]MSP[S] } public static < E > SortedSet < E > transformedNavigableSet ( final NavigableSet < E > set , final Transformer < ? super E , ? extends E > transformer ) {
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { return null ; MST[EmptyObjectReturnValsMutator]MSP[S] } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[MathMutator]MSP[S] } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.AOR1Mutator]MSP[S] } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { MST[rv.ROR5Mutator]MSP[N] hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.UOI4Mutator]MSP[S] } } return hashCode ; }
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override MST[NullReturnValsMutator]MSP[N]
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
return TransformedNavigableSet . transformingNavigableSet ( set , transformer ) ; MST[ReturnValsMutator]MSP[S] } public static < E > Set < E > transformedSet ( final Set < E > set , final Transformer < ? super E , ? extends E > transformer ) {
public static < E > Set < E > unmodifiableSet ( final E ... items ) { if ( items == null ) { return null ; } return UnmodifiableSet . unmodifiableSet ( hashSet ( items ) ) ; MST[EmptyObjectReturnValsMutator]MSP[N] }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; MST[ReturnValsMutator]MSP[S] } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
public static < T > Set < T > emptyIfNull ( final Set < T > set ) { return set == null ? Collections . <T > emptySet () : set ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } public static < E > Set < E > emptySet () {
return Collections . synchronizedSortedSet ( set ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < E > SortedSet < E > transformedNavigableSet ( final NavigableSet < E > set , final Transformer < ? super E , ? extends E > transformer ) {
return UnmodifiableSortedSet . unmodifiableSortedSet ( set ) ; MST[ReturnValsMutator]MSP[S] }
public static < E > SortedSet < E > predicatedSortedSet ( final SortedSet < E > set , final Predicate < ? super E > predicate ) { return PredicatedSortedSet . predicatedSortedSet ( set , predicate ) ; MST[NullReturnValsMutator]MSP[S] }
if ( set == null ) { return 0 ; } int hashCode = 0 ; MST[rv.CRCR3Mutator]MSP[S] for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.AOR4Mutator]MSP[S] } } return hashCode ; }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { MST[NegateConditionalsMutator]MSP[N] return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override
if ( set == null ) { return 0 ; } int hashCode = 0 ; MST[rv.CRCR6Mutator]MSP[S] for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; }
public static < T > Set < T > emptyIfNull ( final Set < T > set ) { return set == null ? Collections . <T > emptySet () : set ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } public static < E > Set < E > emptySet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; } } return hashCode ; MST[rv.UOI2Mutator]MSP[N] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[rv.ROR5Mutator]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
return TransformedSet . transformingSet ( set , transformer ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < E > SortedSet < E > transformedSortedSet ( final SortedSet < E > set , final Transformer < ? super E , ? extends E > transformer ) {
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; MST[ConstructorCallMutator]MSP[N] } @Override
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { return false ; } return set1 . containsAll ( set2 ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } public static < E > Set < E > newIdentityHashSet () {
public static < T > Set < T > emptyIfNull ( final Set < T > set ) { return set == null ? Collections . <T > emptySet () : set ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < E > Set < E > emptySet () {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.UOI1Mutator]MSP[N] } } return hashCode ; }
public static < E > SortedSet < E > predicatedSortedSet ( final SortedSet < E > set , final Predicate < ? super E > predicate ) { return PredicatedSortedSet . predicatedSortedSet ( set , predicate ) ; MST[ReturnValsMutator]MSP[S] }
if ( set1 == null || set2 == null || set1 . size () != set2 . size () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return false ; } return set1 . containsAll ( set2 ) ; } public static < E > Set < E > newIdentityHashSet () {
public static < E > Set < E > unmodifiableSet ( final Set < ? extends E > set ) { return UnmodifiableSet . unmodifiableSet ( set ) ; MST[ReturnValsMutator]MSP[N] } public static < E > SortedSet < E > unmodifiableSortedSet ( final SortedSet < E > set ) {
if ( set == null ) { return 0 ; } int hashCode = 0 ; for ( final T obj : set ) { if ( obj != null ) { hashCode += obj . hashCode () ; MST[rv.AOD1Mutator]MSP[S] } } return hashCode ; }
public static < E > Set < E > predicatedSet ( final Set < E > set , final Predicate < ? super E > predicate ) { return PredicatedSet . predicatedSet ( set , predicate ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public static boolean isEqualSet ( final Collection < ? > set1 , final Collection < ? > set2 ) { if ( set1 == set2 ) { return true ; MST[rv.CRCR5Mutator]MSP[N] }
return TransformedNavigableSet . transformingNavigableSet ( set , transformer ) ; MST[NullReturnValsMutator]MSP[S] } public static < E > Set < E > transformedSet ( final Set < E > set , final Transformer < ? super E , ? extends E > transformer ) {
return Collections . newSetFromMap ( new IdentityHashMap < E , Boolean > () ) ; MST[ReturnValsMutator]MSP[N] } public static < E > Set < E > orderedSet ( final Set < E > set ) { return ListOrderedSet . listOrderedSet ( set ) ; }
return setA . size () + bMinusA . size () ; MST[NonVoidMethodCallMutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[ReturnValsMutator]MSP[N] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[S] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N] public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[NegateConditionalsMutator]MSP[N] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR5Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR6Mutator]MSP[S] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR4Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR3Mutator]MSP[N] } @Override public int size () {
return setA . size () + bMinusA . size () ; MST[ReturnValsMutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[NegateConditionalsMutator]MSP[S] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR3Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR5Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR6Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR2Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR4Mutator]MSP[N] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR2Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR3Mutator]MSP[S] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR5Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.CRCR1Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; MST[ReturnValsMutator]MSP[N] } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR5Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR3Mutator]MSP[S] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Override public Iterator < E > createIterator () {
return setA . size () + bMinusA . size () ; MST[rv.AOR1Mutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR1Mutator]MSP[N] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return setA . size () + bMinusA . size () ; MST[rv.AOR3Mutator]MSP[N] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR1Mutator]MSP[N] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[NegateConditionalsMutator]MSP[N] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR5Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR3Mutator]MSP[S] } @Override public int size () {
return setA . size () + bMinusA . size () ; MST[PrimitiveReturnsMutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[InlineConstantMutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR3Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N] public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[InlineConstantMutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR3Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public int size () {
return setA . size () + bMinusA . size () ; MST[NonVoidMethodCallMutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR6Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N] public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR6Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; MST[ArgumentPropagationMutator]MSP[N] } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } @Override public int size () {
return setA . size () + bMinusA . size () ; MST[rv.AOD2Mutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return setA . size () + bMinusA . size () ; MST[rv.AOD1Mutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR4Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR5Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR2Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.ROR3Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR4Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR2Mutator]MSP[N] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[ReturnValsMutator]MSP[N] } @Override public Iterator < E > createIterator () {
return setA . size () + bMinusA . size () ; MST[rv.AOR2Mutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public int size () {
return setA . size () + bMinusA . size () ; MST[MathMutator]MSP[S] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[InlineConstantMutator]MSP[S] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Override public Iterator < E > createIterator () {
return setA . size () + bMinusA . size () ; MST[rv.AOR4Mutator]MSP[N] } public static < E > SortedSet < E > unmodifiableNavigableSet ( final NavigableSet < E > set ) { return UnmodifiableNavigableSet . unmodifiableNavigableSet ( set ) ; }
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[NegateConditionalsMutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[InlineConstantMutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR4Mutator]MSP[S] } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[rv.ROR2Mutator]MSP[N] } @Override public int size () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR2Mutator]MSP[S] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[rv.CRCR4Mutator]MSP[N] } @Override public Iterator < E > createIterator () {
return TransformedSortedSet . transformingSortedSet ( set , transformer ) ; } @Override public boolean contains ( final Object o ) { return setA . contains ( o ) || setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public Iterator < E > createIterator () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; MST[NullReturnValsMutator]MSP[N] } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; } @Override public int size () {
return IteratorUtils . chainedIterator ( setA . iterator () , bMinusA . iterator () ) ; } @Override public boolean isEmpty () { return setA . isEmpty () && setB . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public int size () {
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; MST[ReturnValsMutator]MSP[N] }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[ReturnValsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[NegateConditionalsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR3Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR2Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[InlineConstantMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; MST[NullReturnValsMutator]MSP[N] }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR3Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR4Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR6Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.CRCR6Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[InlineConstantMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR2Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; MST[ArgumentPropagationMutator]MSP[S] }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR4Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[NegateConditionalsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR3Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR3Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR4Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && setB . contains ( o ) ; MST[rv.ROR2Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , containedInB ) ; }
public static < E > HashSet < E > hashSet ( final E ... items ) { if ( items == null ) { return null ; } return new HashSet <> ( Arrays . asList ( items ) ) ; } @Override MST[experimental.MemberVariableMutator]MSP[S]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; MST[BooleanFalseReturnValsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ;
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ;
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N]
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ; MST[ArgumentPropagationMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[rv.AOD1Mutator]MSP[S] }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[rv.AOD2Mutator]MSP[S] }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR4Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[rv.AOR2Mutator]MSP[S] }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[NegateConditionalsMutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[rv.AOR4Mutator]MSP[N] }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR2Mutator]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[MathMutator]MSP[S] }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[InlineConstantMutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR2Mutator]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR4Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; MST[MathMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ;
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; MST[ReturnValsMutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ;
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ; MST[NullReturnValsMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[NonVoidMethodCallMutator]MSP[S] }
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ;
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[NonVoidMethodCallMutator]MSP[S] }
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ;
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[ReturnValsMutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N]
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.CRCR6Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.CRCR4Mutator]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.CRCR5Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[ReturnValsMutator]MSP[N] }
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[NegateConditionalsMutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.CRCR2Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.CRCR3Mutator]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[rv.AOR1Mutator]MSP[S] }
public boolean contains ( final Object o ) { return setA . contains ( o ) ^ setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . chainedIterator ( aMinusB . iterator () , bMinusA . iterator () ) ; MST[ReturnValsMutator]MSP[N]
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR5Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[rv.AOR3Mutator]MSP[N] }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR1Mutator]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; } @Override public int size () { return aMinusB . size () + bMinusA . size () ; MST[PrimitiveReturnsMutator]MSP[S] }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR3Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR1Mutator]MSP[N] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR3Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
} @Override public boolean isEmpty () { return aMinusB . isEmpty () && bMinusA . isEmpty () ; MST[rv.ROR5Mutator]MSP[S] } @Override public int size () { return aMinusB . size () + bMinusA . size () ; }
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; MST[ReturnValsMutator]MSP[N] } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[ReturnValsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR3Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR6Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR3Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR6Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR2Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.CRCR4Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; MST[NullReturnValsMutator]MSP[N] } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[InlineConstantMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[InlineConstantMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR1Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR2Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[NegateConditionalsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; MST[ArgumentPropagationMutator]MSP[N] } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[NegateConditionalsMutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR4Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR3Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR1Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override MST[experimental.MemberVariableMutator]MSP[S]
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR2Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR5Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR4Mutator]MSP[S] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public boolean contains ( final Object o ) { return setA . contains ( o ) && ! setB . contains ( o ) ; MST[rv.ROR3Mutator]MSP[N] } @Override public Iterator < E > createIterator () { return IteratorUtils . filteredIterator ( setA . iterator () , notContainedInB ) ; } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; MST[ReturnValsMutator]MSP[S] } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; MST[ReturnValsMutator]MSP[N] } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override
public < S extends Set < E > > void copyInto ( final S set ) { CollectionUtils . addAll ( set , this ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( createIterator () ) ; MST[ReturnValsMutator]MSP[N] } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; MST[NonVoidMethodCallMutator]MSP[N] copyInto ( set ) ; return set ; } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; MST[PrimitiveReturnsMutator]MSP[N] } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; MST[EmptyObjectReturnValsMutator]MSP[N] } @Override
public < S extends Set < E > > void copyInto ( final S set ) { CollectionUtils . addAll ( set , this ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( createIterator () ) ; } @Override
public < S extends Set < E > > void copyInto ( final S set ) { CollectionUtils . addAll ( set , this ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( createIterator () ) ; MST[NullReturnValsMutator]MSP[N] } @Override
public < S extends Set < E > > void copyInto ( final S set ) { CollectionUtils . addAll ( set , this ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( createIterator () ) ; MST[ArgumentPropagationMutator]MSP[N] } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override
public < S extends Set < E > > void copyInto ( final S set ) { CollectionUtils . addAll ( set , this ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( createIterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; return set ; } @Override
public < S extends Set < E > > void copyInto ( final S set ) { CollectionUtils . addAll ( set , this ) ; } @Override public Iterator < E > iterator () { return IteratorUtils . unmodifiableIterator ( createIterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; MST[ConstructorCallMutator]MSP[S] copyInto ( set ) ; return set ; } @Override
public int size () { return IteratorUtils . size ( iterator () ) ; } public Set < E > toSet () { final Set < E > set = new HashSet <> ( size () ) ; copyInto ( set ) ; MST[VoidMethodCallMutator]MSP[N] return set ; } @Override
