return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[ReturnValsMutator]MSP[N]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR4Mutator]MSP[N] } else if ( object instanceof Iterator < ? > ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.ROR3Mutator]MSP[S]
if ( a . size () != b . size () ) { return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ; MST[ConstructorCallMutator]MSP[S]
} else if ( object instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterator < T > iterator , final C closure ) { return closure != null ? IteratorUtils . forEachButLast ( iterator , closure ) : null ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR6Mutator]MSP[N] }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.UOI4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR5Mutator]MSP[N]
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR5Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return select ( inputCollection , predicate , answer ) ; MST[NonVoidMethodCallMutator]MSP[N] }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[ReturnValsMutator]MSP[N] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.ROR4Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR1Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.ABSMutator]MSP[S]
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { list . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[S] } }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] return false ; } } return true ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; MST[ConstructorCallMutator]MSP[S] } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[rv.UOI3Mutator]MSP[N] }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[ConstructorCallMutator]MSP[N] } } @Deprecated
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { return false ; MST[ReturnValsMutator]MSP[S] }
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[rv.ROR4Mutator]MSP[S]
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR6Mutator]MSP[S] } else { try {
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[rv.UOI3Mutator]MSP[N] } public static Object get ( final Object object , final int index ) {
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; MST[ConstructorCallMutator]MSP[N] if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[ConditionalsBoundaryMutator]MSP[N] return false ; } } return true ;
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return select ( inputCollection , predicate , answer ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
int j = array . length - 1 ; MST[rv.AOR2Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; MST[NullReturnValsMutator]MSP[N] final Set < EquatorWrapper < E > > removeSet = collect ( remove , transformer , new HashSet < EquatorWrapper < E > > () ) ;
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[N] } else if ( object instanceof Iterable < ? > ) {
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[N] return object != null && collection . add ( object ) ; }
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return IteratorUtils . toList ( iterator , totalSize ) ; }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[NegateConditionalsMutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.UOI2Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[NegateConditionalsMutator]MSP[N]
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[NegateConditionalsMutator]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[ReturnValsMutator]MSP[N] }
if ( inputCollection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[S] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
if ( inputCollection != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return collect ( inputCollection . iterator () , transformer , outputCollection ) ; } return outputCollection ; }
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[S] result . add ( it . next () ) ; } return result ; }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI3Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; MST[ConstructorCallMutator]MSP[N] if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; }
} return changed ; MST[rv.UOI4Mutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[rv.ROR1Mutator]MSP[N] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[rv.ABSMutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.ROR5Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
iterator . next () ; continue; } count = count - 1 ; MST[rv.UOI4Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ; MST[rv.CRCR3Mutator]MSP[N]
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[BooleanFalseReturnValsMutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[rv.ROR2Mutator]MSP[N] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[rv.UOI1Mutator]MSP[N]
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[rv.ROR1Mutator]MSP[N] total = ( ( Object [] ) object ) . length ;
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI2Mutator]MSP[S]
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.ROR1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
it . set ( transformer . transform ( it . next () ) ) ; MST[ArgumentPropagationMutator]MSP[S] } } else { final Collection < C > resultCollection = collect ( collection , transformer ) ; collection . clear () ; collection . addAll ( resultCollection ) ; } } @Deprecated
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } }
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] count . put ( obj , Integer . valueOf ( 1 ) ) ; } else {
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; final Set < EquatorWrapper < E > > retainSet = collect ( retain , transformer , new HashSet < EquatorWrapper < E > > () ) ; MST[ArgumentPropagationMutator]MSP[N]
return Array . getLength ( object ) == 0 ; MST[rv.ROR2Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
return coll == null || coll . isEmpty () ; MST[NegateConditionalsMutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { return false ; MST[rv.CRCR5Mutator]MSP[S] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[rv.ROR3Mutator]MSP[N] return false ; }
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[N] } } }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR1Mutator]MSP[N] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[ReturnValsMutator]MSP[S] } else if ( object == null ) {
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterator < T > iterator , final C closure ) { return closure != null ? IteratorUtils . forEachButLast ( iterator , closure ) : null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR6Mutator]MSP[N]
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } else { try {
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.OBBN2Mutator]MSP[S] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[NegateConditionalsMutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ; }
return equator . hash ( object ) ; } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; MST[ArgumentPropagationMutator]MSP[N] }
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR3Mutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
final Transformer < ? super E , ? extends E > transformer ) { return TransformedCollection . transformingCollection ( collection , transformer ) ; } public static < E > E extractSingleton ( final Collection < E > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[N]
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[NegateConditionalsMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.UOI3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
return true ; MST[BooleanFalseReturnValsMutator]MSP[S] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[MathMutator]MSP[S] throw new IndexOutOfBoundsException ( lr_16 ) ; }
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR3Mutator]MSP[N]
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.CRCR4Mutator]MSP[N]
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[rv.ABSMutator]MSP[N] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[rv.ROR5Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR3Mutator]MSP[N] }
if ( collection . size () != 1 ) { throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[N] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI1Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[rv.UOI1Mutator]MSP[N]
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI1Mutator]MSP[S] array [ i ] = tmp ; j -- ; i ++ ; }
if ( inputCollection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI4Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[ConstructorCallMutator]MSP[S] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
return true ; MST[rv.CRCR4Mutator]MSP[N] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; MST[EmptyObjectReturnValsMutator]MSP[N] }
} else if ( object instanceof Iterator < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
Objects . requireNonNull ( collection , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[N] if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[rv.ROR5Mutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[NonVoidMethodCallMutator]MSP[N] list . add ( element ) ; } } return list ; }
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Deprecated
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.AOR2Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; MST[ReturnValsMutator]MSP[N] }
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[rv.CRCR6Mutator]MSP[N] }
final Transformer < ? super E , ? extends E > transformer ) { return TransformedCollection . transformingCollection ( collection , transformer ) ; MST[ReturnValsMutator]MSP[S] } public static < E > E extractSingleton ( final Collection < E > collection ) { Objects . requireNonNull ( collection , lr_4 ) ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.UOI1Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR5Mutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[NonVoidMethodCallMutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] changed |= collection . add ( iterator . next () ) ;
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; MST[InlineConstantMutator]MSP[S] while ( enumeration . hasMoreElements () ) {
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[rv.ROR3Mutator]MSP[S] result . add ( it . next () ) ; } return result ; }
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[InlineConstantMutator]MSP[N] } @Deprecated
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR1Mutator]MSP[S] list . add ( element ) ; } } return list ;
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; MST[rv.CRCR3Mutator]MSP[N] while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ;
return IteratorUtils . get ( it , i ) ; MST[ReturnValsMutator]MSP[N] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.ROR2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; MST[NonVoidMethodCallMutator]MSP[S]
} else if ( object instanceof Object [] ) { MST[rv.ROR3Mutator]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[InlineConstantMutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[N] }
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return false ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR4Mutator]MSP[S]
@Deprecated public static < T > T find ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return predicate != null ? IterableUtils . find ( collection , predicate ) : null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Deprecated
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; MST[ReturnValsMutator]MSP[S] } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; final Set < EquatorWrapper < E > > removeSet = collect ( remove , transformer , new HashSet < EquatorWrapper < E > > () ) ; MST[ArgumentPropagationMutator]MSP[N]
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[rv.ROR5Mutator]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[NegateConditionalsMutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[rv.CRCR3Mutator]MSP[N] }
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[NonVoidMethodCallMutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
final Collection < E > result = new ArrayList <> ( count ) ; MST[rv.UOI4Mutator]MSP[N] final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; MST[NonVoidMethodCallMutator]MSP[S] } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( collection instanceof List < ? > ) {
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[rv.AOD1Mutator]MSP[S] } return helper . list () ; }
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.AOR4Mutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[rv.CRCR4Mutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[rv.ROR5Mutator]MSP[N] return false ; } } return true ;
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[NonVoidMethodCallMutator]MSP[N]
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] result . add ( it . next () ) ; } return result ; }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR3Mutator]MSP[S] } else { try {
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[ConstructorCallMutator]MSP[N] return selectRejected ( inputCollection , predicate , answer ) ; }
return coll == null || coll . isEmpty () ; MST[rv.CRCR1Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
if ( collection . size () != 1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
final int i = index ; MST[rv.UOI2Mutator]MSP[N] if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR3Mutator]MSP[N] }
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; MST[rv.CRCR3Mutator]MSP[S] } } return true ;
public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterable < T > collection , final C closure ) { if ( closure != null ) { MST[rv.ROR5Mutator]MSP[N] IterableUtils . forEach ( collection , closure ) ; } return closure ; }
for ( final C element : elements ) { MST[rv.UOI2Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
if ( inputCollection != null ) { return collect ( inputCollection . iterator () , transformer , outputCollection ) ; MST[ReturnValsMutator]MSP[N] } return outputCollection ; }
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[NegateConditionalsMutator]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR2Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
return coll == null || coll . isEmpty () ; MST[rv.CRCR4Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; MST[NonVoidMethodCallMutator]MSP[S] return IteratorUtils . get ( iterator , i ) ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[NonVoidMethodCallMutator]MSP[S] } else { try {
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[rv.UOI2Mutator]MSP[N] }
if ( inputCollection != null ) { return collect ( inputCollection . iterator () , transformer , outputCollection ) ; MST[NonVoidMethodCallMutator]MSP[N] } return outputCollection ; }
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR1Mutator]MSP[N] list . add ( element ) ; } }
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[rv.ROR4Mutator]MSP[N] total = ( ( Object [] ) object ) . length ;
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR2Mutator]MSP[N]
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR2Mutator]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[NonVoidMethodCallMutator]MSP[N] it . remove () ; result = true ; } } } return result ;
int j = array . length - 1 ; MST[rv.CRCR4Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
@Deprecated public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterator < T > iterator , final C closure ) { if ( closure != null ) { IteratorUtils . forEach ( iterator , closure ) ; } return closure ; MST[ReturnValsMutator]MSP[N]
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[InlineConstantMutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[N]
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.UOI2Mutator]MSP[N] startIndex = startIndex - 1 ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[rv.ROR2Mutator]MSP[N] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[rv.ROR4Mutator]MSP[S] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
} else if ( object instanceof Object [] ) { MST[rv.ROR3Mutator]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.ROR1Mutator]MSP[N]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; MST[rv.UOI3Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ; MST[rv.CRCR6Mutator]MSP[N]
return IteratorUtils . get ( iterator , index ) ; MST[NonVoidMethodCallMutator]MSP[N] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; MST[rv.ABSMutator]MSP[N] O lastItem = null ; while ( iterator . hasNext () ) { final O item = iterator . next () ;
for ( final C element : elements ) { MST[rv.ABSMutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[ConstructorCallMutator]MSP[S] return select ( inputCollection , predicate , answer ) ; }
public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterable < T > collection , final C closure ) { if ( closure != null ) { MST[NegateConditionalsMutator]MSP[N] IterableUtils . forEach ( collection , closure ) ; } return closure ; }
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[rv.UOI4Mutator]MSP[S]
for ( final C element : elements ) { MST[rv.UOI3Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
} else if ( object instanceof Iterator < ? > ) { MST[rv.ROR3Mutator]MSP[N] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.ROR3Mutator]MSP[N] } else { try {
} else if ( object instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; final Set < EquatorWrapper < E > > retainSet = MST[ConstructorCallMutator]MSP[N] collect ( retain , transformer , new HashSet < EquatorWrapper < E > > () ) ;
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return collect ( inputCollection , transformer , answer ) ; MST[ReturnValsMutator]MSP[N] }
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { list . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[N] } } return list ;
public static int size ( final Object object ) { if ( object == null ) { return 0 ; MST[rv.CRCR1Mutator]MSP[S] } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[rv.ROR1Mutator]MSP[N]
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] list . add ( element ) ; } } return list ; }
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[rv.ROR2Mutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR4Mutator]MSP[S]
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[ConditionalsBoundaryMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; MST[rv.CRCR2Mutator]MSP[N] break; } } if ( ! foundCurrentElement ) { return false ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[NonVoidMethodCallMutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[rv.ROR2Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.ROR5Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
return true ; } } } return false ; MST[rv.CRCR1Mutator]MSP[N] } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
if ( inputIterator != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR6Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR3Mutator]MSP[N] }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] it . remove () ; result = true ; } } } return result ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; MST[IncrementsMutator]MSP[N] }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR6Mutator]MSP[S] }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.ROR1Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[InlineConstantMutator]MSP[N] }
} else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR2Mutator]MSP[N] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[ReturnValsMutator]MSP[N] } public static Object get ( final Object object , final int index ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI3Mutator]MSP[N]
iterator . next () ; continue; } count = count - 1 ; result . add ( iterator . next () ) ; iterator . remove () ; } return result ; MST[ReturnValsMutator]MSP[N] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI4Mutator]MSP[S] array [ i ] = tmp ; j -- ; i ++ ; }
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[rv.ROR1Mutator]MSP[S] bag . add ( element ) ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
if ( inputCollection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR4Mutator]MSP[N]
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; } } return count ; MST[ReturnValsMutator]MSP[N] } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; MST[InlineConstantMutator]MSP[S] if ( object instanceof Map < ? , ? > ) {
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } @Deprecated
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[N] } } return true ; }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[rv.AOR3Mutator]MSP[S] } return helper . list () ; }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } return helper . list () ; }
return IteratorUtils . get ( iterator , index ) ; MST[rv.UOI3Mutator]MSP[S] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
return IteratorUtils . get ( it , i ) ; MST[rv.UOI3Mutator]MSP[N] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.ROR3Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.ROR2Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR1Mutator]MSP[S] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[NegateConditionalsMutator]MSP[N] return false ; } } return true ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; MST[ConstructorCallMutator]MSP[S] } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[rv.ROR3Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; MST[rv.CRCR5Mutator]MSP[N] } } return true ; }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[MathMutator]MSP[S] }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.ROR1Mutator]MSP[N] return false ;
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
return Array . getLength ( object ) == 0 ; MST[rv.CRCR2Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[InlineConstantMutator]MSP[N] } @Deprecated
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ; MST[rv.CRCR5Mutator]MSP[S]
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; MST[ReturnValsMutator]MSP[N] } } return true ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; MST[rv.CRCR6Mutator]MSP[N] while ( it . hasNext () ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI2Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[InlineConstantMutator]MSP[N] } else {
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[experimental.NakedReceiverMutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[rv.UOI3Mutator]MSP[S] } else if ( object == null ) {
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { result . add ( it . next () ) ; } return result ; MST[EmptyObjectReturnValsMutator]MSP[S] }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR2Mutator]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Deprecated
} else if ( object instanceof Iterable < ? > ) { MST[rv.ROR4Mutator]MSP[S] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.ABSMutator]MSP[N] if ( coll1 . contains ( aColl2 ) ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[rv.ROR1Mutator]MSP[S] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[rv.UOI3Mutator]MSP[N]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR2Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; MST[ReturnValsMutator]MSP[N] }
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[ArgumentPropagationMutator]MSP[S] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; MST[rv.CRCR1Mutator]MSP[S] }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI1Mutator]MSP[S] }
final int i = index ; if ( i < 0 ) { MST[rv.UOI2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR3Mutator]MSP[N] } else { try {
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.ROR3Mutator]MSP[N] }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Deprecated
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
final Transformer < ? super E , ? extends E > transformer ) { return TransformedCollection . transformingCollection ( collection , transformer ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < E > E extractSingleton ( final Collection < E > collection ) { Objects . requireNonNull ( collection , lr_4 ) ;
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR1Mutator]MSP[N]
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[NonVoidMethodCallMutator]MSP[N] }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR3Mutator]MSP[S]
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] if ( collection instanceof List < ? > ) {
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[NonVoidMethodCallMutator]MSP[N] return collect ( inputCollection , transformer , answer ) ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; MST[rv.CRCR6Mutator]MSP[S] } } return true ;
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.AOR1Mutator]MSP[N]
iterator . next () ; continue; } count = count - 1 ; result . add ( iterator . next () ) ; iterator . remove () ; } return result ; MST[EmptyObjectReturnValsMutator]MSP[N] }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[InlineConstantMutator]MSP[N]
} } return true ; MST[rv.CRCR3Mutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[N] final O item = iterator . next () ;
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[NullReturnValsMutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[rv.UOI2Mutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; MST[NonVoidMethodCallMutator]MSP[N] Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ?
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[NegateConditionalsMutator]MSP[N] return false ;
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; MST[VoidMethodCallMutator]MSP[N] return get ( map . entrySet () , index ) ; }
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.ABSMutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[S] }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[NegateConditionalsMutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
} else if ( object instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
return true ; MST[rv.CRCR6Mutator]MSP[S] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; MST[rv.CRCR3Mutator]MSP[S] if ( object instanceof Map < ? , ? > ) {
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; MST[rv.CRCR1Mutator]MSP[S] while ( enumeration . hasMoreElements () ) {
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[ReturnValsMutator]MSP[N] } @Deprecated
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.ROR2Mutator]MSP[N] }
if ( lastItem == null || ! lastItem . equals ( item ) ) { mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; MST[VoidMethodCallMutator]MSP[N] return mergedList ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return false ; }
public static < E > Collection < E > removeAll ( final Collection < E > collection , final Collection < ? > remove ) { return ListUtils . removeAll ( collection , remove ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.ROR4Mutator]MSP[N] } @Deprecated
int j = array . length - 1 ; MST[MathMutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
if ( inputCollection != null ) { return collect ( inputCollection . iterator () , transformer , outputCollection ) ; } return outputCollection ; MST[ReturnValsMutator]MSP[S] }
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; } return addAll ( collection , iterable . iterator () ) ; MST[BooleanFalseReturnValsMutator]MSP[S] }
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
for ( final C element : elements ) { MST[rv.UOI3Mutator]MSP[S] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR2Mutator]MSP[N]
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[rv.CRCR4Mutator]MSP[N] } else {
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR1Mutator]MSP[N] } @Deprecated
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; MST[rv.ABSMutator]MSP[N] j -- ; i ++ ; }
return IteratorUtils . get ( it , i ) ; MST[NonVoidMethodCallMutator]MSP[N] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
iterator . next () ; continue; } count = count - 1 ; MST[rv.AOD1Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[InlineConstantMutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[InlineConstantMutator]MSP[N] }
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[rv.CRCR4Mutator]MSP[N] }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[ConditionalsBoundaryMutator]MSP[N]
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[rv.ROR4Mutator]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[NegateConditionalsMutator]MSP[N]
public static < I , O > Collection < O > collect ( final Iterator < I > inputIterator , final Transformer < ? super I , ? extends O > transformer ) { return collect ( inputIterator , transformer , new ArrayList < O > () ) ; MST[ConstructorCallMutator]MSP[N] }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR3Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return true ; } } } return false ; MST[rv.CRCR5Mutator]MSP[N] } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI4Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[NonVoidMethodCallMutator]MSP[N]
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[ConstructorCallMutator]MSP[S] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; MST[InlineConstantMutator]MSP[S] } } return true ;
public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterable < T > collection , final C closure ) { if ( closure != null ) { IterableUtils . forEach ( collection , closure ) ; } return closure ; MST[ReturnValsMutator]MSP[N] }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[ConditionalsBoundaryMutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; MST[NonVoidMethodCallMutator]MSP[N] } } } return outputCollection ; }
final Collection < E > result = new ArrayList <> ( count ) ; MST[rv.UOI1Mutator]MSP[N] final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[rv.ROR2Mutator]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[NegateConditionalsMutator]MSP[N]
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR2Mutator]MSP[N] }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] it . remove () ; result = true ; } } } return result ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[InlineConstantMutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR4Mutator]MSP[N] } @Deprecated
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[rv.UOI4Mutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[ReturnValsMutator]MSP[N] }
return outputCollection ; MST[ReturnValsMutator]MSP[N] } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ?
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR4Mutator]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI3Mutator]MSP[S] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; MST[ReturnValsMutator]MSP[S] }
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[BooleanFalseReturnValsMutator]MSP[S] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[MathMutator]MSP[S] } return helper . list () ; }
return coll == null || coll . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[InlineConstantMutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[rv.ROR3Mutator]MSP[N] return false ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[N] changed |= collection . add ( iterator . next () ) ;
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[NonVoidMethodCallMutator]MSP[S] } else if ( object == null ) {
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[rv.ROR2Mutator]MSP[N]
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[rv.ROR5Mutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) { MST[NegateConditionalsMutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[rv.CRCR2Mutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Deprecated
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.ROR5Mutator]MSP[N] return false ;
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[MathMutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; final Set < EquatorWrapper < E > > removeSet = MST[ConstructorCallMutator]MSP[N] collect ( remove , transformer , new HashSet < EquatorWrapper < E > > () ) ;
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.CRCR2Mutator]MSP[S]
if ( collection . size () != 1 ) { MST[rv.CRCR5Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[rv.ROR5Mutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
public static < E > Collection < E > removeAll ( final Collection < E > collection , final Collection < ? > remove ) { return ListUtils . removeAll ( collection , remove ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.ABSMutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.CRCR3Mutator]MSP[N]
return IteratorUtils . get ( iterator , index ) ; MST[ReturnValsMutator]MSP[S] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[rv.ROR2Mutator]MSP[N]
iterator . next () ; continue; } count = count - 1 ; MST[rv.CRCR6Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR3Mutator]MSP[S] }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] }
public static int size ( final Object object ) { if ( object == null ) { return 0 ; MST[InlineConstantMutator]MSP[S] } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
return true ; MST[ReturnValsMutator]MSP[S] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
return true ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR5Mutator]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.UOI1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[NonVoidMethodCallMutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[rv.ROR1Mutator]MSP[N] return false ; } } return true ;
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR6Mutator]MSP[N] }
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; MST[rv.CRCR6Mutator]MSP[S] if ( object instanceof Map < ? , ? > ) {
return true ; MST[InlineConstantMutator]MSP[S] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
public static int size ( final Object object ) { if ( object == null ) { MST[NegateConditionalsMutator]MSP[N] return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.ROR1Mutator]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI3Mutator]MSP[S] array [ i ] = tmp ; j -- ; i ++ ; }
} } return true ; MST[rv.CRCR6Mutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR1Mutator]MSP[S]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[ConstructorCallMutator]MSP[S] return collect ( inputCollection , transformer , answer ) ; }
if ( collection . size () != 1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.ROR3Mutator]MSP[N] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[N] final O item = iterator . next () ;
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[NegateConditionalsMutator]MSP[N]
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[S] } } }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; }
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; MST[NonVoidMethodCallMutator]MSP[N] outputCollection . add ( value ) ; } }
} else if ( object instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[MathMutator]MSP[N]
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.AOR2Mutator]MSP[N]
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] changed |= collection . add ( iterator . next () ) ;
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.ROR4Mutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR5Mutator]MSP[N] list . add ( element ) ; } }
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[rv.ROR5Mutator]MSP[N]
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.UOI3Mutator]MSP[S] return IteratorUtils . toList ( iterator , totalSize ) ; }
iterator . next () ; continue; } count = count - 1 ; MST[rv.CRCR3Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
@Deprecated public static < T > T find ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return predicate != null ? IterableUtils . find ( collection , predicate ) : null ; MST[NonVoidMethodCallMutator]MSP[S] } @Deprecated
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.ABSMutator]MSP[N] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
iterator . next () ; continue; } count = count - 1 ; MST[rv.UOI1Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[rv.ROR4Mutator]MSP[N]
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.UOI4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.ROR5Mutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
int j = array . length - 1 ; MST[InlineConstantMutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] list . add ( element ) ; } } return list ; }
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[rv.CRCR4Mutator]MSP[N] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
public static < E > boolean isEqualCollection ( final Collection < ? extends E > a , final Collection < ? extends E > b , final Equator < ? super E > equator ) { Objects . requireNonNull ( equator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N]
public static int size ( final Object object ) { if ( object == null ) { MST[rv.ROR5Mutator]MSP[N] return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[rv.CRCR5Mutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[rv.ROR3Mutator]MSP[N] return false ; } } return true ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; MST[rv.CRCR6Mutator]MSP[N] while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ;
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } }
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; MST[rv.CRCR5Mutator]MSP[N] if ( collection != null && predicate != null ) {
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[InlineConstantMutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[InlineConstantMutator]MSP[S] }
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[rv.ROR4Mutator]MSP[N]
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) { MST[NegateConditionalsMutator]MSP[S]
return coll == null || coll . isEmpty () ; MST[rv.ROR2Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.CRCR5Mutator]MSP[N]
total = ( ( Map < ? , ? > ) object ) . size () ; MST[NonVoidMethodCallMutator]MSP[S] } else if ( object instanceof Collection < ? > ) { total = ( ( Collection < ? > ) object ) . size () ;
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static Object get ( final Object object , final int index ) {
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[rv.UOI2Mutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
if ( inputCollection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR3Mutator]MSP[N] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[BooleanFalseReturnValsMutator]MSP[S] }
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[ReturnValsMutator]MSP[S] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR2Mutator]MSP[N]
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.UOI4Mutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { total = ( ( Collection < ? > ) object ) . size () ; MST[NonVoidMethodCallMutator]MSP[S]
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.AOD2Mutator]MSP[N]
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[ConditionalsBoundaryMutator]MSP[N]
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) { MST[rv.ROR5Mutator]MSP[S]
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR4Mutator]MSP[N] }
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[InlineConstantMutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR6Mutator]MSP[N] } @Deprecated
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; MST[ReturnValsMutator]MSP[S] } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ;
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR2Mutator]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.ROR2Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI4Mutator]MSP[S] }
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[rv.CRCR1Mutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; MST[NonVoidMethodCallMutator]MSP[N] while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; MST[rv.CRCR4Mutator]MSP[N] } } } return result ;
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[rv.ROR5Mutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S]
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[NegateConditionalsMutator]MSP[N] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ; MST[rv.CRCR6Mutator]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.ROR1Mutator]MSP[N] } @Deprecated
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR5Mutator]MSP[N] list . add ( element ) ; } } return list ;
return Array . getLength ( object ) == 0 ; MST[rv.CRCR6Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final Transformer < ? super E , ? extends E > transformer ) { return TransformedCollection . transformingCollection ( collection , transformer ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < E > E extractSingleton ( final Collection < E > collection ) { Objects . requireNonNull ( collection , lr_4 ) ;
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; MST[rv.CRCR3Mutator]MSP[N] while ( it . hasNext () ) {
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.OBBN1Mutator]MSP[S]
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.ROR3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[rv.CRCR6Mutator]MSP[N] } else {
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[rv.ROR3Mutator]MSP[N] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[rv.ROR5Mutator]MSP[N]
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[ReturnValsMutator]MSP[N] }
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[rv.CRCR1Mutator]MSP[N] } @Deprecated
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[NegateConditionalsMutator]MSP[N] list . add ( element ) ; } }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR3Mutator]MSP[N] }
if ( inputCollection != null ) { return collect ( inputCollection . iterator () , transformer , outputCollection ) ; } return outputCollection ; MST[EmptyObjectReturnValsMutator]MSP[N] }
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[rv.ROR2Mutator]MSP[N] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR5Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
return outputCollection ; MST[ReturnValsMutator]MSP[N] } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[NegateConditionalsMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
return equator . hash ( object ) ; } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; MST[PrimitiveReturnsMutator]MSP[S] }
for ( final C element : elements ) { MST[rv.UOI1Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR6Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
} } return true ; MST[rv.CRCR5Mutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
return coll == null || coll . isEmpty () ; MST[rv.CRCR5Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.ROR4Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
if ( a . size () != b . size () ) { MST[rv.ROR2Mutator]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[rv.UOI4Mutator]MSP[S] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.CRCR4Mutator]MSP[S]
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[NonVoidMethodCallMutator]MSP[S] } if ( object instanceof Map < ? , ? > ) {
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.CRCR3Mutator]MSP[N] list . add ( element ) ; } } return list ; }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[NegateConditionalsMutator]MSP[N] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[ConstructorCallMutator]MSP[S] } } }
return coll == null || coll . isEmpty () ; MST[rv.ROR5Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.AOR3Mutator]MSP[N]
} } return false ; MST[rv.CRCR6Mutator]MSP[N] } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ;
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[rv.ROR4Mutator]MSP[N] return false ; } } return true ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR4Mutator]MSP[S] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR3Mutator]MSP[N]
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] total = ( ( Object [] ) object ) . length ;
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.ROR4Mutator]MSP[N] }
final List < E > list = new ArrayList <> () ; MST[ConstructorCallMutator]MSP[N] for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { list . add ( element ) ; } }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; MST[rv.CRCR6Mutator]MSP[N] } } return true ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[NonVoidMethodCallMutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
return outputCollection ; MST[EmptyObjectReturnValsMutator]MSP[N] } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ?
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[NonVoidMethodCallMutator]MSP[S] return false ; } } return true ;
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[rv.ROR4Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[rv.ROR5Mutator]MSP[N] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; MST[BooleanFalseReturnValsMutator]MSP[S] } return addAll ( collection , iterable . iterator () ) ; }
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[rv.ROR2Mutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; MST[InlineConstantMutator]MSP[S] }
if ( collection . size () != 1 ) { throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; MST[NonVoidMethodCallMutator]MSP[N] }
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . isFull () ; MST[BooleanFalseReturnValsMutator]MSP[N] } try {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[rv.CRCR4Mutator]MSP[N] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[ArgumentPropagationMutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.ABSMutator]MSP[N] array [ i ] = tmp ; j -- ; i ++ ; }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[NegateConditionalsMutator]MSP[S]
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[rv.ROR1Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
return true ; } } } return false ; MST[InlineConstantMutator]MSP[N] } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
if ( inputCollection != null ) { return collect ( inputCollection . iterator () , transformer , outputCollection ) ; MST[NonVoidMethodCallMutator]MSP[N] } return outputCollection ; }
} else if ( object instanceof Iterable < ? > ) { MST[rv.ROR2Mutator]MSP[N] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; MST[ConstructorCallMutator]MSP[N] for ( final O element : b ) { if ( p . evaluate ( element ) ) { bag . add ( element ) ;
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR1Mutator]MSP[N]
return list ; } @Deprecated public static < C > Collection < C > synchronizedCollection ( final Collection < C > collection ) { return SynchronizedCollection . synchronizedCollection ( collection ) ; MST[ReturnValsMutator]MSP[N] } @Deprecated
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { result . add ( it . next () ) ; } return result ; MST[ReturnValsMutator]MSP[S] }
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.AOR1Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[ReturnValsMutator]MSP[S]
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.ROR5Mutator]MSP[N] }
if ( lastItem == null || ! lastItem . equals ( item ) ) { mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; MST[EmptyObjectReturnValsMutator]MSP[S] }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.AOR2Mutator]MSP[S] }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.ROR4Mutator]MSP[N] startIndex = startIndex - 1 ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.UOI3Mutator]MSP[N] startIndex = startIndex - 1 ;
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.UOI2Mutator]MSP[N]
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; } else {
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[N] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
return coll == null || coll . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[NullReturnValsMutator]MSP[N] }
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[NegateConditionalsMutator]MSP[N] list . add ( element ) ; } } return list ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.ABSMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR1Mutator]MSP[N] }
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[NonVoidMethodCallMutator]MSP[N] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[NegateConditionalsMutator]MSP[S]
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
} return changed ; MST[BooleanFalseReturnValsMutator]MSP[S] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; MST[rv.UOI2Mutator]MSP[N] return get ( map . entrySet () , index ) ; }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] }
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[ConstructorCallMutator]MSP[S] } if ( object instanceof Map < ? , ? > ) {
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[S] } else if ( object instanceof Iterable < ? > ) {
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[rv.ABSMutator]MSP[N] } } @Deprecated
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.ROR2Mutator]MSP[N] } else { try {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[rv.ROR2Mutator]MSP[N] return false ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[rv.ROR2Mutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
return Array . getLength ( object ) == 0 ; MST[rv.CRCR6Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR6Mutator]MSP[N] } @Deprecated
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.ROR1Mutator]MSP[N] startIndex = startIndex - 1 ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[RemoveConditionalMutator_ORDER_IF]MSP[N] }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.ROR2Mutator]MSP[N] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[rv.ROR3Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[ConditionalsBoundaryMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ; MST[rv.CRCR1Mutator]MSP[S]
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[NegateConditionalsMutator]MSP[N] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[rv.CRCR3Mutator]MSP[N] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[NonVoidMethodCallMutator]MSP[N] return selectRejected ( inputCollection , predicate , answer ) ; }
if ( collection . size () != 1 ) { MST[rv.CRCR2Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { return false ; MST[rv.CRCR6Mutator]MSP[S] }
} else if ( object instanceof Iterator < ? > ) { MST[rv.ROR1Mutator]MSP[N] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; MST[rv.UOI3Mutator]MSP[N] O lastItem = null ; while ( iterator . hasNext () ) { final O item = iterator . next () ;
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[N] if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
} @Deprecated public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterable < T > collection , final C closure ) { return closure != null ? IterableUtils . forEachButLast ( collection , closure ) : null ; MST[rv.ROR5Mutator]MSP[N] } @Deprecated
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; }
public static int size ( final Object object ) { if ( object == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; MST[rv.CRCR3Mutator]MSP[N] if ( collection != null && predicate != null ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[InlineConstantMutator]MSP[S] } else { try {
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return collect ( inputCollection , transformer , answer ) ; MST[ArgumentPropagationMutator]MSP[N] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.UOI1Mutator]MSP[N]
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.ROR1Mutator]MSP[S] return IteratorUtils . toList ( iterator , totalSize ) ; }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.ROR1Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.ROR3Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[rv.ROR4Mutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
if ( a . size () != b . size () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR5Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.ROR4Mutator]MSP[N]
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[NullReturnValsMutator]MSP[S]
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.ROR1Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR6Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[rv.ROR5Mutator]MSP[N] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[ReturnValsMutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
return coll == null || coll . isEmpty () ; MST[rv.CRCR5Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[rv.UOI4Mutator]MSP[N] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; MST[rv.UOI3Mutator]MSP[N] array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR3Mutator]MSP[N] return true ; }
int j = array . length - 1 ; MST[rv.AOD1Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[ArgumentPropagationMutator]MSP[N] } else {
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[rv.ROR4Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N]
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[NegateConditionalsMutator]MSP[N]
it . set ( transformer . transform ( it . next () ) ) ; } } else { final Collection < C > resultCollection = collect ( collection , transformer ) ; collection . clear () ; MST[VoidMethodCallMutator]MSP[S] collection . addAll ( resultCollection ) ; } } @Deprecated
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[rv.ROR2Mutator]MSP[N] total = ( ( Object [] ) object ) . length ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.UOI4Mutator]MSP[N]
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[NonVoidMethodCallMutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[rv.CRCR3Mutator]MSP[N] }
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[rv.ROR3Mutator]MSP[N]
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[NegateConditionalsMutator]MSP[N] }
public static < I , O > Collection < O > collect ( final Iterator < I > inputIterator , final Transformer < ? super I , ? extends O > transformer ) { return collect ( inputIterator , transformer , new ArrayList < O > () ) ; MST[ArgumentPropagationMutator]MSP[S] }
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR2Mutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.AOR4Mutator]MSP[N]
iterator . next () ; continue; } count = count - 1 ; MST[rv.CRCR5Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; MST[NonVoidMethodCallMutator]MSP[N] } } } return outputCollection ; }
return true ; } else if ( object instanceof Collection < ? > ) { MST[NegateConditionalsMutator]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.ROR3Mutator]MSP[N] } @Deprecated
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[NegateConditionalsMutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[ConditionalsBoundaryMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; MST[rv.CRCR2Mutator]MSP[N] } } } return result ;
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.OBBN3Mutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
} else if ( object instanceof Iterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ; MST[ReturnValsMutator]MSP[S]
return Array . getLength ( object ) == 0 ; MST[rv.CRCR3Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterable < T > collection , final C closure ) { if ( closure != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] IterableUtils . forEach ( collection , closure ) ; } return closure ; }
for ( final C element : elements ) { MST[rv.UOI2Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; MST[rv.CRCR5Mutator]MSP[N] while ( it . hasNext () ) {
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.ROR2Mutator]MSP[N] return false ;
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[MathMutator]MSP[S]
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[BooleanFalseReturnValsMutator]MSP[N]
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[NegateConditionalsMutator]MSP[S]
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; MST[NonVoidMethodCallMutator]MSP[S] return IteratorUtils . get ( iterator , i ) ;
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[BooleanTrueReturnValsMutator]MSP[S] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] startIndex = startIndex - 1 ;
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { MST[NegateConditionalsMutator]MSP[N] throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) {
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR3Mutator]MSP[S]
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[ArgumentPropagationMutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.ROR4Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.UOI3Mutator]MSP[N]
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[NonVoidMethodCallMutator]MSP[N]
return IteratorUtils . get ( iterator , index ) ; MST[rv.UOI2Mutator]MSP[N] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR1Mutator]MSP[N] }
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; MST[ConstructorCallMutator]MSP[S] } if ( endIndex < startIndex ) {
if ( inputCollection != null ) { return collect ( inputCollection . iterator () , transformer , outputCollection ) ; MST[ArgumentPropagationMutator]MSP[N] } return outputCollection ; }
throw new IllegalArgumentException ( lr_12 ) ; MST[ConstructorCallMutator]MSP[N] } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI1Mutator]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
public static < O > Collection < O > disjunction ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ) { final SetOperationCardinalityHelper < O > helper = new SetOperationCardinalityHelper <> ( a , b ) ; MST[ConstructorCallMutator]MSP[N]
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR1Mutator]MSP[N]
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[rv.UOI4Mutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[rv.ROR1Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI2Mutator]MSP[N] if ( coll1 . contains ( aColl2 ) ) {
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[rv.UOI2Mutator]MSP[N]
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[rv.ROR1Mutator]MSP[N]
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[InlineConstantMutator]MSP[N] }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[BooleanTrueReturnValsMutator]MSP[N] }
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[rv.ROR2Mutator]MSP[N]
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[ReturnValsMutator]MSP[N] }
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR5Mutator]MSP[S]
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.UOI4Mutator]MSP[N] return false ;
return coll == null || coll . isEmpty () ; MST[NegateConditionalsMutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[NegateConditionalsMutator]MSP[N] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
return true ; MST[rv.CRCR5Mutator]MSP[S] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
public static < C > Collection < C > retainAll ( final Collection < C > collection , final Collection < ? > retain ) { return ListUtils . retainAll ( collection , retain ) ; MST[NonVoidMethodCallMutator]MSP[S] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] return false ; } } return true ;
} @Deprecated public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterable < T > collection , final C closure ) { return closure != null ? IterableUtils . forEachButLast ( collection , closure ) : null ; MST[NegateConditionalsMutator]MSP[N] } @Deprecated
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.CRCR2Mutator]MSP[N]
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; MST[rv.UOI2Mutator]MSP[S] j -- ; i ++ ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( MST[ConstructorCallMutator]MSP[N] lr_16 ) ; }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.AOD1Mutator]MSP[N]
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[rv.ABSMutator]MSP[S] } public static Object get ( final Object object , final int index ) {
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[rv.ROR4Mutator]MSP[N]
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI1Mutator]MSP[N] }
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.OBBN3Mutator]MSP[N] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } else {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } else { try {
} @Deprecated public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterable < T > collection , final C closure ) { return closure != null ? IterableUtils . forEachButLast ( collection , closure ) : null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Deprecated
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return subtract ( a , b , p ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < O > Collection < O > subtract ( final Iterable < ? extends O > a , final Iterable < ? extends O > b , final Predicate < O > p ) {
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.UOI2Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.ROR2Mutator]MSP[N]
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[NonVoidMethodCallMutator]MSP[S] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[InlineConstantMutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.ABSMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
} @Deprecated public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterable < T > collection , final C closure ) { return closure != null ? IterableUtils . forEachButLast ( collection , closure ) : null ; MST[ReturnValsMutator]MSP[N] } @Deprecated
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[rv.CRCR3Mutator]MSP[N] } else {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[BooleanTrueReturnValsMutator]MSP[S] } else { try {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI3Mutator]MSP[N]
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[NonVoidMethodCallMutator]MSP[S]
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[NegateConditionalsMutator]MSP[N] } @Deprecated
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[rv.UOI3Mutator]MSP[S]
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.CRCR1Mutator]MSP[N]
} @Deprecated public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterable < T > collection , final C closure ) { return closure != null ? IterableUtils . forEachButLast ( collection , closure ) : null ; MST[NonVoidMethodCallMutator]MSP[S] } @Deprecated
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { MST[NonVoidMethodCallMutator]MSP[N] if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) {
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[rv.UOI4Mutator]MSP[N] } public static Object get ( final Object object , final int index ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR3Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[rv.ROR3Mutator]MSP[N] total = ( ( Object [] ) object ) . length ;
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[InlineConstantMutator]MSP[S] } else { try {
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) { MST[rv.ROR5Mutator]MSP[N]
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[rv.ROR5Mutator]MSP[N] it . remove () ; result = true ; } } } return result ;
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; MST[ArgumentPropagationMutator]MSP[N] if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; } else {
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[rv.CRCR4Mutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR1Mutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.UOI2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR2Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
@Deprecated public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterator < T > iterator , final C closure ) { if ( closure != null ) { MST[NegateConditionalsMutator]MSP[S] IteratorUtils . forEach ( iterator , closure ) ; } return closure ;
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR3Mutator]MSP[N] }
return true ; MST[rv.CRCR2Mutator]MSP[S] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
final int i = index ; MST[rv.UOI1Mutator]MSP[N] if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; MST[ConstructorCallMutator]MSP[N] final Set < EquatorWrapper < E > > retainSet = collect ( retain , transformer , new HashSet < EquatorWrapper < E > > () ) ;
iterator . next () ; continue; } count = count - 1 ; MST[rv.ABSMutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
public static < E > boolean isEqualCollection ( final Collection < ? extends E > a , final Collection < ? extends E > b , final Equator < ? super E > equator ) { Objects . requireNonNull ( equator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[N]
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.ROR2Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR2Mutator]MSP[N] }
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[N] } } public static int maxSize ( final Collection < ? extends Object > collection ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR3Mutator]MSP[N] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI4Mutator]MSP[N] array [ i ] = tmp ; j -- ; i ++ ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR2Mutator]MSP[N]
it . set ( transformer . transform ( it . next () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } } else { final Collection < C > resultCollection = collect ( collection , transformer ) ; collection . clear () ; collection . addAll ( resultCollection ) ; } } @Deprecated
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[rv.UOI1Mutator]MSP[N] }
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[rv.ROR2Mutator]MSP[N] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[rv.ROR4Mutator]MSP[S]
iterator . next () ; continue; } count = count - 1 ; MST[rv.AOR3Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; MST[rv.CRCR5Mutator]MSP[S] while ( enumeration . hasMoreElements () ) {
int j = array . length - 1 ; MST[rv.AOR4Mutator]MSP[S] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final int i = index ; if ( i < 0 ) { MST[rv.ABSMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[NegateConditionalsMutator]MSP[N] return false ; }
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[rv.UOI1Mutator]MSP[N] } public static Object get ( final Object object , final int index ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR4Mutator]MSP[N] } else { try {
return true ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR4Mutator]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; MST[rv.CRCR5Mutator]MSP[N] break; } } if ( ! foundCurrentElement ) { return false ;
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR2Mutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[rv.ROR1Mutator]MSP[S] result . add ( it . next () ) ; } return result ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR5Mutator]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; } } return true ; }
return Array . getLength ( object ) == 0 ; MST[rv.CRCR3Mutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI3Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[rv.UOI3Mutator]MSP[S] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[InlineConstantMutator]MSP[N] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.OBBN2Mutator]MSP[S]
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[rv.ABSMutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } @Deprecated
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[rv.ROR3Mutator]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) { MST[rv.ROR4Mutator]MSP[S]
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[NegateConditionalsMutator]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR5Mutator]MSP[N] } @Deprecated
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return false ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR1Mutator]MSP[S] } else { try {
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; MST[rv.CRCR3Mutator]MSP[N] } } public static int maxSize ( final Collection < ? extends Object > collection ) {
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[rv.CRCR3Mutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; MST[VoidMethodCallMutator]MSP[N] result = true ; } } } return result ;
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { list . add ( element ) ; } } return list ; MST[ReturnValsMutator]MSP[N] }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR6Mutator]MSP[N] }
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return select ( inputCollection , predicate , answer ) ; MST[ReturnValsMutator]MSP[N] }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR2Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } @Deprecated
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR5Mutator]MSP[N]
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { bag . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[N]
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR2Mutator]MSP[S] }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR6Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N]
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[rv.ROR5Mutator]MSP[N] } @Deprecated
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR1Mutator]MSP[S]
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return true ; } } } return false ; MST[ReturnValsMutator]MSP[N] } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.AOR2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.AOD1Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; MST[rv.CRCR6Mutator]MSP[N] if ( collection != null && predicate != null ) {
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[NegateConditionalsMutator]MSP[N] it . remove () ; result = true ; } } } return result ;
} else if ( object instanceof Iterable < ? > ) { MST[rv.ROR3Mutator]MSP[N] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
return outputCollection ; MST[EmptyObjectReturnValsMutator]MSP[N] } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.ABSMutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
if ( a . size () != b . size () ) { MST[NonVoidMethodCallMutator]MSP[S] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[rv.ROR5Mutator]MSP[N]
final Collection < E > result = new ArrayList <> ( count ) ; MST[rv.ABSMutator]MSP[N] final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; MST[ReturnValsMutator]MSP[N] } return addAll ( collection , iterable . iterator () ) ; }
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
public static int size ( final Object object ) { if ( object == null ) { return 0 ; MST[ReturnValsMutator]MSP[S] } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR3Mutator]MSP[S]
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.CRCR6Mutator]MSP[N]
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[NonVoidMethodCallMutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { MST[rv.ROR5Mutator]MSP[N] throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) {
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[rv.AOR1Mutator]MSP[S] } return helper . list () ; }
return IteratorUtils . get ( iterator , index ) ; MST[rv.ABSMutator]MSP[N] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; MST[rv.CRCR5Mutator]MSP[N] } } } return result ;
if ( inputIterator != null && transformer != null ) { MST[NegateConditionalsMutator]MSP[N] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
iterator . next () ; continue; } count = count - 1 ; MST[rv.UOI2Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
} return changed ; MST[rv.UOI3Mutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
@Deprecated public static < T > T find ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return predicate != null ? IterableUtils . find ( collection , predicate ) : null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Deprecated
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[ReturnValsMutator]MSP[N] }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.AOD1Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[rv.ABSMutator]MSP[S] }
return Array . getLength ( object ) == 0 ; MST[NegateConditionalsMutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
if ( inputCollection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR5Mutator]MSP[N] }
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.CRCR5Mutator]MSP[N]
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[rv.UOI3Mutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; MST[rv.CRCR5Mutator]MSP[S] }
return coll == null || coll . isEmpty () ; MST[InlineConstantMutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[rv.ROR5Mutator]MSP[N] return false ; }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; } return helper . list () ; MST[NonVoidMethodCallMutator]MSP[N] }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . min ( obj ) ) ; MST[VoidMethodCallMutator]MSP[S] } return helper . list () ; }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[rv.ROR1Mutator]MSP[N] it . remove () ; result = true ; } } } return result ;
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[rv.UOI4Mutator]MSP[N] } } @Deprecated
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI3Mutator]MSP[S] }
final int i = index ; if ( i < 0 ) { MST[rv.ROR3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[rv.ROR5Mutator]MSP[N] if ( collection instanceof List < ? > ) {
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[rv.AOR4Mutator]MSP[S] } return helper . list () ; }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.ROR3Mutator]MSP[N] }
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR5Mutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR3Mutator]MSP[N]
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR4Mutator]MSP[N]
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; } return addAll ( collection , iterable . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] }
return true ; MST[rv.CRCR5Mutator]MSP[S] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR4Mutator]MSP[S] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[NonVoidMethodCallMutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
} } return true ; MST[rv.CRCR2Mutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[rv.UOI1Mutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.UOI2Mutator]MSP[N] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.ROR5Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR5Mutator]MSP[N] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR5Mutator]MSP[S]
final Predicate < ? super C > predicate ) { return PredicatedCollection . predicatedCollection ( collection , predicate ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < E > Collection < E > transformingCollection ( final Collection < E > collection ,
return Array . getLength ( object ) == 0 ; MST[rv.ROR5Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
iterator . next () ; continue; } count = count - 1 ; MST[rv.AOD2Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
if ( inputIterator != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
} else if ( object instanceof Enumeration < ? > ) { MST[NegateConditionalsMutator]MSP[N] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[rv.CRCR3Mutator]MSP[N] }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[rv.UOI1Mutator]MSP[N] } } @Deprecated
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR3Mutator]MSP[S]
if ( collection . size () != 1 ) { MST[rv.ROR3Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[rv.ROR3Mutator]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[NegateConditionalsMutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; MST[rv.CRCR6Mutator]MSP[N] } } public static int maxSize ( final Collection < ? extends Object > collection ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return true ; }
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR4Mutator]MSP[N] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI4Mutator]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[rv.ROR1Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR3Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[rv.ROR5Mutator]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ; MST[rv.CRCR5Mutator]MSP[S]
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR4Mutator]MSP[N] list . add ( element ) ; } } return list ;
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.ABSMutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . min ( obj ) ) ; } return helper . list () ; MST[ReturnValsMutator]MSP[N] }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[InlineConstantMutator]MSP[N] }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.ROR4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[ReturnValsMutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Deprecated
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return false ; } } return true ; }
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; MST[ReturnValsMutator]MSP[S] } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; MST[InlineConstantMutator]MSP[N] } } } return result ;
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[rv.ROR1Mutator]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR5Mutator]MSP[N] } @Deprecated
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.ROR3Mutator]MSP[N] list . add ( element ) ; } } return list ; }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[NegateConditionalsMutator]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR3Mutator]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.UOI3Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } @Deprecated
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.ROR5Mutator]MSP[N] }
return true ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR1Mutator]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; MST[ArgumentPropagationMutator]MSP[N] outputCollection . add ( value ) ; } }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.ROR5Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
return coll == null || coll . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[NegateConditionalsMutator]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[InlineConstantMutator]MSP[N]
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[NegateConditionalsMutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[rv.UOI1Mutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[ReturnValsMutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[rv.ROR4Mutator]MSP[N] bag . add ( element ) ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.ROR4Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.UOI1Mutator]MSP[N] return false ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI2Mutator]MSP[S] array [ i ] = tmp ; j -- ; i ++ ; }
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.UOI3Mutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; MST[ArgumentPropagationMutator]MSP[N] Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ?
return true ; MST[rv.CRCR2Mutator]MSP[S] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
final Collection < E > result = new ArrayList <> ( count ) ; MST[ConstructorCallMutator]MSP[N] final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ; MST[BooleanFalseReturnValsMutator]MSP[S]
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[rv.CRCR6Mutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.CRCR4Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[NonVoidMethodCallMutator]MSP[N] }
final Collection < List < E > > result = new ArrayList <> () ; MST[ConstructorCallMutator]MSP[S] while ( it . hasNext () ) { result . add ( it . next () ) ; } return result ; }
public static < I , O > Collection < O > collect ( final Iterator < I > inputIterator , final Transformer < ? super I , ? extends O > transformer ) { return collect ( inputIterator , transformer , new ArrayList < O > () ) ; MST[NonVoidMethodCallMutator]MSP[N] }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.ROR1Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . min ( obj ) ) ; } return helper . list () ; MST[EmptyObjectReturnValsMutator]MSP[N] }
if ( inputIterator != null && transformer != null ) { MST[rv.ROR5Mutator]MSP[N] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR5Mutator]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[NegateConditionalsMutator]MSP[N] if ( collection instanceof List < ? > ) {
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[rv.ROR2Mutator]MSP[N] return false ; }
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[NegateConditionalsMutator]MSP[N]
return equator . hash ( object ) ; } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; MST[ReturnValsMutator]MSP[N] }
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { MST[rv.ROR5Mutator]MSP[N] count . put ( obj , Integer . valueOf ( 1 ) ) ; } else {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.ROR3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[rv.ROR2Mutator]MSP[N] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.ROR4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[rv.UOI2Mutator]MSP[N] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[rv.ROR4Mutator]MSP[S] result . add ( it . next () ) ; } return result ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[S] changed |= collection . add ( iterator . next () ) ;
final int i = index ; MST[rv.ABSMutator]MSP[N] if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
} else if ( object instanceof Iterator < ? > ) { MST[rv.ROR5Mutator]MSP[N] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
if ( collection . size () != 1 ) { MST[rv.CRCR6Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.ROR5Mutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
if ( inputCollection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.AOR1Mutator]MSP[N]
iterator . next () ; continue; } count = count - 1 ; MST[rv.CRCR2Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; MST[EmptyObjectReturnValsMutator]MSP[S] }
return coll == null || coll . isEmpty () ; MST[InlineConstantMutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR4Mutator]MSP[S] list . add ( element ) ; } }
} else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR5Mutator]MSP[N] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR5Mutator]MSP[N] }
int j = array . length - 1 ; MST[rv.AOR1Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[rv.ROR1Mutator]MSP[N]
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.ABSMutator]MSP[N]
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return collect ( inputCollection , transformer , answer ) ; MST[NonVoidMethodCallMutator]MSP[N] }
} } return false ; MST[rv.CRCR3Mutator]MSP[N] } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI4Mutator]MSP[S] }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.AOD1Mutator]MSP[S] }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.ABSMutator]MSP[S] }
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[rv.UOI3Mutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
final List < E > list = new ArrayList <> () ; MST[ConstructorCallMutator]MSP[N] for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { list . add ( element ) ; } } return list ;
@Deprecated public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterator < T > iterator , final C closure ) { if ( closure != null ) { MST[rv.ROR5Mutator]MSP[S] IteratorUtils . forEach ( iterator , closure ) ; } return closure ;
final int i = index ; if ( i < 0 ) { MST[rv.UOI4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; MST[rv.CRCR5Mutator]MSP[S] if ( object instanceof Map < ? , ? > ) {
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[NegateConditionalsMutator]MSP[N]
return true ; MST[rv.CRCR4Mutator]MSP[N] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
changed |= collection . add ( enumeration . nextElement () ) ; MST[NonVoidMethodCallMutator]MSP[S] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
return coll == null || coll . isEmpty () ; MST[rv.CRCR6Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[NonVoidMethodCallMutator]MSP[S]
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ;
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR1Mutator]MSP[S]
if ( inputCollection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; MST[rv.UOI4Mutator]MSP[S] array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[N] final O item = iterator . next () ;
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[NonVoidMethodCallMutator]MSP[N]
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[rv.ROR4Mutator]MSP[S] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
return coll == null || coll . isEmpty () ; MST[rv.ROR1Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[rv.CRCR6Mutator]MSP[N] } @Deprecated
return true ; MST[BooleanFalseReturnValsMutator]MSP[S] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.UOI4Mutator]MSP[N]
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[ReturnValsMutator]MSP[N] }
return Array . getLength ( object ) == 0 ; MST[BooleanTrueReturnValsMutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[rv.ROR3Mutator]MSP[N]
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[rv.ROR5Mutator]MSP[N] return false ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[rv.ROR2Mutator]MSP[N] return false ; } } return true ; }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
if ( inputCollection != null ) { MST[rv.ROR5Mutator]MSP[N] return collect ( inputCollection . iterator () , transformer , outputCollection ) ; } return outputCollection ; }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; MST[rv.CRCR3Mutator]MSP[N] } } } return result ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.ROR3Mutator]MSP[N] return false ;
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[experimental.NakedReceiverMutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.ABSMutator]MSP[N] return false ;
if ( collection . size () != 1 ) { MST[rv.CRCR3Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Deprecated
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
return subtract ( a , b , p ) ; MST[ReturnValsMutator]MSP[N] } public static < O > Collection < O > subtract ( final Iterable < ? extends O > a , final Iterable < ? extends O > b , final Predicate < O > p ) {
if ( inputCollection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.ROR1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
return Array . getLength ( object ) == 0 ; MST[InlineConstantMutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( collection instanceof List < ? > ) {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[ConditionalsBoundaryMutator]MSP[N] startIndex = startIndex - 1 ;
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[rv.ROR5Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[rv.ROR3Mutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
@Deprecated public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterator < T > iterator , final C closure ) { if ( closure != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] IteratorUtils . forEach ( iterator , closure ) ; } return closure ;
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] final O item = iterator . next () ;
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[rv.ROR4Mutator]MSP[N]
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[NonVoidMethodCallMutator]MSP[N]
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; MST[rv.CRCR3Mutator]MSP[S] }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[NegateConditionalsMutator]MSP[N] startIndex = startIndex - 1 ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI1Mutator]MSP[N] }
final int i = index ; if ( i < 0 ) { MST[rv.ROR5Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
iterator . next () ; continue; } count = count - 1 ; MST[rv.CRCR4Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; MST[ReturnValsMutator]MSP[N] } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; }
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[rv.CRCR2Mutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[InlineConstantMutator]MSP[N] list . add ( element ) ; } } return list ; }
return IteratorUtils . get ( iterator , index ) ; MST[NullReturnValsMutator]MSP[S] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[BooleanTrueReturnValsMutator]MSP[N] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI2Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
iterator . next () ; MST[NonVoidMethodCallMutator]MSP[N] continue; } count = count - 1 ; result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; } } return true ;
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { MST[NegateConditionalsMutator]MSP[N] count . put ( obj , Integer . valueOf ( 1 ) ) ; } else {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[rv.ROR2Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[NegateConditionalsMutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[NegateConditionalsMutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } @Deprecated
} else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR4Mutator]MSP[S] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; MST[NullReturnValsMutator]MSP[S] } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[rv.ROR3Mutator]MSP[N]
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR4Mutator]MSP[N]
} else if ( object instanceof Iterator < ? > ) { MST[NegateConditionalsMutator]MSP[N] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI1Mutator]MSP[S]
Objects . requireNonNull ( iterableA , lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[N] Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ?
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.AOR4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.AOR1Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_16 ) ; }
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; } return addAll ( collection , iterable . iterator () ) ; MST[ReturnValsMutator]MSP[S] }
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[rv.CRCR5Mutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
return IteratorUtils . get ( it , i ) ; MST[NullReturnValsMutator]MSP[N] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[BooleanTrueReturnValsMutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; MST[InlineConstantMutator]MSP[N] break; } } if ( ! foundCurrentElement ) { return false ;
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.UOI2Mutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR2Mutator]MSP[N] } @Deprecated
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ; MST[InlineConstantMutator]MSP[S]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[NegateConditionalsMutator]MSP[N]
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . min ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } return helper . list () ; }
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[rv.UOI2Mutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[ReturnValsMutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[NegateConditionalsMutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[NegateConditionalsMutator]MSP[N] } @Deprecated
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.ABSMutator]MSP[N]
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[S] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; MST[ReturnValsMutator]MSP[N] } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.ROR3Mutator]MSP[N]
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return selectRejected ( inputCollection , predicate , answer ) ; MST[NonVoidMethodCallMutator]MSP[N] }
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.ROR2Mutator]MSP[N] } @Deprecated
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR2Mutator]MSP[N]
for ( final C element : elements ) { MST[rv.UOI1Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; MST[NonVoidMethodCallMutator]MSP[N] }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
iterator . next () ; continue; } count = count - 1 ; result . add ( iterator . next () ) ; MST[NonVoidMethodCallMutator]MSP[N] iterator . remove () ; } return result ; }
for ( final C element : elements ) { MST[rv.UOI4Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[rv.CRCR2Mutator]MSP[N] } else {
@Deprecated public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterator < T > iterator , final C closure ) { if ( closure != null ) { IteratorUtils . forEach ( iterator , closure ) ; } return closure ; MST[NullReturnValsMutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR4Mutator]MSP[N] return true ; }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; MST[rv.UOI3Mutator]MSP[S] j -- ; i ++ ; }
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[ReturnValsMutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[rv.CRCR5Mutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.UOI4Mutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[MathMutator]MSP[N]
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.ROR5Mutator]MSP[N] list . add ( element ) ; } } return list ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[rv.ROR5Mutator]MSP[N]
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[NullReturnValsMutator]MSP[N]
} } return false ; MST[ReturnValsMutator]MSP[N] } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ;
Objects . requireNonNull ( collection , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR6Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
} } return false ; MST[BooleanTrueReturnValsMutator]MSP[N] } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ;
if ( inputIterator != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[NullReturnValsMutator]MSP[S] } else if ( object == null ) {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; MST[rv.CRCR5Mutator]MSP[S] } } return true ;
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR3Mutator]MSP[N] }
if ( a . size () != b . size () ) { MST[rv.ROR3Mutator]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[ConditionalsBoundaryMutator]MSP[S]
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI1Mutator]MSP[S] array [ i ] = tmp ; j -- ; i ++ ; }
} } return true ; MST[rv.CRCR4Mutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[rv.ABSMutator]MSP[S] } else if ( object == null ) {
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[NegateConditionalsMutator]MSP[N] return false ; } } return true ; }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] }
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[rv.ROR5Mutator]MSP[N] }
it . set ( transformer . transform ( it . next () ) ) ; MST[VoidMethodCallMutator]MSP[S] } } else { final Collection < C > resultCollection = collect ( collection , transformer ) ; collection . clear () ; collection . addAll ( resultCollection ) ; } } @Deprecated
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { total ++ ; MST[IncrementsMutator]MSP[S] it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; MST[rv.UOI4Mutator]MSP[N] O lastItem = null ; while ( iterator . hasNext () ) { final O item = iterator . next () ;
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.UOI1Mutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; MST[rv.CRCR1Mutator]MSP[N] while ( it . hasNext () ) {
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.ROR2Mutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[rv.ROR2Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[ConditionalsBoundaryMutator]MSP[N] }
changed |= collection . add ( enumeration . nextElement () ) ; MST[MathMutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
int j = array . length - 1 ; MST[rv.CRCR6Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
return Array . getLength ( object ) == 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[rv.UOI3Mutator]MSP[N] } } @Deprecated
final int i = index ; if ( i < 0 ) { MST[rv.UOI1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[NonVoidMethodCallMutator]MSP[S] }
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
@Deprecated public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterator < T > iterator , final C closure ) { if ( closure != null ) { IteratorUtils . forEach ( iterator , closure ) ; MST[VoidMethodCallMutator]MSP[S] } return closure ;
if ( inputCollection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[ReturnValsMutator]MSP[N] }
if ( collection . size () != 1 ) { MST[rv.ROR5Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; }
} } return true ; MST[BooleanFalseReturnValsMutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[BooleanTrueReturnValsMutator]MSP[S] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] list . add ( element ) ; } }
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[rv.ROR3Mutator]MSP[N] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; MST[NonVoidMethodCallMutator]MSP[N] } return addAll ( collection , iterable . iterator () ) ; }
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[ConstructorCallMutator]MSP[N] list . add ( element ) ; } } return list ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; MST[rv.CRCR6Mutator]MSP[N] } } } return result ;
it . set ( transformer . transform ( it . next () ) ) ; } } else { final Collection < C > resultCollection = collect ( collection , transformer ) ; MST[NonVoidMethodCallMutator]MSP[N] collection . clear () ; collection . addAll ( resultCollection ) ; } } @Deprecated
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.OBBN3Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI3Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
final int i = index ; if ( i < 0 ) { MST[ConditionalsBoundaryMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
public static < I , O > Collection < O > collect ( final Iterator < I > inputIterator , final Transformer < ? super I , ? extends O > transformer ) { return collect ( inputIterator , transformer , new ArrayList < O > () ) ; MST[ReturnValsMutator]MSP[N] }
if ( collection . size () != 1 ) { MST[NegateConditionalsMutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[rv.ROR1Mutator]MSP[N] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[rv.ABSMutator]MSP[S]
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.CRCR4Mutator]MSP[N] list . add ( element ) ; } } return list ; }
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; MST[rv.CRCR1Mutator]MSP[N] if ( collection != null && predicate != null ) {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[NegateConditionalsMutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) ) ; } return helper . list () ; MST[NonVoidMethodCallMutator]MSP[N] }
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[rv.CRCR3Mutator]MSP[N] } @Deprecated
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; MST[rv.ROR5Mutator]MSP[N] }
final Collection < E > result = new ArrayList <> ( count ) ; MST[rv.UOI2Mutator]MSP[N] final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.AOR2Mutator]MSP[N]
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI2Mutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[rv.ROR3Mutator]MSP[N] return false ; } } return true ;
return Array . getLength ( object ) == 0 ; MST[InlineConstantMutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR5Mutator]MSP[N]
} } return false ; MST[rv.CRCR5Mutator]MSP[N] } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ;
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) ) ; } return helper . list () ; MST[EmptyObjectReturnValsMutator]MSP[S] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.UOI1Mutator]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[NegateConditionalsMutator]MSP[N] } @Deprecated
return true ; } } } return false ; MST[rv.CRCR6Mutator]MSP[N] } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[InlineConstantMutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[S] final O item = iterator . next () ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.ROR4Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[NegateConditionalsMutator]MSP[N] return false ; }
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[ConstructorCallMutator]MSP[N] return collect ( inputCollection , transformer , answer ) ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return selectRejected ( inputCollection , predicate , answer ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
final int i = index ; if ( i < 0 ) { MST[NegateConditionalsMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
return coll == null || coll . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
if ( inputCollection != null ) { MST[NegateConditionalsMutator]MSP[N] return collect ( inputCollection . iterator () , transformer , outputCollection ) ; } return outputCollection ; }
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; MST[rv.UOI3Mutator]MSP[N] return get ( map . entrySet () , index ) ; }
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[NegateConditionalsMutator]MSP[S]
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; MST[rv.CRCR6Mutator]MSP[S] }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR6Mutator]MSP[N] }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ; MST[rv.CRCR1Mutator]MSP[N]
} return changed ; MST[ReturnValsMutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[rv.ROR3Mutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.ROR5Mutator]MSP[N] startIndex = startIndex - 1 ;
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[N] return object != null && collection . add ( object ) ; }
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[NullReturnValsMutator]MSP[N] } public static Object get ( final Object object , final int index ) {
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[S] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI1Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.AOR1Mutator]MSP[S] }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[rv.CRCR3Mutator]MSP[N] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[rv.ROR5Mutator]MSP[N] return false ; } } return true ; }
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { list . add ( element ) ; } } return list ; MST[EmptyObjectReturnValsMutator]MSP[N] }
final int i = index ; if ( i < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ; MST[InlineConstantMutator]MSP[S]
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[rv.CRCR2Mutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[rv.UOI1Mutator]MSP[N] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] startIndex = startIndex - 1 ;
} else if ( object instanceof Object [] ) { MST[NegateConditionalsMutator]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
for ( final C element : elements ) { MST[rv.UOI4Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
} else if ( object instanceof Iterator < ? > ) { MST[rv.ROR2Mutator]MSP[N] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
return coll == null || coll . isEmpty () ; MST[rv.ROR4Mutator]MSP[S] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} public static < T > boolean filterInverse ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return filter ( collection , predicate == null ? null : PredicateUtils . notPredicate ( predicate ) ) ; MST[NegateConditionalsMutator]MSP[N] }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[NonVoidMethodCallMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
return true ; MST[InlineConstantMutator]MSP[S] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[rv.CRCR6Mutator]MSP[S] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[rv.ROR1Mutator]MSP[N] return false ; }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[N] changed |= collection . add ( iterator . next () ) ;
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } else {
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; } } return count ; MST[NullReturnValsMutator]MSP[N] } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[ArgumentPropagationMutator]MSP[N]
return true ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR3Mutator]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[NonVoidMethodCallMutator]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR2Mutator]MSP[N]
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.ROR1Mutator]MSP[N]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR3Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
if ( lastItem == null || ! lastItem . equals ( item ) ) { mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; MST[ReturnValsMutator]MSP[N] }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[NonVoidMethodCallMutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR6Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.ROR5Mutator]MSP[N]
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[ConstructorCallMutator]MSP[S] } } }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[N] }
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.UOI1Mutator]MSP[N] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR6Mutator]MSP[N] }
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.CRCR6Mutator]MSP[N]
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[rv.ROR2Mutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[ReturnValsMutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
} else if ( object instanceof Object [] ) { MST[rv.ROR5Mutator]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterator < T > iterator , final C closure ) { return closure != null ? IteratorUtils . forEachButLast ( iterator , closure ) : null ; MST[NegateConditionalsMutator]MSP[N] }
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final O item = iterator . next () ;
@Deprecated public static < T > T find ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return predicate != null ? IterableUtils . find ( collection , predicate ) : null ; MST[ReturnValsMutator]MSP[N] } @Deprecated
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { list . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[N] } } return list ; }
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.ROR2Mutator]MSP[N] list . add ( element ) ; } } return list ; }
return list ; } @Deprecated public static < C > Collection < C > synchronizedCollection ( final Collection < C > collection ) { return SynchronizedCollection . synchronizedCollection ( collection ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } @Deprecated
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.AOD2Mutator]MSP[S] }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.UOI4Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
} else if ( object instanceof Object [] ) { MST[rv.ROR2Mutator]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
iterator . next () ; continue; } count = count - 1 ; MST[InlineConstantMutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; MST[rv.UOI2Mutator]MSP[N] } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[NonVoidMethodCallMutator]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[rv.ROR5Mutator]MSP[S] result . add ( it . next () ) ; } return result ; }
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; MST[NonVoidMethodCallMutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[NegateConditionalsMutator]MSP[N] } else { try {
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR3Mutator]MSP[N] list . add ( element ) ; } } return list ;
it . set ( transformer . transform ( it . next () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } } else { final Collection < C > resultCollection = collect ( collection , transformer ) ; collection . clear () ; collection . addAll ( resultCollection ) ; } } @Deprecated
@Deprecated public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterator < T > iterator , final C closure ) { if ( closure != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] IteratorUtils . forEach ( iterator , closure ) ; } return closure ;
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; MST[rv.CRCR1Mutator]MSP[N] while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.ABSMutator]MSP[S] throw new IndexOutOfBoundsException ( lr_16 ) ; }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[BooleanTrueReturnValsMutator]MSP[N]
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return selectRejected ( inputCollection , predicate , answer ) ; MST[ReturnValsMutator]MSP[N] }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } else if ( object instanceof Iterator < ? > ) {
public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterable < T > collection , final C closure ) { if ( closure != null ) { IterableUtils . forEach ( collection , closure ) ; MST[VoidMethodCallMutator]MSP[S] } return closure ; }
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.AOD2Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[rv.CRCR6Mutator]MSP[N] }
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
return Array . getLength ( object ) == 0 ; MST[NonVoidMethodCallMutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; MST[rv.UOI1Mutator]MSP[N] O lastItem = null ; while ( iterator . hasNext () ) { final O item = iterator . next () ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR1Mutator]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR1Mutator]MSP[N] }
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR4Mutator]MSP[N]
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[ConstructorCallMutator]MSP[S] return selectRejected ( inputCollection , predicate , answer ) ; }
return IteratorUtils . get ( it , i ) ; MST[rv.UOI2Mutator]MSP[N] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
int j = array . length - 1 ; MST[rv.CRCR3Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR5Mutator]MSP[S] } else { try {
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR5Mutator]MSP[N] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[rv.ROR1Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; MST[PrimitiveReturnsMutator]MSP[S] } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.ROR4Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
return coll == null || coll . isEmpty () ; MST[ReturnValsMutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; MST[rv.ABSMutator]MSP[N] } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR2Mutator]MSP[N]
public static < C > Collection < C > unmodifiableCollection ( final Collection < ? extends C > collection ) { return UnmodifiableCollection . unmodifiableCollection ( collection ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < C > Collection < C > predicatedCollection ( final Collection < C > collection ,
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR5Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.CRCR6Mutator]MSP[N]
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[rv.CRCR2Mutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
} } return true ; MST[InlineConstantMutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR5Mutator]MSP[S] }
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[rv.ROR3Mutator]MSP[N] bag . add ( element ) ;
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[ConstructorCallMutator]MSP[N] } } @Deprecated
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.ROR3Mutator]MSP[N] } else if ( object instanceof Iterator < ? > ) {
} else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR1Mutator]MSP[N] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return select ( inputCollection , predicate , answer ) ; MST[ArgumentPropagationMutator]MSP[S] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI3Mutator]MSP[N] array [ i ] = tmp ; j -- ; i ++ ; }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.ROR5Mutator]MSP[N] } else { try {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI4Mutator]MSP[N]
return true ; MST[rv.CRCR6Mutator]MSP[S] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; MST[experimental.RemoveIncrementsMutator]MSP[S] }
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ;
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { result . add ( it . next () ) ; MST[NonVoidMethodCallMutator]MSP[S] } return result ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) { MST[rv.ROR3Mutator]MSP[S]
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] list . add ( element ) ; } } return list ;
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR6Mutator]MSP[N] }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR1Mutator]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[NegateConditionalsMutator]MSP[N] }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[rv.UOI2Mutator]MSP[N]
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[ReturnValsMutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . isFull () ; MST[ReturnValsMutator]MSP[S] } try {
public static < O > Collection < O > union ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ) { final SetOperationCardinalityHelper < O > helper = new SetOperationCardinalityHelper <> ( a , b ) ; MST[ConstructorCallMutator]MSP[N]
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[rv.UOI3Mutator]MSP[N]
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; MST[EmptyObjectReturnValsMutator]MSP[N] } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.ROR5Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[rv.ROR2Mutator]MSP[N]
return IteratorUtils . get ( iterator , index ) ; MST[rv.UOI1Mutator]MSP[N] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
return Array . getLength ( object ) == 0 ; MST[rv.CRCR4Mutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
return IteratorUtils . get ( it , i ) ; MST[rv.ABSMutator]MSP[N] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.AOR4Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[rv.ROR4Mutator]MSP[N] it . remove () ; result = true ; } } } return result ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI2Mutator]MSP[S] }
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[ConstructorCallMutator]MSP[N] list . add ( element ) ; } }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.ROR4Mutator]MSP[N] }
} else if ( object instanceof Enumeration < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
public static < O > Collection < O > intersection ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ) { final SetOperationCardinalityHelper < O > helper = new SetOperationCardinalityHelper <> ( a , b ) ; MST[ConstructorCallMutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[rv.ROR2Mutator]MSP[N] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[rv.ROR3Mutator]MSP[N] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
} else if ( object instanceof Iterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; MST[InlineConstantMutator]MSP[N] if ( collection != null && predicate != null ) {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ; MST[rv.CRCR5Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[rv.ROR4Mutator]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[NegateConditionalsMutator]MSP[N]
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] bag . add ( element ) ;
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.ROR3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[rv.CRCR6Mutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
iterator . next () ; continue; } count = count - 1 ; MST[rv.AOR2Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { return false ; MST[InlineConstantMutator]MSP[S] }
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { MST[rv.ROR5Mutator]MSP[N] throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
return Array . getLength ( object ) == 0 ; MST[ReturnValsMutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[rv.UOI2Mutator]MSP[N] } else if ( object == null ) {
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { return false ; MST[rv.CRCR3Mutator]MSP[S] }
return Array . getLength ( object ) == 0 ; MST[rv.ROR4Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[ReturnValsMutator]MSP[N]
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR5Mutator]MSP[S]
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.CRCR3Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[EmptyObjectReturnValsMutator]MSP[N] }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR3Mutator]MSP[N] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
public static < C > Collection < C > retainAll ( final Collection < C > collection , final Collection < ? > retain ) { return ListUtils . retainAll ( collection , retain ) ; MST[ReturnValsMutator]MSP[S] }
return subtract ( a , b , p ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < O > Collection < O > subtract ( final Iterable < ? extends O > a , final Iterable < ? extends O > b , final Predicate < O > p ) {
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[InlineConstantMutator]MSP[N]
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.ROR2Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.UOI1Mutator]MSP[N] startIndex = startIndex - 1 ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
final int i = index ; MST[rv.UOI4Mutator]MSP[N] if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.CRCR3Mutator]MSP[N] } else if ( object instanceof Iterator < ? > ) {
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[NonVoidMethodCallMutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
if ( inputCollection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR4Mutator]MSP[N] }
return coll == null || coll . isEmpty () ; MST[rv.CRCR2Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; MST[rv.CRCR1Mutator]MSP[S] } } return true ;
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; MST[ReturnValsMutator]MSP[N] final Set < EquatorWrapper < E > > removeSet = collect ( remove , transformer , new HashSet < EquatorWrapper < E > > () ) ;
if ( a . size () != b . size () ) { return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ; MST[NullReturnValsMutator]MSP[S]
if ( a . size () != b . size () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR1Mutator]MSP[N] }
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[rv.UOI2Mutator]MSP[N] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.ABSMutator]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR4Mutator]MSP[N] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.ROR5Mutator]MSP[N] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
} else if ( object instanceof Object [] ) { MST[NegateConditionalsMutator]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; MST[rv.UOI1Mutator]MSP[N] array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; MST[NegateConditionalsMutator]MSP[N] }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR1Mutator]MSP[S] return true ; }
public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterable < T > collection , final C closure ) { if ( closure != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] IterableUtils . forEach ( collection , closure ) ; } return closure ; }
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { MST[NegateConditionalsMutator]MSP[N] throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) {
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR3Mutator]MSP[N] list . add ( element ) ; } }
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[rv.UOI4Mutator]MSP[N] }
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR4Mutator]MSP[S]
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . isFull () ; MST[NonVoidMethodCallMutator]MSP[N] } try {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; MST[ReturnValsMutator]MSP[S] } } return true ;
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.UOI2Mutator]MSP[N]
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
final int i = index ; if ( i < 0 ) { MST[rv.ROR2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI4Mutator]MSP[S] }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.UOI4Mutator]MSP[N] startIndex = startIndex - 1 ;
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR5Mutator]MSP[S] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
public static < C > Collection < C > unmodifiableCollection ( final Collection < ? extends C > collection ) { return UnmodifiableCollection . unmodifiableCollection ( collection ) ; MST[ReturnValsMutator]MSP[N] } public static < C > Collection < C > predicatedCollection ( final Collection < C > collection ,
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR3Mutator]MSP[S] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.ABSMutator]MSP[S] }
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR4Mutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . isFull () ; } try {
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[N] changed |= collection . add ( iterator . next () ) ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[rv.ABSMutator]MSP[N]
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ; MST[rv.CRCR3Mutator]MSP[S]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { MST[rv.ROR5Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; MST[rv.CRCR3Mutator]MSP[N] } } return true ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.ROR4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[rv.ROR1Mutator]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[rv.UOI1Mutator]MSP[N] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR4Mutator]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
public static < C > Collection < C > unmodifiableCollection ( final Collection < ? extends C > collection ) { return UnmodifiableCollection . unmodifiableCollection ( collection ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < C > Collection < C > predicatedCollection ( final Collection < C > collection ,
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; } return addAll ( collection , iterable . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; MST[ConstructorCallMutator]MSP[S] } if ( startIndex < 0 ) {
} else if ( object instanceof Object [] ) { MST[rv.ROR2Mutator]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.AOD2Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_16 ) ; }
iterator . next () ; continue; } count = count - 1 ; MST[MathMutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; } return addAll ( collection , iterable . iterator () ) ; MST[BooleanTrueReturnValsMutator]MSP[S] }
return Array . getLength ( object ) == 0 ; MST[rv.ROR1Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) { MST[NegateConditionalsMutator]MSP[N]
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[N]
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; MST[rv.CRCR6Mutator]MSP[S] while ( enumeration . hasMoreElements () ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR1Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[ConditionalsBoundaryMutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[NonVoidMethodCallMutator]MSP[S]
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[rv.ROR5Mutator]MSP[N]
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ; MST[rv.CRCR1Mutator]MSP[S]
return equator . hash ( object ) ; } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; MST[NonVoidMethodCallMutator]MSP[S] }
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[NonVoidMethodCallMutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR5Mutator]MSP[S] }
public static < T > T get ( final Iterable < T > iterable , final int index ) { return IterableUtils . get ( iterable , index ) ; MST[rv.UOI2Mutator]MSP[N] } public static Object get ( final Object object , final int index ) {
public static int size ( final Object object ) { if ( object == null ) { return 0 ; MST[rv.CRCR5Mutator]MSP[S] } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR4Mutator]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR5Mutator]MSP[S] } else { try {
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.ROR1Mutator]MSP[S] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[N] changed |= collection . add ( iterator . next () ) ;
return true ; } } } return false ; MST[rv.CRCR3Mutator]MSP[N] } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; return get ( map . entrySet () , index ) ; MST[NonVoidMethodCallMutator]MSP[N] }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR5Mutator]MSP[N] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.UOI4Mutator]MSP[S]
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.UOI2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.CRCR3Mutator]MSP[N]
} else if ( object instanceof Iterator < ? > ) { total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR4Mutator]MSP[S]
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[rv.ROR4Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR5Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.UOI2Mutator]MSP[N] return false ;
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } return helper . list () ; }
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( collection instanceof List < ? > ) {
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) { MST[rv.ROR5Mutator]MSP[N]
return true ; MST[rv.CRCR3Mutator]MSP[N] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[NegateConditionalsMutator]MSP[N] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[S] } } }
} public static boolean isFull ( final Collection < ? extends Object > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . isFull () ; MST[BooleanTrueReturnValsMutator]MSP[S] } try {
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; MST[InlineConstantMutator]MSP[N] } } return true ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[rv.ROR4Mutator]MSP[N] return false ; }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[rv.ROR2Mutator]MSP[N] it . remove () ; result = true ; } } } return result ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[ReturnValsMutator]MSP[N]
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[NegateConditionalsMutator]MSP[S] result . add ( it . next () ) ; } return result ; }
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[rv.CRCR4Mutator]MSP[N] }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[rv.ROR4Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[ReturnValsMutator]MSP[N] }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[NegateConditionalsMutator]MSP[S] }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR4Mutator]MSP[N]
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } @Deprecated
return list ; } @Deprecated public static < C > Collection < C > synchronizedCollection ( final Collection < C > collection ) { return SynchronizedCollection . synchronizedCollection ( collection ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Deprecated
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; MST[InlineConstantMutator]MSP[N] while ( it . hasNext () ) {
if ( inputCollection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
return Array . getLength ( object ) == 0 ; MST[rv.CRCR1Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
} return changed ; MST[rv.UOI2Mutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[rv.UOI4Mutator]MSP[S] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[BooleanFalseReturnValsMutator]MSP[N]
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[NegateConditionalsMutator]MSP[N] bag . add ( element ) ;
} else if ( object instanceof Object [] ) { MST[rv.ROR5Mutator]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[ConstructorCallMutator]MSP[N] return select ( inputCollection , predicate , answer ) ; }
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[rv.ROR3Mutator]MSP[N]
return true ; } else if ( object instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.OBBN1Mutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
if ( collection . size () != 1 ) { throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; MST[ReturnValsMutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR4Mutator]MSP[S]
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.UOI1Mutator]MSP[N]
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.AOR4Mutator]MSP[S] }
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[NegateConditionalsMutator]MSP[S] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
if ( collection . size () != 1 ) { MST[rv.ROR2Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[ReturnValsMutator]MSP[N] }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; MST[rv.CRCR4Mutator]MSP[N] break; } } if ( ! foundCurrentElement ) { return false ;
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] total = ( ( Object [] ) object ) . length ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.ROR2Mutator]MSP[N] startIndex = startIndex - 1 ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[ConditionalsBoundaryMutator]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR5Mutator]MSP[S]
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[BooleanFalseReturnValsMutator]MSP[N] }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR5Mutator]MSP[N] }
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; MST[ReturnValsMutator]MSP[N] } } public static int maxSize ( final Collection < ? extends Object > collection ) {
final int i = index ; MST[rv.UOI3Mutator]MSP[N] if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR5Mutator]MSP[N] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.UOI2Mutator]MSP[N] array [ i ] = tmp ; j -- ; i ++ ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR4Mutator]MSP[N] }
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.UOI3Mutator]MSP[N] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) ) ; } return helper . list () ; MST[ReturnValsMutator]MSP[N] }
for ( final C element : elements ) { MST[rv.ABSMutator]MSP[S] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
} } return true ; MST[ReturnValsMutator]MSP[N] } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) {
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[NegateConditionalsMutator]MSP[N] total = ( ( Object [] ) object ) . length ;
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; MST[ReturnValsMutator]MSP[N] final Set < EquatorWrapper < E > > retainSet = collect ( retain , transformer , new HashSet < EquatorWrapper < E > > () ) ;
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[NegateConditionalsMutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
public static < E > Collection < List < E > > permutations ( final Collection < E > collection ) { final PermutationIterator < E > it = new PermutationIterator <> ( collection ) ; MST[ConstructorCallMutator]MSP[S]
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; MST[rv.CRCR3Mutator]MSP[S] while ( enumeration . hasMoreElements () ) {
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[rv.ROR2Mutator]MSP[N]
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[S] } } }
if ( collection . size () != 1 ) { MST[NonVoidMethodCallMutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.ROR4Mutator]MSP[N] list . add ( element ) ; } } return list ; }
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; MST[rv.CRCR1Mutator]MSP[S] if ( object instanceof Map < ? , ? > ) {
return true ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR2Mutator]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR2Mutator]MSP[S] } else { try {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR4Mutator]MSP[S]
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; MST[rv.CRCR3Mutator]MSP[N] break; } } if ( ! foundCurrentElement ) { return false ;
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
throw new IndexOutOfBoundsException ( lr_14 ) ; MST[ConstructorCallMutator]MSP[S] } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } @Deprecated
return list ; MST[ReturnValsMutator]MSP[N] } @Deprecated public static < C > Collection < C > synchronizedCollection ( final Collection < C > collection ) { return SynchronizedCollection . synchronizedCollection ( collection ) ; } @Deprecated
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[rv.ROR1Mutator]MSP[N] return false ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.ROR5Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
public static < E > Collection < E > removeAll ( final Collection < E > collection , final Collection < ? > remove ) { return ListUtils . removeAll ( collection , remove ) ; MST[ReturnValsMutator]MSP[N] }
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[rv.UOI1Mutator]MSP[N] } else if ( object == null ) {
iterator . next () ; continue; } count = count - 1 ; MST[rv.AOR1Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.ROR1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; MST[rv.ABSMutator]MSP[S] return get ( map . entrySet () , index ) ; }
return coll == null || coll . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; MST[IncrementsMutator]MSP[N] i ++ ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI4Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[NonVoidMethodCallMutator]MSP[S]
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.ROR5Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { return false ; MST[rv.CRCR1Mutator]MSP[S] }
} else if ( object instanceof Iterator < ? > ) { MST[rv.ROR4Mutator]MSP[S] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[NonVoidMethodCallMutator]MSP[N] return true ; }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[rv.UOI1Mutator]MSP[N]
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[rv.CRCR6Mutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[rv.UOI1Mutator]MSP[N] }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } else if ( object instanceof Iterator < ? > ) {
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; }
if ( collection . size () != 1 ) { MST[InlineConstantMutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
final int i = index ; if ( i < 0 ) { MST[rv.ROR1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR2Mutator]MSP[N] list . add ( element ) ; } }
} else if ( object instanceof Iterable < ? > ) { total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { MST[rv.ROR5Mutator]MSP[N] total = ( ( Object [] ) object ) . length ;
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.CRCR5Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR2Mutator]MSP[N]
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[rv.UOI2Mutator]MSP[N] } } @Deprecated
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[rv.AOR2Mutator]MSP[S] } return helper . list () ; }
if ( collection . size () != 1 ) { MST[rv.ROR4Mutator]MSP[S] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
return true ; } } } return false ; MST[BooleanTrueReturnValsMutator]MSP[N] } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[ArgumentPropagationMutator]MSP[N] }
if ( inputCollection != null ) { return collect ( inputCollection . iterator () , transformer , outputCollection ) ; MST[EmptyObjectReturnValsMutator]MSP[N] } return outputCollection ; }
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR1Mutator]MSP[N] }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR1Mutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[NegateConditionalsMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
} else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR3Mutator]MSP[N] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[rv.ROR5Mutator]MSP[N] bag . add ( element ) ;
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[InlineConstantMutator]MSP[N] }
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[rv.ROR4Mutator]MSP[N]
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR3Mutator]MSP[S]
iterator . next () ; continue; } count = count - 1 ; result . add ( iterator . next () ) ; MST[NonVoidMethodCallMutator]MSP[N] iterator . remove () ; } return result ; }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[S] }
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[NegateConditionalsMutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Deprecated
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR3Mutator]MSP[N] final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
return IteratorUtils . get ( it , i ) ; } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ; MST[rv.UOI4Mutator]MSP[S]
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[NonVoidMethodCallMutator]MSP[S] } if ( object instanceof Map < ? , ? > ) {
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] bag . add ( element ) ;
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[rv.ROR5Mutator]MSP[N]
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR1Mutator]MSP[S]
return IteratorUtils . get ( it , i ) ; MST[rv.UOI1Mutator]MSP[N] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ; MST[InlineConstantMutator]MSP[N]
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[N] changed |= collection . add ( iterator . next () ) ;
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; MST[ConstructorCallMutator]MSP[N] O lastItem = null ; while ( iterator . hasNext () ) { final O item = iterator . next () ;
final Set < Object > elementsAlreadySeen = new HashSet <> () ; MST[ConstructorCallMutator]MSP[N] for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[rv.ROR1Mutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
} else if ( object instanceof Iterable < ? > ) { MST[rv.ROR5Mutator]MSP[N] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.OBBN1Mutator]MSP[S] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
return equator . hash ( object ) ; } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; MST[NonVoidMethodCallMutator]MSP[S] }
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[rv.UOI3Mutator]MSP[N] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
} else if ( object instanceof Object [] ) { MST[rv.ROR4Mutator]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI2Mutator]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; MST[rv.UOI1Mutator]MSP[N] } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[rv.ROR1Mutator]MSP[N] return false ; } } return true ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; MST[rv.UOI4Mutator]MSP[N] } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
public static < I , O > Collection < O > collect ( final Iterator < I > inputIterator , final Transformer < ? super I , ? extends O > transformer ) { return collect ( inputIterator , transformer , new ArrayList < O > () ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[InlineConstantMutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[InlineConstantMutator]MSP[N]
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { return false ; MST[rv.CRCR1Mutator]MSP[N] } } return true ; }
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR3Mutator]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[rv.CRCR2Mutator]MSP[S] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI1Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] list . add ( element ) ; } } return list ;
public static < T , C extends Closure < ? super T > > C forAllDo ( final Iterable < T > collection , final C closure ) { if ( closure != null ) { IterableUtils . forEach ( collection , closure ) ; } return closure ; MST[NullReturnValsMutator]MSP[S] }
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.ABSMutator]MSP[N]
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] final Iterator < ? > it = ( Iterator < ? > ) object ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; MST[rv.ABSMutator]MSP[N] array [ i ] = tmp ; j -- ; i ++ ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; MST[InlineConstantMutator]MSP[N] while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ;
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; MST[ArgumentPropagationMutator]MSP[N] final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ?
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[rv.CRCR5Mutator]MSP[N] } @Deprecated
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.AOD1Mutator]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR3Mutator]MSP[N] } @Deprecated
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.ROR5Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[NegateConditionalsMutator]MSP[N] return true ; }
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ; MST[rv.CRCR6Mutator]MSP[S]
return IteratorUtils . get ( iterator , index ) ; MST[rv.UOI4Mutator]MSP[S] } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
return IteratorUtils . get ( it , i ) ; MST[rv.UOI4Mutator]MSP[S] } else if ( object instanceof Iterable < ? > ) { final Iterable < ? > iterable = ( Iterable < ? > ) object ; return IterableUtils . get ( iterable , i ) ;
final Predicate < ? super C > predicate ) { return PredicatedCollection . predicatedCollection ( collection , predicate ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } public static < E > Collection < E > transformingCollection ( final Collection < E > collection ,
public static int size ( final Object object ) { if ( object == null ) { return 0 ; MST[rv.CRCR3Mutator]MSP[S] } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
if ( lastItem == null || ! lastItem . equals ( item ) ) { mergedList . add ( item ) ; MST[NonVoidMethodCallMutator]MSP[S] } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; MST[rv.CRCR5Mutator]MSP[N] } } public static int maxSize ( final Collection < ? extends Object > collection ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) { MST[rv.ROR1Mutator]MSP[N]
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[rv.UOI3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR2Mutator]MSP[N]
final int i = index ; if ( i < 0 ) { MST[rv.UOI3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return ( ( Map < ? , ? > ) object ) . isEmpty () ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return true ; }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR5Mutator]MSP[N] }
return true ; MST[rv.CRCR3Mutator]MSP[N] } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) {
public static < T > boolean filter ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { boolean result = false ; if ( collection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N]
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.ROR3Mutator]MSP[S] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[NonVoidMethodCallMutator]MSP[N] }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ; } } return true ; }
if ( a . size () != b . size () ) { MST[rv.ROR5Mutator]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
return true ; } else if ( object instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[ReturnValsMutator]MSP[N] } @Deprecated
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.CRCR6Mutator]MSP[N] list . add ( element ) ; } } return list ; }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[rv.CRCR2Mutator]MSP[N] }
for ( final C element : elements ) { MST[rv.ABSMutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[rv.ABSMutator]MSP[N]
for ( final C element : elements ) { MST[rv.UOI4Mutator]MSP[S] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[ConstructorCallMutator]MSP[S] } if ( object instanceof Map < ? , ? > ) {
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[S] } } return true ;
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[S] final O item = iterator . next () ;
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; MST[NonVoidMethodCallMutator]MSP[N] } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR3Mutator]MSP[S]
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; MST[NonVoidMethodCallMutator]MSP[N] return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; } } public static int maxSize ( final Collection < ? extends Object > collection ) {
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[rv.CRCR5Mutator]MSP[N] }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { MST[rv.ROR2Mutator]MSP[N] return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { list . add ( element ) ; } } return list ; MST[ReturnValsMutator]MSP[N]
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[rv.ROR5Mutator]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI2Mutator]MSP[N] }
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
final int i = index ; if ( i < 0 ) { MST[rv.ROR4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
public static < O > Collection < O > subtract ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ) { final Predicate < O > p = TruePredicate . truePredicate () ; MST[NonVoidMethodCallMutator]MSP[N]
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[rv.ROR4Mutator]MSP[N] return false ; }
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[rv.ROR2Mutator]MSP[N] result . add ( it . next () ) ; } return result ; }
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[rv.UOI2Mutator]MSP[N] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
return collection . addAll ( ( Collection < ? extends C > ) iterable ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } return addAll ( collection , iterable . iterator () ) ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.ROR2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
if ( collection . size () != 1 ) { throw new IllegalArgumentException ( lr_17 ) ; MST[ConstructorCallMutator]MSP[N] } return collection . iterator () . next () ; }
public static < I , O > Collection < O > collect ( final Iterable < I > inputCollection , final Transformer < ? super I , ? extends O > transformer ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
if ( collection . size () != 1 ) { MST[rv.CRCR4Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
} else if ( object instanceof Enumeration < ? > ) { final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; MST[rv.UOI4Mutator]MSP[S] } else if ( object == null ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI4Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
public static < C > Collection < C > retainAll ( final Collection < C > collection , final Collection < ? > retain ) { return ListUtils . retainAll ( collection , retain ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } return helper . list () ; }
} return changed ; MST[BooleanTrueReturnValsMutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
iterator . next () ; continue; } count = count - 1 ; MST[rv.AOR4Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
int j = array . length - 1 ; MST[rv.AOR3Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[rv.ROR5Mutator]MSP[N]
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; MST[InlineConstantMutator]MSP[N] } } public static int maxSize ( final Collection < ? extends Object > collection ) {
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.ROR1Mutator]MSP[S] }
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; MST[NullReturnValsMutator]MSP[N] final Set < EquatorWrapper < E > > retainSet = collect ( retain , transformer , new HashSet < EquatorWrapper < E > > () ) ;
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[NegateConditionalsMutator]MSP[N]
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; MST[rv.CRCR6Mutator]MSP[N] break; } } if ( ! foundCurrentElement ) { return false ;
} } return false ; MST[rv.CRCR1Mutator]MSP[N] } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ;
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[MathMutator]MSP[S] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[NegateConditionalsMutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.UOI4Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; MST[NonVoidMethodCallMutator]MSP[N] final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ?
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[InlineConstantMutator]MSP[N] } @Deprecated
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.CRCR5Mutator]MSP[N]
final int i = index ; if ( i < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) {
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; } } return true ; }
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; MST[BooleanFalseReturnValsMutator]MSP[N] } else if ( object instanceof Iterable < ? > ) {
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[rv.ROR2Mutator]MSP[N] bag . add ( element ) ;
public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterator < T > iterator , final C closure ) { return closure != null ? IteratorUtils . forEachButLast ( iterator , closure ) : null ; MST[rv.ROR5Mutator]MSP[N] }
final Predicate < ? super C > predicate ) { return PredicatedCollection . predicatedCollection ( collection , predicate ) ; MST[ReturnValsMutator]MSP[N] } public static < E > Collection < E > transformingCollection ( final Collection < E > collection ,
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI3Mutator]MSP[S] if ( coll1 . contains ( aColl2 ) ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.ROR4Mutator]MSP[S] } else { try {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI2Mutator]MSP[N]
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; MST[NonVoidMethodCallMutator]MSP[N] } }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[InlineConstantMutator]MSP[N] }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.AOR3Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.CRCR2Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[rv.ROR4Mutator]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[rv.CRCR2Mutator]MSP[N] }
return true ; MST[ReturnValsMutator]MSP[S] } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) {
final Collection < E > result = new ArrayList <> ( count ) ; MST[rv.UOI3Mutator]MSP[N] final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[rv.CRCR4Mutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[rv.ROR3Mutator]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
iterator . next () ; continue; } count = count - 1 ; MST[rv.UOI3Mutator]MSP[N] result . add ( iterator . next () ) ; iterator . remove () ; } return result ; }
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[rv.ROR1Mutator]MSP[N]
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[rv.ROR4Mutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[ReturnValsMutator]MSP[S] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[rv.ROR2Mutator]MSP[N] list . add ( element ) ; } } return list ;
return bcoll . maxSize () ; } catch ( final IllegalArgumentException ex ) { return - 1 ; MST[PrimitiveReturnsMutator]MSP[S] } } public static < O extends Comparable < ? super O > > List < O > collate ( final Iterable < ? extends O > a ,
if ( a . size () != b . size () ) { MST[NegateConditionalsMutator]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
} else if ( object instanceof Object [] ) { MST[rv.ROR4Mutator]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.ROR1Mutator]MSP[N]
iterator . next () ; continue; } count = count - 1 ; result . add ( iterator . next () ) ; iterator . remove () ; MST[VoidMethodCallMutator]MSP[N] } return result ; }
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[ReturnValsMutator]MSP[N] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
return Array . getLength ( object ) == 0 ; MST[rv.ROR3Mutator]MSP[N] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
final List < C > list = ( List < C > ) collection ; for ( final ListIterator < C > it = list . listIterator () ; it . hasNext () ; ) { MST[rv.ROR3Mutator]MSP[N]
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; MST[NonVoidMethodCallMutator]MSP[N] return select ( inputCollection , predicate , answer ) ; }
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) { MST[rv.ROR2Mutator]MSP[N]
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.UOI1Mutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.CRCR3Mutator]MSP[N] } @Deprecated
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return selectRejected ( inputCollection , predicate , answer ) ; MST[ArgumentPropagationMutator]MSP[S] }
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[rv.ROR3Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ; MST[rv.CRCR3Mutator]MSP[N]
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.ROR1Mutator]MSP[N] list . add ( element ) ; } } return list ; }
int j = array . length - 1 ; MST[rv.CRCR5Mutator]MSP[S] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR5Mutator]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.UOI1Mutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[S] } else { rejectedCollection . add ( element ) ; } } }
} else if ( object instanceof Iterable < ? > ) { MST[NegateConditionalsMutator]MSP[N] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.ABSMutator]MSP[N]
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
if ( collection . size () != 1 ) { throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; MST[NullReturnValsMutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { MST[rv.ROR2Mutator]MSP[N] return false ; } } return true ;
if ( a . size () != b . size () ) { MST[rv.ROR4Mutator]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.ROR2Mutator]MSP[N] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return coll == null || coll . isEmpty () ; MST[rv.CRCR3Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.ABSMutator]MSP[S] throw new IndexOutOfBoundsException ( lr_16 ) ; }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; MST[rv.UOI2Mutator]MSP[S] array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
} return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) { MST[NonVoidMethodCallMutator]MSP[S]
for ( final C element : elements ) { MST[rv.UOI3Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
Objects . requireNonNull ( iterableA , lr_8 ) ; MST[ArgumentPropagationMutator]MSP[N] Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ?
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[BooleanTrueReturnValsMutator]MSP[N] }
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[N] final O item = iterator . next () ;
return list ; MST[EmptyObjectReturnValsMutator]MSP[S] } @Deprecated public static < C > Collection < C > synchronizedCollection ( final Collection < C > collection ) { return SynchronizedCollection . synchronizedCollection ( collection ) ; } @Deprecated
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.CRCR5Mutator]MSP[N] list . add ( element ) ; } } return list ; }
if ( a . size () != b . size () ) { return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ; MST[ReturnValsMutator]MSP[S]
if ( a . size () != b . size () ) { MST[NonVoidMethodCallMutator]MSP[S] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
return coll == null || coll . isEmpty () ; MST[rv.ROR3Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.UOI2Mutator]MSP[N]
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR2Mutator]MSP[N] }
new ArrayList <> ( ( ( Collection < ? > ) inputCollection ) . size () ) : new ArrayList <> () ; return collect ( inputCollection , transformer , answer ) ; MST[EmptyObjectReturnValsMutator]MSP[N] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR5Mutator]MSP[N]
for ( final C element : elements ) { changed |= collection . add ( element ) ; } return changed ; MST[rv.UOI4Mutator]MSP[N] } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
public static int size ( final Object object ) { if ( object == null ) { return 0 ; MST[rv.CRCR6Mutator]MSP[S] } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[NegateConditionalsMutator]MSP[N] if ( collection instanceof List < ? > ) {
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[S] changed |= collection . add ( iterator . next () ) ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.UOI3Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.ROR4Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[ReturnValsMutator]MSP[N] } else { try {
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.OBBN2Mutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[NegateConditionalsMutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; MST[rv.CRCR5Mutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; MST[rv.CRCR5Mutator]MSP[N] while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ;
} else if ( object instanceof Object [] ) { MST[rv.ROR1Mutator]MSP[N] return ( ( Object [] ) object ) . length == 0 ; } else if ( object instanceof Iterator < ? > ) {
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; final Set < EquatorWrapper < E > > retainSet = collect ( retain , transformer , new HashSet < EquatorWrapper < E > > () ) ; MST[NonVoidMethodCallMutator]MSP[N]
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; O lastItem = null ; while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[N] final O item = iterator . next () ;
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.ABSMutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; MST[experimental.RemoveIncrementsMutator]MSP[S] i ++ ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR2Mutator]MSP[N] return true ; }
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[ReturnValsMutator]MSP[N] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; MST[ConstructorCallMutator]MSP[N] for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ;
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.AOR3Mutator]MSP[N]
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.UOI2Mutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { MST[rv.ROR3Mutator]MSP[N] return IteratorUtils . toList ( iterator , totalSize ) ; }
return coll == null || coll . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[S] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR3Mutator]MSP[N] }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; MST[rv.UOI1Mutator]MSP[S] j -- ; i ++ ; }
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { return true ; MST[InlineConstantMutator]MSP[N] } final Iterator < ? > it = coll1 . iterator () ;
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; if ( helper . cardinalityA . size () != helper . cardinalityB . size () ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; }
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[NegateConditionalsMutator]MSP[N]
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) { MST[rv.ROR3Mutator]MSP[N]
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[rv.CRCR2Mutator]MSP[N] }
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[rv.CRCR5Mutator]MSP[N] }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[rv.UOI3Mutator]MSP[N]
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { MST[rv.ROR5Mutator]MSP[N] if ( collection instanceof List < ? > ) {
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[rv.UOI1Mutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[rv.ROR5Mutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.ROR5Mutator]MSP[N] }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.ROR3Mutator]MSP[N] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[rv.ROR3Mutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[NegateConditionalsMutator]MSP[N] }
return IteratorUtils . get ( iterator , index ) ; } static void checkIndexBounds ( final int index ) { if ( index < 0 ) { MST[rv.UOI1Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_5 + index ) ; } } @Deprecated
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[N] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; MST[rv.UOI3Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[NegateConditionalsMutator]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[rv.ROR2Mutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[rv.ROR1Mutator]MSP[N]
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[InlineConstantMutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.UOI3Mutator]MSP[N] return false ;
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; MST[rv.UOI4Mutator]MSP[N] return get ( map . entrySet () , index ) ; }
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] list . add ( element ) ; } }
final Set < Object > elementsAlreadySeen = new HashSet <> () ; for ( final Object nextElement : coll2 ) { if ( elementsAlreadySeen . contains ( nextElement ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] continue; } boolean foundCurrentElement = false ; while ( it . hasNext () ) {
public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterator < T > iterator , final C closure ) { return closure != null ? IteratorUtils . forEachButLast ( iterator , closure ) : null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { MST[NonVoidMethodCallMutator]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[ConditionalsBoundaryMutator]MSP[N]
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; MST[ReturnValsMutator]MSP[N] } else if ( object instanceof Iterable < ? > ) {
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.CRCR6Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
} return changed ; MST[rv.ABSMutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.ROR3Mutator]MSP[N] startIndex = startIndex - 1 ;
final Collection < List < E > > result = new ArrayList <> () ; while ( it . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] result . add ( it . next () ) ; } return result ; }
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[rv.ROR5Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; MST[ReturnValsMutator]MSP[N] }
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[NonVoidMethodCallMutator]MSP[S]
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { list . add ( element ) ; } } return list ; MST[EmptyObjectReturnValsMutator]MSP[N]
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.ROR5Mutator]MSP[N] } @Deprecated
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[NegateConditionalsMutator]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[S]
return Array . getLength ( object ) == 0 ; MST[rv.CRCR5Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; MST[NonVoidMethodCallMutator]MSP[S] } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.UOI2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
for ( final Object obj : helper . cardinalityA . keySet () ) { if ( helper . freqA ( obj ) != helper . freqB ( obj ) ) { MST[rv.ROR4Mutator]MSP[S] return false ; } } return true ; }
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; MST[rv.ABSMutator]MSP[N] array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
if ( inputCollection != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return collect ( inputCollection . iterator () , transformer , outputCollection ) ; } return outputCollection ; }
final Map < ? , ? > map = ( Map < ? , ? > ) object ; final Iterator < ? > iterator = map . entrySet () . iterator () ; return IteratorUtils . get ( iterator , i ) ; MST[rv.UOI2Mutator]MSP[N]
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ; MST[ReturnValsMutator]MSP[N]
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI4Mutator]MSP[N]
} else if ( object instanceof Object [] ) { MST[rv.ROR1Mutator]MSP[N] return ( ( Object [] ) object ) [ i ] ; } else if ( object instanceof Iterator < ? > ) { final Iterator < ? > it = ( Iterator < ? > ) object ;
public static boolean isEqualCollection ( final Collection < ? > a , final Collection < ? > b ) { if ( a . size () != b . size () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return false ; }
changed |= collection . add ( enumeration . nextElement () ) ; } return changed ; MST[rv.UOI3Mutator]MSP[S] } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
final ArrayList < O > list = new ArrayList <> () ; MST[ConstructorCallMutator]MSP[N] final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { bag . add ( element ) ;
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
return true ; } else if ( object instanceof Collection < ? > ) { return ( ( Collection < ? > ) object ) . isEmpty () ; } else if ( object instanceof Iterable < ? > ) { MST[rv.ROR3Mutator]MSP[N]
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.AOD2Mutator]MSP[N]
total = ( ( Map < ? , ? > ) object ) . size () ; } else if ( object instanceof Collection < ? > ) { MST[rv.ROR1Mutator]MSP[N] total = ( ( Collection < ? > ) object ) . size () ;
int j = array . length - 1 ; MST[rv.AOD2Mutator]MSP[S] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { MST[rv.ABSMutator]MSP[N] startIndex = startIndex - 1 ;
public static < C > boolean addAll ( final Collection < C > collection , final Iterable < ? extends C > iterable ) { if ( iterable instanceof Collection < ? > ) { MST[rv.ROR2Mutator]MSP[N]
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . min ( obj ) ) ; } return helper . list () ; MST[NonVoidMethodCallMutator]MSP[N] }
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[VoidMethodCallMutator]MSP[S] } return helper . list () ; }
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] outputCollection . add ( item ) ; } } } return outputCollection ; }
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
return Array . getLength ( object ) == 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.ROR2Mutator]MSP[N]
return Array . getLength ( object ) == 0 ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[N] } } } public static boolean isEmpty ( final Collection < ? > coll ) {
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; } return helper . list () ; MST[ReturnValsMutator]MSP[N] }
final ArrayList < O > list = new ArrayList <> () ; final HashBag < O > bag = new HashBag <> () ; for ( final O element : b ) { if ( p . evaluate ( element ) ) { MST[NonVoidMethodCallMutator]MSP[N] bag . add ( element ) ;
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[NegateConditionalsMutator]MSP[S]
throw new IllegalArgumentException ( lr_6 ) ; MST[ConstructorCallMutator]MSP[S] } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } }
for ( final C element : elements ) { changed |= collection . add ( element ) ; MST[rv.UOI4Mutator]MSP[N] } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterator < T > iterator , final C closure ) { return closure != null ? IteratorUtils . forEachButLast ( iterator , closure ) : null ; MST[ReturnValsMutator]MSP[N] }
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; MST[ConstructorCallMutator]MSP[N] final Set < EquatorWrapper < E > > removeSet = collect ( remove , transformer , new HashSet < EquatorWrapper < E > > () ) ;
return coll == null || coll . isEmpty () ; MST[rv.CRCR6Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) ) ; MST[VoidMethodCallMutator]MSP[S] } return helper . list () ; }
if ( a . size () != b . size () ) { MST[rv.ROR1Mutator]MSP[N] return false ; } @SuppressWarnings ( { lr_1 , lr_3 } ) final Transformer < E , ? > transformer = input -> new EquatorWrapper ( equator , input ) ;
return coll == null || coll . isEmpty () ; MST[rv.CRCR3Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; } } }
throw new IndexOutOfBoundsException ( lr_14 ) ; } if ( count < 0 ) { throw new IndexOutOfBoundsException ( lr_15 ) ; } if ( input . size () < startIndex + count ) { MST[rv.ROR2Mutator]MSP[N] throw new IndexOutOfBoundsException ( lr_16 ) ; }
public static int size ( final Object object ) { if ( object == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) {
public static < C > Collection < C > unmodifiableCollection ( final Collection < ? extends C > collection ) { return UnmodifiableCollection . unmodifiableCollection ( collection ) ; MST[ArgumentPropagationMutator]MSP[S] } public static < C > Collection < C > predicatedCollection ( final Collection < C > collection ,
int j = array . length - 1 ; MST[rv.CRCR2Mutator]MSP[N] Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[rv.ROR5Mutator]MSP[N] return true ; }
@Deprecated public static < T > T find ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return predicate != null ? IterableUtils . find ( collection , predicate ) : null ; MST[NegateConditionalsMutator]MSP[S] } @Deprecated
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; MST[rv.CRCR5Mutator]MSP[N] }
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
final ArrayList < O > mergedList = new ArrayList <> ( totalSize ) ; MST[rv.UOI2Mutator]MSP[N] O lastItem = null ; while ( iterator . hasNext () ) { final O item = iterator . next () ;
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[NonVoidMethodCallMutator]MSP[N] }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.ROR2Mutator]MSP[S] }
final CardinalityHelper < Object > helper = new CardinalityHelper <> ( a , b ) ; for ( final Object obj : a ) { if ( helper . freqA ( obj ) > helper . freqB ( obj ) ) { return false ; } } return true ; MST[rv.CRCR5Mutator]MSP[N]
if ( collection . size () != 1 ) { MST[rv.ROR1Mutator]MSP[N] throw new IllegalArgumentException ( lr_17 ) ; } return collection . iterator () . next () ; }
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; } if ( object instanceof Map < ? , ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.AOR3Mutator]MSP[S] }
public static < T > Collection < T > emptyCollection () { return EMPTY_COLLECTION ; } public static < T > Collection < T > emptyIfNull ( final Collection < T > collection ) { return collection == null ? CollectionUtils . <T > emptyCollection () : collection ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] }
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { MST[rv.ROR1Mutator]MSP[S] total ++ ; it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
public static < C > void transform ( final Collection < C > collection , final Transformer < ? super C , ? extends C > transformer ) { if ( collection != null && transformer != null ) { if ( collection instanceof List < ? > ) { MST[rv.ROR1Mutator]MSP[N]
if ( inputCollection != null && predicate != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
if ( inputIterator != null && transformer != null ) { MST[rv.ROR5Mutator]MSP[N] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.CRCR6Mutator]MSP[S] } else { try {
if ( inputCollection != null && predicate != null ) { for ( final O item : inputCollection ) { if ( ! predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; MST[EmptyObjectReturnValsMutator]MSP[N] }
if ( inputIterator != null && transformer != null ) { MST[NegateConditionalsMutator]MSP[N] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
} return changed ; MST[rv.UOI1Mutator]MSP[N] } public static < C > boolean addAll ( final Collection < C > collection , final Enumeration < ? extends C > enumeration ) { boolean changed = false ; while ( enumeration . hasMoreElements () ) {
} public static < E > Collection < E > removeRange ( final Collection < E > input , final int startIndex , final int endIndex ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( endIndex < startIndex ) { MST[rv.UOI1Mutator]MSP[N]
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { count . put ( obj , Integer . valueOf ( 1 ) ) ; MST[rv.CRCR5Mutator]MSP[N] } else {
final Enumeration < ? > it = ( Enumeration < ? > ) object ; while ( it . hasMoreElements () ) { total ++ ; MST[experimental.RemoveIncrementsMutator]MSP[S] it . nextElement () ; } } static boolean sizeIsEmpty ( final Object object ) { if ( object == null ) {
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
if ( inputCollection != null && predicate != null ) { MST[NegateConditionalsMutator]MSP[N] for ( final O item : inputCollection ) { if ( predicate . evaluate ( item ) ) { outputCollection . add ( item ) ; } } } return outputCollection ; }
Math . max ( 1 , ( ( Collection < ? > ) iterableA ) . size () + ( ( Collection < ? > ) iterableB ) . size () ) : 10 ; MST[rv.CRCR3Mutator]MSP[S]
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.CRCR3Mutator]MSP[N] }
final Iterator < O > iterator = new CollatingIterator <> ( comparator , iterableA . iterator () , iterableB . iterator () ) ; if ( includeDuplicates ) { return IteratorUtils . toList ( iterator , totalSize ) ; MST[rv.ABSMutator]MSP[N] }
return coll == null || coll . isEmpty () ; MST[rv.ROR5Mutator]MSP[N] } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; } public static void reverseArray ( final Object [] array ) { int i = 0 ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; MST[rv.CRCR5Mutator]MSP[S] } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; } else { try {
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ; MST[rv.UOI4Mutator]MSP[N]
} else if ( object instanceof Iterator < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] total = IteratorUtils . size ( ( Iterator < ? > ) object ) ; } else if ( object instanceof Enumeration < ? > ) {
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
@Deprecated public static < T > T find ( final Iterable < T > collection , final Predicate < ? super T > predicate ) { return predicate != null ? IterableUtils . find ( collection , predicate ) : null ; MST[rv.ROR5Mutator]MSP[S] } @Deprecated
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[rv.ROR5Mutator]MSP[N] }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[ReturnValsMutator]MSP[S] }
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { if ( ! predicate . evaluate ( it . next () ) ) { MST[rv.ROR3Mutator]MSP[N] it . remove () ; result = true ; } } } return result ;
} else if ( object instanceof Enumeration < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] final Enumeration < ? > it = ( Enumeration < ? > ) object ; return EnumerationUtils . get ( it , i ) ; } else if ( object == null ) {
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { MST[rv.ROR1Mutator]MSP[S] throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.UOI3Mutator]MSP[N] }
} @Deprecated public static < T , C extends Closure < ? super T > > T forAllButLastDo ( final Iterable < T > collection , final C closure ) { return closure != null ? IterableUtils . forEachButLast ( collection , closure ) : null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } @Deprecated
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( ! removeSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] list . add ( element ) ; } }
throw new IllegalArgumentException ( lr_12 ) ; } if ( input . size () < endIndex ) { throw new IndexOutOfBoundsException ( lr_13 ) ; } return CollectionUtils . removeCount ( input , startIndex , endIndex - startIndex ) ; MST[rv.ABSMutator]MSP[S] }
final Transformer < ? super E , ? extends E > transformer ) { return TransformedCollection . transformingCollection ( collection , transformer ) ; } public static < E > E extractSingleton ( final Collection < E > collection ) { Objects . requireNonNull ( collection , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[N]
final int i = index ; if ( i < 0 ) { throw new IndexOutOfBoundsException ( lr_5 + i ) ; MST[rv.ABSMutator]MSP[N] } if ( object instanceof Map < ? , ? > ) {
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[rv.CRCR4Mutator]MSP[N] }
public static < C > boolean addAll ( final Collection < C > collection , final Iterator < ? extends C > iterator ) { boolean changed = false ; while ( iterator . hasNext () ) { changed |= collection . add ( iterator . next () ) ; MST[rv.UOI3Mutator]MSP[S]
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[rv.CRCR4Mutator]MSP[N] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { MST[rv.UOI3Mutator]MSP[N] tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; j -- ; i ++ ; }
} public static boolean isProperSubCollection ( final Collection < ? > a , final Collection < ? > b ) { return a . size () < b . size () && CollectionUtils . isSubCollection ( a , b ) ; MST[NonVoidMethodCallMutator]MSP[S] }
final Iterable < ? extends O > b ) { return collate ( a , b , ComparatorUtils . <O > naturalComparator () , true ) ; MST[InlineConstantMutator]MSP[S] }
return true ; } } } return false ; } public static boolean containsAny ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll1 . size () < coll2 . size () ) { MST[NonVoidMethodCallMutator]MSP[N]
return coll == null || coll . isEmpty () ; } public static boolean isNotEmpty ( final Collection < ? > coll ) { return ! isEmpty ( coll ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static void reverseArray ( final Object [] array ) { int i = 0 ;
int j = array . length - 1 ; Object tmp ; while ( j > i ) { tmp = array [ j ] ; array [ j ] = array [ i ] ; array [ i ] = tmp ; MST[rv.UOI4Mutator]MSP[N] j -- ; i ++ ; }
public static < E > Collection < E > removeCount ( final Collection < E > input , int startIndex , int count ) { if ( null == input ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] throw new IllegalArgumentException ( lr_11 ) ; } if ( startIndex < 0 ) {
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { if ( startIndex > 0 ) { startIndex = startIndex - 1 ; MST[rv.CRCR2Mutator]MSP[N]
public static < K , V > Map . Entry < K , V > get ( final Map < K , V > map , final int index ) { checkIndexBounds ( index ) ; MST[rv.UOI1Mutator]MSP[N] return get ( map . entrySet () , index ) ; }
for ( final O obj : coll ) { final Integer c = count . get ( obj ) ; if ( c == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] count . put ( obj , Integer . valueOf ( 1 ) ) ; } else {
public static int size ( final Object object ) { if ( object == null ) { return 0 ; } int total = 0 ; if ( object instanceof Map < ? , ? > ) { MST[NegateConditionalsMutator]MSP[N]
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[NegateConditionalsMutator]MSP[N]
for ( final Iterator < T > it = collection . iterator () ; it . hasNext () ; ) { MST[rv.ROR5Mutator]MSP[N] if ( ! predicate . evaluate ( it . next () ) ) { it . remove () ; result = true ; } } } return result ;
} else if ( object instanceof Iterable < ? > ) { MST[rv.ROR1Mutator]MSP[N] total = IterableUtils . size ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Object [] ) { total = ( ( Object [] ) object ) . length ;
return collate ( a , b , ComparatorUtils . <O > naturalComparator () , includeDuplicates ) ; MST[rv.ABSMutator]MSP[N] } public static < O > List < O > collate ( final Iterable < ? extends O > a , final Iterable < ? extends O > b ,
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; MST[rv.AOD2Mutator]MSP[S] } return helper . list () ; }
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { MST[rv.ROR4Mutator]MSP[N] foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { return false ;
if ( inputIterator != null && transformer != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] while ( inputIterator . hasNext () ) { final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
} } return true ; } public static < T > boolean containsAny ( final Collection < ? > coll1 , @SuppressWarnings ( lr_1 ) final T ... coll2 ) { if ( coll1 . size () < coll2 . length ) { MST[rv.ROR3Mutator]MSP[N]
Objects . requireNonNull ( iterableA , lr_8 ) ; Objects . requireNonNull ( iterableB , lr_9 ) ; Objects . requireNonNull ( comparator , lr_10 ) ; final int totalSize = iterableA instanceof Collection < ? > && iterableB instanceof Collection < ? > ? MST[rv.CRCR4Mutator]MSP[N]
for ( final O obj : helper ) { helper . setCardinality ( obj , helper . max ( obj ) - helper . min ( obj ) ) ; } return helper . list () ; MST[EmptyObjectReturnValsMutator]MSP[S] }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { MST[NegateConditionalsMutator]MSP[S] return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) {
} else if ( object instanceof Object [] ) { return ( ( Object [] ) object ) . length == 0 ; MST[BooleanTrueReturnValsMutator]MSP[S] } else if ( object instanceof Iterator < ? > ) {
return outputCollection ; } public static < T > boolean addIgnoreNull ( final Collection < T > collection , final T object ) { Objects . requireNonNull ( collection , lr_4 ) ; return object != null && collection . add ( object ) ; MST[NegateConditionalsMutator]MSP[N] }
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[NegateConditionalsMutator]MSP[N] list . add ( element ) ; } } return list ; }
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
final Comparator < ? super O > c ) { return collate ( a , b , c , true ) ; MST[EmptyObjectReturnValsMutator]MSP[N] }
it . set ( transformer . transform ( it . next () ) ) ; } } else { final Collection < C > resultCollection = collect ( collection , transformer ) ; collection . clear () ; collection . addAll ( resultCollection ) ; MST[NonVoidMethodCallMutator]MSP[S] } } @Deprecated
public static < C > boolean exists ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAny ( input , predicate ) ; MST[rv.ROR5Mutator]MSP[N] } @Deprecated
for ( final Object aColl1 : coll1 ) { if ( coll2 . contains ( aColl1 ) ) { return true ; MST[rv.CRCR6Mutator]MSP[S] } } } else { for ( final Object aColl2 : coll2 ) { if ( coll1 . contains ( aColl2 ) ) { return true ; }
public static < O > Collection < O > select ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR5Mutator]MSP[S]
public static < C > int countMatches ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate == null ? 0 : ( int ) IterableUtils . countMatches ( input , predicate ) ; MST[PrimitiveReturnsMutator]MSP[S] } @Deprecated
return outputCollection ; } public static < O > Collection < O > selectRejected ( final Iterable < ? extends O > inputCollection , final Predicate < ? super O > predicate ) { final Collection < O > answer = inputCollection instanceof Collection < ? > ? MST[rv.ROR1Mutator]MSP[S]
if ( lastItem == null || ! lastItem . equals ( item ) ) { MST[rv.ROR1Mutator]MSP[S] mergedList . add ( item ) ; } lastItem = item ; } mergedList . trimToSize () ; return mergedList ; }
return IterableUtils . isEmpty ( ( Iterable < ? > ) object ) ; } else if ( object instanceof Map < ? , ? > ) { return ( ( Map < ? , ? > ) object ) . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[S]
final Object p = it . next () ; elementsAlreadySeen . add ( p ) ; if ( nextElement == null ? p == null : nextElement . equals ( p ) ) { foundCurrentElement = true ; break; } } if ( ! foundCurrentElement ) { MST[rv.ROR4Mutator]MSP[N] return false ;
for ( final Object aColl1 : coll1 ) { if ( ArrayUtils . contains ( coll2 , aColl1 ) ) { return true ; } } } else { for ( final Object aColl2 : coll2 ) { MST[rv.UOI1Mutator]MSP[N] if ( coll1 . contains ( aColl2 ) ) {
for ( final C element : elements ) { MST[rv.UOI1Mutator]MSP[N] changed |= collection . add ( element ) ; } return changed ; } @Deprecated public static < T > T get ( final Iterator < T > iterator , final int index ) {
changed |= collection . add ( enumeration . nextElement () ) ; MST[rv.ABSMutator]MSP[N] } return changed ; } public static < C > boolean addAll ( final Collection < C > collection , final C ... elements ) { boolean changed = false ;
return ( ( Iterator < ? > ) object ) . hasNext () == false ; } else if ( object instanceof Enumeration < ? > ) { return ( ( Enumeration < ? > ) object ) . hasMoreElements () == false ; MST[rv.ROR1Mutator]MSP[S] } else { try {
public static boolean containsAll ( final Collection < ? > coll1 , final Collection < ? > coll2 ) { if ( coll2 . isEmpty () ) { MST[rv.ROR1Mutator]MSP[N] return true ; } final Iterator < ? > it = coll1 . iterator () ;
} } return false ; MST[InlineConstantMutator]MSP[N] } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ;
} } for ( final O element : a ) { if ( ! bag . remove ( element , 1 ) ) { MST[rv.CRCR2Mutator]MSP[N] list . add ( element ) ; } } return list ; }
public static < C > boolean matchesAll ( final Iterable < C > input , final Predicate < ? super C > predicate ) { return predicate != null && IterableUtils . matchesAll ( input , predicate ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] }
throw new IllegalArgumentException ( lr_6 ) ; } else { try { return Array . get ( object , i ) ; } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; MST[NonVoidMethodCallMutator]MSP[N] } } }
return Array . getLength ( object ) == 0 ; MST[rv.CRCR5Mutator]MSP[S] } catch ( final IllegalArgumentException ex ) { throw new IllegalArgumentException ( lr_7 + object . getClass () . getName () ) ; } } } public static boolean isEmpty ( final Collection < ? > coll ) {
if ( inputCollection != null && predicate != null ) { for ( final O element : inputCollection ) { if ( predicate . evaluate ( element ) ) { outputCollection . add ( element ) ; } else { rejectedCollection . add ( element ) ; MST[NonVoidMethodCallMutator]MSP[N] } } }
count . put ( obj , Integer . valueOf ( c . intValue () + 1 ) ) ; MST[rv.AOR3Mutator]MSP[N] } } return count ; } public static boolean isSubCollection ( final Collection < ? > a , final Collection < ? > b ) {
if ( inputIterator != null && transformer != null ) { while ( inputIterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[N] final I item = inputIterator . next () ; final O value = transformer . transform ( item ) ; outputCollection . add ( value ) ; } }
final Collection < E > result = new ArrayList <> ( count ) ; final Iterator < E > iterator = input . iterator () ; while ( count > 0 ) { MST[rv.ABSMutator]MSP[N] if ( startIndex > 0 ) { startIndex = startIndex - 1 ;
final List < E > list = new ArrayList <> () ; for ( final E element : collection ) { if ( retainSet . contains ( new EquatorWrapper <> ( equator , element ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] list . add ( element ) ; } } return list ;
final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ; return bcoll . isFull () ; } catch ( final IllegalArgumentException ex ) { return false ; MST[rv.CRCR1Mutator]MSP[N] } } public static int maxSize ( final Collection < ? extends Object > collection ) {
Objects . requireNonNull ( collection , lr_4 ) ; if ( collection instanceof BoundedCollection ) { MST[rv.ROR4Mutator]MSP[N] return ( ( BoundedCollection < ? > ) collection ) . maxSize () ; } try { final BoundedCollection < ? > bcoll = UnmodifiableBoundedCollection . unmodifiableBoundedCollection ( collection ) ;
final Transformer < E , EquatorWrapper < E > > transformer = input -> new EquatorWrapper <> ( equator , input ) ; final Set < EquatorWrapper < E > > removeSet = collect ( remove , transformer , new HashSet < EquatorWrapper < E > > () ) ; MST[NonVoidMethodCallMutator]MSP[N]
} } return false ; } public static < O > Map < O , Integer > getCardinalityMap ( final Iterable < ? extends O > coll ) { final Map < O , Integer > count = new HashMap <> () ; MST[ConstructorCallMutator]MSP[N]
return equator . hash ( object ) ; MST[PrimitiveReturnsMutator]MSP[N] } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; }
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[rv.ROR1Mutator]MSP[N]
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[rv.ROR2Mutator]MSP[N]
return false ; } @SuppressWarnings ( lr_1 ) final EquatorWrapper < O > otherObj = ( EquatorWrapper < O > ) obj ; return equator . equate ( object , otherObj . getObject () ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override public int hashCode () {
return equator . hash ( object ) ; MST[ReturnValsMutator]MSP[N] } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; }
return false ; } @SuppressWarnings ( lr_1 ) final EquatorWrapper < O > otherObj = ( EquatorWrapper < O > ) obj ; return equator . equate ( object , otherObj . getObject () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public int hashCode () {
return false ; } @SuppressWarnings ( lr_1 ) final EquatorWrapper < O > otherObj = ( EquatorWrapper < O > ) obj ; return equator . equate ( object , otherObj . getObject () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public int hashCode () {
return equator . hash ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Deprecated public static < O > int cardinality ( final O obj , final Iterable < ? super O > collection ) { return IterableUtils . frequency ( Objects . requireNonNull ( collection , lr_4 ) , obj ) ; }
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[rv.ROR5Mutator]MSP[N]
return false ; } @SuppressWarnings ( lr_1 ) final EquatorWrapper < O > otherObj = ( EquatorWrapper < O > ) obj ; return equator . equate ( object , otherObj . getObject () ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public int hashCode () {
return false ; } @SuppressWarnings ( lr_1 ) final EquatorWrapper < O > otherObj = ( EquatorWrapper < O > ) obj ; return equator . equate ( object , otherObj . getObject () ) ; MST[ReturnValsMutator]MSP[N] } @Override public int hashCode () {
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[rv.ROR4Mutator]MSP[N]
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[rv.ROR3Mutator]MSP[N]
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) { MST[NegateConditionalsMutator]MSP[N]
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; MST[ReturnValsMutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
return isEqualCollection ( collect ( a , transformer ) , collect ( b , transformer ) ) ; } public O getObject () { return object ; MST[NullReturnValsMutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( ! ( obj instanceof EquatorWrapper ) ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; MST[NonVoidMethodCallMutator]MSP[N] } public int freqB ( final Object obj ) {
return getFreq ( obj , cardinalityB ) ; } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; if ( count != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return getFreq ( obj , cardinalityB ) ; MST[NonVoidMethodCallMutator]MSP[N] } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; if ( count != null ) {
public final int max ( final Object obj ) { return Math . max ( freqA ( obj ) , freqB ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } public final int min ( final Object obj ) {
public final int max ( final Object obj ) { return Math . max ( freqA ( obj ) , freqB ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } public final int min ( final Object obj ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; MST[PrimitiveReturnsMutator]MSP[S] } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; } public int freqB ( final Object obj ) {
return count . intValue () ; } return 0 ; MST[ReturnValsMutator]MSP[S] } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
public final int max ( final Object obj ) { return Math . max ( freqA ( obj ) , freqB ( obj ) ) ; MST[ReturnValsMutator]MSP[S] } public final int min ( final Object obj ) {
return count . intValue () ; MST[PrimitiveReturnsMutator]MSP[N] } return 0 ; } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return count . intValue () ; } return 0 ; MST[InlineConstantMutator]MSP[S] } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return count . intValue () ; MST[ReturnValsMutator]MSP[N] } return 0 ; } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; MST[ReturnValsMutator]MSP[N] } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; } public int freqB ( final Object obj ) {
return getFreq ( obj , cardinalityB ) ; } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; if ( count != null ) { MST[NegateConditionalsMutator]MSP[N]
return count . intValue () ; } return 0 ; MST[rv.CRCR6Mutator]MSP[S] } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return count . intValue () ; } return 0 ; MST[rv.CRCR1Mutator]MSP[S] } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return count . intValue () ; } return 0 ; MST[rv.CRCR5Mutator]MSP[S] } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return count . intValue () ; } return 0 ; MST[rv.CRCR3Mutator]MSP[S] } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return getFreq ( obj , cardinalityB ) ; } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; if ( count != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; } public int freqB ( final Object obj ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; } public int freqB ( final Object obj ) {
return count . intValue () ; MST[NonVoidMethodCallMutator]MSP[N] } return 0 ; } @Override public Iterator < O > iterator () { return elements . iterator () ; } public void setCardinality ( final O obj , final int count ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; } public int freqB ( final Object obj ) {
public final int max ( final Object obj ) { return Math . max ( freqA ( obj ) , freqB ( obj ) ) ; MST[ArgumentPropagationMutator]MSP[S] } public final int min ( final Object obj ) {
return getFreq ( obj , cardinalityB ) ; } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( count != null ) {
return getFreq ( obj , cardinalityB ) ; MST[ReturnValsMutator]MSP[N] } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; if ( count != null ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; MST[ReturnValsMutator]MSP[N] } public int freqB ( final Object obj ) {
return getFreq ( obj , cardinalityB ) ; } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; if ( count != null ) { MST[rv.ROR5Mutator]MSP[N]
public final int max ( final Object obj ) { return Math . max ( freqA ( obj ) , freqB ( obj ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } public final int min ( final Object obj ) {
return getFreq ( obj , cardinalityB ) ; } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; MST[ArgumentPropagationMutator]MSP[N] if ( count != null ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; MST[PrimitiveReturnsMutator]MSP[N] } public int freqB ( final Object obj ) {
return getFreq ( obj , cardinalityB ) ; MST[PrimitiveReturnsMutator]MSP[N] } private int getFreq ( final Object obj , final Map < ? , Integer > freqMap ) { final Integer count = freqMap . get ( obj ) ; if ( count != null ) {
public final int max ( final Object obj ) { return Math . max ( freqA ( obj ) , freqB ( obj ) ) ; MST[PrimitiveReturnsMutator]MSP[S] } public final int min ( final Object obj ) {
return Math . min ( freqA ( obj ) , freqB ( obj ) ) ; MST[ArgumentPropagationMutator]MSP[N] } public int freqA ( final Object obj ) { return getFreq ( obj , cardinalityA ) ; } public int freqB ( final Object obj ) {
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.UOI3Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.UOI4Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.UOI2Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[ConditionalsBoundaryMutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.ROR2Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.ROR3Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.ROR4Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.ROR5Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { newList . add ( obj ) ; } } public Collection < O > list () { return newList ; MST[EmptyObjectReturnValsMutator]MSP[N] } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.UOI1Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.ABSMutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
return count . intValue () ; } return 0 ; } @Override public Iterator < O > iterator () { return elements . iterator () ; MST[NullReturnValsMutator]MSP[N] } public void setCardinality ( final O obj , final int count ) {
for ( int i = 0 ; i < count ; i ++ ) { newList . add ( obj ) ; MST[NonVoidMethodCallMutator]MSP[N] } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
return count . intValue () ; } return 0 ; } @Override public Iterator < O > iterator () { return elements . iterator () ; MST[ReturnValsMutator]MSP[N] } public void setCardinality ( final O obj , final int count ) {
return count . intValue () ; } return 0 ; } @Override public Iterator < O > iterator () { return elements . iterator () ; MST[NonVoidMethodCallMutator]MSP[N] } public void setCardinality ( final O obj , final int count ) {
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.CRCR6Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.CRCR5Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { newList . add ( obj ) ; } } public Collection < O > list () { return newList ; MST[ReturnValsMutator]MSP[N] } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[InlineConstantMutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.CRCR3Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[rv.CRCR1Mutator]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
for ( int i = 0 ; i < count ; i ++ ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] newList . add ( obj ) ; } } public Collection < O > list () { return newList ; } @SuppressWarnings ( lr_1 )
