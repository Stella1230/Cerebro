buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[rv.AOR4Mutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI2Mutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR5Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.AOR4Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset - delta ; MST[rv.AOD1Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI1Mutator]MSP[S] ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; } } } } else {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[MathMutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR3Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.AOD2Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI2Mutator]MSP[N] } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR5Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI3Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI3Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR4Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[InlineConstantMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOD1Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[NegateConditionalsMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[NonVoidMethodCallMutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.CRCR3Mutator]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOD2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOD1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[IncrementsMutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI1Mutator]MSP[N] } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR1Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI4Mutator]MSP[N] && end < end1
final int i = k + offset - delta ; if ( k == delta - d MST[MathMutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.AOR1Mutator]MSP[N] if ( m == 0 || n == 0 ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI4Mutator]MSP[N] ++ y ; }
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR3Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI2Mutator]MSP[S]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ROR3Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR4Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.AOR3Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ABSMutator]MSP[S] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset - delta ; if ( k == delta - d MST[NegateConditionalsMutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI4Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI1Mutator]MSP[S] }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD1Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.UOI3Mutator]MSP[N] script ) ; } } public int getStart () {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.ABSMutator]MSP[S] for ( int k = - d ; k <= d ; k += 2 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI2Mutator]MSP[N] int y = x - start1 + start2 - k ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR5Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[MathMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI4Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI1Mutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.ROR1Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD1Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[MathMutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[InlineConstantMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI1Mutator]MSP[N] vUp [ i ] = x -- ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.AOR3Mutator]MSP[N] } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[NegateConditionalsMutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI2Mutator]MSP[N] int i = start1 ; int j = start2 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[NonVoidMethodCallMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[S]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR4Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset - delta ; MST[rv.UOI1Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; MST[rv.UOI3Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR1Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOD2Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[NonVoidMethodCallMutator]MSP[S] ++ end ; } return new Snake ( start , end , diag ) ; }
int y = x - start1 + start2 - k ; MST[rv.AOR3Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ABSMutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI3Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR5Mutator]MSP[N] && end < end1
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
while ( i < end1 || j < end2 ) { MST[rv.ROR4Mutator]MSP[S] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI4Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR5Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI2Mutator]MSP[S] vDown [ i ] = ++ x ; ++ y ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
while ( i < end1 || j < end2 ) { MST[rv.UOI3Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
while ( i < end1 || j < end2 ) { MST[rv.UOI2Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.AOD2Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI1Mutator]MSP[N] int i = start1 ; int j = start2 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset ; MST[rv.AOR3Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; MST[rv.UOI2Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR5Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR4Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI1Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[experimental.RemoveIncrementsMutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR4Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ABSMutator]MSP[N]
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI4Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ABSMutator]MSP[N]
return null ; } final int delta = m - n ; MST[rv.UOI2Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR1Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR3Mutator]MSP[N] && end < end1
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR5Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.CRCR2Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR4Mutator]MSP[S] && end < end1
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ROR3Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR3Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[InlineConstantMutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[MathMutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[RemoveConditionalMutator_ORDER_IF]MSP[N] && end < end1
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.ROR5Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[NegateConditionalsMutator]MSP[N] && end < end1
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOD2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[NonVoidMethodCallMutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI1Mutator]MSP[S]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[NegateConditionalsMutator]MSP[N] int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.ABSMutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[NonVoidMethodCallMutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR4Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR6Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD2Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[NegateConditionalsMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI2Mutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI2Mutator]MSP[N] if ( middle == null
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOD1Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; MST[MathMutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI4Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ABSMutator]MSP[S]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.ABSMutator]MSP[N] ++ y ; }
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[NonVoidMethodCallMutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] vUp [ i ] = x -- ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR5Mutator]MSP[N] int i = start1 ; int j = start2 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR2Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR4Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR4Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI1Mutator]MSP[S] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] int i = start1 ; int j = start2 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR6Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; MST[ConstructorCallMutator]MSP[N] ++ j ; } } } } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI1Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR3Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI3Mutator]MSP[N] if ( m == 0 || n == 0 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI3Mutator]MSP[N] && end < end1
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ABSMutator]MSP[N] && end < end1
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.ABSMutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR3Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI2Mutator]MSP[N] int i = start1 ; int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.AOR1Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI4Mutator]MSP[N]
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; MST[NonVoidMethodCallMutator]MSP[N] ++ j ; } } } } else {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI2Mutator]MSP[S] }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.ABSMutator]MSP[N] }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI4Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.AOR1Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[ConditionalsBoundaryMutator]MSP[N] && end < end1
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR1Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[rv.UOI4Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
while ( i < end1 || j < end2 ) { MST[rv.UOI3Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.CRCR4Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR3Mutator]MSP[S] int i = start1 ; int j = start2 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.AOD1Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR4Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ROR2Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NegateConditionalsMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.AOR1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
buildScript ( start1 , middle . getStart () , MST[NonVoidMethodCallMutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI4Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR3Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR1Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI3Mutator]MSP[N] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[NonVoidMethodCallMutator]MSP[S] ++ end ; } return new Snake ( start , end , diag ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI1Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[NegateConditionalsMutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[ConditionalsBoundaryMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR4Mutator]MSP[S]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.AOD2Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.CRCR6Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR2Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
while ( i < end1 || j < end2 ) { MST[rv.ROR1Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI1Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR2Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI1Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI1Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI2Mutator]MSP[S] && end < end1
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR5Mutator]MSP[S] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOD1Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR6Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI1Mutator]MSP[N] && end < end1
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.ABSMutator]MSP[N] ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; } } } } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR4Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( i < end1 || j < end2 ) { MST[ConditionalsBoundaryMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR5Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR1Mutator]MSP[S] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI3Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; MST[VoidMethodCallMutator]MSP[N] ++ j ; } } } } else {
int y = x - start1 + start2 - k ; MST[rv.AOR4Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOD1Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI3Mutator]MSP[N]
return null ; } final int delta = m - n ; MST[rv.UOI3Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[RemoveConditionalMutator_ORDER_IF]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[rv.AOR1Mutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR2Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI4Mutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] if ( middle == null
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[ConditionalsBoundaryMutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.CRCR6Mutator]MSP[N] } else {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI4Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI4Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.AOR3Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.CRCR4Mutator]MSP[S] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR1Mutator]MSP[N] vUp [ i ] = x -- ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.ABSMutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI1Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI4Mutator]MSP[N] if ( m == 0 || n == 0 ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , MST[rv.UOI3Mutator]MSP[N] middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR1Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.AOR4Mutator]MSP[S] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR1Mutator]MSP[S] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR3Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR3Mutator]MSP[S] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ROR4Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR3Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR4Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI2Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR3Mutator]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI4Mutator]MSP[N] && end < end1
int y = x - start1 + start2 - k ; MST[MathMutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR5Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI3Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.AOR2Mutator]MSP[N] && end < end1
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR1Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.AOR3Mutator]MSP[N] script ) ; } } public int getStart () {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI1Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[MathMutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.AOR4Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR3Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI2Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.UOI3Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
buildScript ( start1 , middle . getStart () , MST[rv.UOI3Mutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.AOR3Mutator]MSP[N] int i = start1 ; int j = start2 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
buildScript ( start1 , middle . getStart () , MST[rv.UOI4Mutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[NegateConditionalsMutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.CRCR5Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR2Mutator]MSP[S] int i = start1 ; int j = start2 ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR1Mutator]MSP[N] && end < end1
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[ConditionalsBoundaryMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; MST[IncrementsMutator]MSP[N] } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; } } } } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ABSMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI4Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI1Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.ABSMutator]MSP[N] int y = x - start1 + start2 - k ;
return null ; } final int delta = m - n ; MST[rv.AOR4Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; if ( middle == null MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[ReturnValsMutator]MSP[N] }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.UOI1Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI1Mutator]MSP[S]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI3Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI2Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[MathMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOD2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[MathMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI2Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.AOD1Mutator]MSP[N] if ( m == 0 || n == 0 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI4Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR4Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[IncrementsMutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[InlineConstantMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] vDown [ 1 + offset ] = start1 ;
int y = x - start1 + start2 - k ; MST[rv.AOR2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI3Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR5Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] if ( middle == null
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI1Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI4Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOD1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI1Mutator]MSP[N] ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR5Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI2Mutator]MSP[N]
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.ROR2Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[ConditionalsBoundaryMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR4Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI1Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI3Mutator]MSP[N] ++ y ; }
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ABSMutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.AOR2Mutator]MSP[N] if ( m == 0 || n == 0 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ROR2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR4Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI3Mutator]MSP[S] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ABSMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI1Mutator]MSP[N] int y = x - start1 + start2 - k ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.CRCR3Mutator]MSP[N] } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.AOD2Mutator]MSP[N] } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI2Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.ABSMutator]MSP[N] script ) ; } } public int getStart () {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI3Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR5Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.AOR4Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
while ( i < end1 || j < end2 ) { MST[rv.UOI2Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[IncrementsMutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] vUp [ i ] = x -- ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR1Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR3Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset ; MST[rv.AOD2Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR1Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR5Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR3Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset - delta ; MST[rv.UOI2Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.ABSMutator]MSP[N] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ABSMutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR4Mutator]MSP[S]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
buildScript ( start1 , middle . getStart () , MST[VoidMethodCallMutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.CRCR3Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI3Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ROR2Mutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.ABSMutator]MSP[N] if ( middle == null
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.AOR4Mutator]MSP[N] } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[ConditionalsBoundaryMutator]MSP[S] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR1Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI4Mutator]MSP[N]
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR6Mutator]MSP[N] return script ; }
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR3Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR2Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[NegateConditionalsMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
int y = x - start1 + start2 - k ; MST[rv.AOD2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[InlineConstantMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; MST[rv.AOR4Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.CRCR6Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI3Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; MST[rv.UOI1Mutator]MSP[S] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ROR2Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ABSMutator]MSP[S] && end < end1
final int i = k + offset - delta ; MST[rv.ABSMutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR5Mutator]MSP[N] && end < end1
while ( i < end1 || j < end2 ) { MST[rv.ROR3Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI3Mutator]MSP[N]
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; MST[rv.UOI1Mutator]MSP[N] ++ j ; } } } } else {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; return script ; MST[NullReturnValsMutator]MSP[N] }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[MathMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.CRCR1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI3Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
while ( i < end1 || j < end2 ) { MST[rv.ROR2Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[MathMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.AOR3Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOD1Mutator]MSP[S]
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI4Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[MathMutator]MSP[N] && end < end1
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[MathMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOD2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR4Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI4Mutator]MSP[N] int i = start1 ; int j = start2 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI1Mutator]MSP[N] int i = start1 ; int j = start2 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI4Mutator]MSP[N] }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.AOR2Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ABSMutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; MST[rv.AOR1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[InlineConstantMutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR2Mutator]MSP[S] && end < end1
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR3Mutator]MSP[N] && end < end1
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[ConditionalsBoundaryMutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[NegateConditionalsMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOD1Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR4Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[MathMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
while ( i < end1 || j < end2 ) { MST[rv.ABSMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.AOD2Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI1Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset - delta ; MST[rv.AOR2Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI1Mutator]MSP[S]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR4Mutator]MSP[N] int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; MST[MathMutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOD2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR1Mutator]MSP[S] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI1Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.AOR3Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[ReturnValsMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; MST[IncrementsMutator]MSP[N] } else { if ( end1 - start1 > end2 - start2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR3Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI4Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI3Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI1Mutator]MSP[N] if ( middle == null
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR5Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.CRCR4Mutator]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI4Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI1Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[MathMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOD2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR1Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[ReturnValsMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI1Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI3Mutator]MSP[S] vDown [ i ] = ++ x ; ++ y ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; MST[rv.ABSMutator]MSP[N] int j = start2 ;
while ( i < end1 || j < end2 ) { MST[rv.UOI3Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
while ( i < end1 || j < end2 ) { MST[rv.UOI2Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI4Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( i < end1 || j < end2 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return null ; MST[ReturnValsMutator]MSP[N] } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.UOI1Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[NegateConditionalsMutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.AOD1Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[MathMutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR5Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[NegateConditionalsMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR5Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[NegateConditionalsMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI1Mutator]MSP[S] }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.AOR3Mutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI2Mutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR6Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR3Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI4Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; ++ y ; MST[experimental.RemoveIncrementsMutator]MSP[N] }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOD2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR2Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI2Mutator]MSP[N] if ( m == 0 || n == 0 ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ABSMutator]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI4Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR6Mutator]MSP[N] return script ; }
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.ROR4Mutator]MSP[S]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[NegateConditionalsMutator]MSP[N] && end < end1
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR3Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR4Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI1Mutator]MSP[S] vDown [ i ] = ++ x ; ++ y ; }
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI4Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[ConditionalsBoundaryMutator]MSP[S]
int y = x - start1 + start2 - k ; MST[rv.AOD2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ROR1Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.AOD1Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR2Mutator]MSP[N] int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; MST[rv.AOR1Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR3Mutator]MSP[N]
final int i = k + offset - delta ; MST[rv.UOI1Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI2Mutator]MSP[N] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR5Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.CRCR3Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI3Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; MST[rv.UOI2Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR4Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI2Mutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI2Mutator]MSP[N] if ( middle == null
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI3Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOD1Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI4Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI3Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( i < end1 || j < end2 ) { MST[rv.UOI1Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; MST[rv.UOI4Mutator]MSP[N] while ( end - diag < end2 && end < end1
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ROR5Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.AOR2Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI1Mutator]MSP[N] int i = start1 ; int j = start2 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI2Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[MathMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR6Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR3Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI3Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR4Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NegateConditionalsMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.UOI3Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI2Mutator]MSP[S] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.ROR4Mutator]MSP[S] ++ end ; } return new Snake ( start , end , diag ) ; }
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOD1Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI4Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.AOR4Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.ABSMutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[NegateConditionalsMutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.UOI2Mutator]MSP[S] script ) ; } } public int getStart () {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI4Mutator]MSP[N] && end < end1
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI1Mutator]MSP[N] && end < end1
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI2Mutator]MSP[S] && end < end1
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI4Mutator]MSP[N] } else {
int y = x - start1 + start2 - k ; MST[rv.AOD1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; MST[ConstructorCallMutator]MSP[N] ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; } } } } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR2Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI4Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ROR3Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI2Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[MathMutator]MSP[N] if ( m == 0 || n == 0 ) {
int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI1Mutator]MSP[S]
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR3Mutator]MSP[N] return script ; }
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] if ( middle == null
buildScript ( start1 , middle . getStart () , MST[rv.UOI3Mutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.ABSMutator]MSP[N] } int x = vUp [ i ] - 1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[NegateConditionalsMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ; MST[rv.ABSMutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.ABSMutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR1Mutator]MSP[S] int i = start1 ; int j = start2 ;
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOD1Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.AOR3Mutator]MSP[N] && end < end1
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.AOR4Mutator]MSP[N] script ) ; } } public int getStart () {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[NonVoidMethodCallMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR4Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR5Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; MST[rv.UOI4Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
buildScript ( start1 , middle . getStart () , MST[rv.UOI2Mutator]MSP[S] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR4Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI1Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI2Mutator]MSP[S]
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; MST[NonVoidMethodCallMutator]MSP[S] ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; } } } } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.CRCR1Mutator]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR6Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI4Mutator]MSP[N] vUp [ i ] = x -- ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI3Mutator]MSP[N] if ( m == 0 || n == 0 ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI2Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI1Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.ABSMutator]MSP[N] } else {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[RemoveConditionalMutator_ORDER_IF]MSP[N] && end < end1
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ABSMutator]MSP[N] && end < end1
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.AOD2Mutator]MSP[N] script ) ; } } public int getStart () {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[ConstructorCallMutator]MSP[N] }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.AOR2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI3Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR2Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; MST[rv.AOR1Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR6Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ABSMutator]MSP[S] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD2Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR5Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; MST[rv.UOI4Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI4Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR3Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR3Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
y -- ; MST[experimental.RemoveIncrementsMutator]MSP[N] } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOD2Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.UOI2Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] if ( middle == null
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.ABSMutator]MSP[N] } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.ROR1Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR1Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR4Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI4Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI1Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; MST[VoidMethodCallMutator]MSP[N] ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; } } } } else {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR4Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI4Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI3Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI4Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI3Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI2Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI1Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.AOR3Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI1Mutator]MSP[N] if ( middle == null
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ABSMutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR1Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.AOD2Mutator]MSP[N] int i = start1 ; int j = start2 ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[NegateConditionalsMutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[InlineConstantMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR1Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.AOD1Mutator]MSP[N] && end < end1
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR3Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI3Mutator]MSP[N] && end < end1
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[MathMutator]MSP[S] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI3Mutator]MSP[S]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] vUp [ i ] = x -- ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[MathMutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[InvertNegsMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR1Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI2Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.AOR1Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR2Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[NonVoidMethodCallMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI2Mutator]MSP[S] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR3Mutator]MSP[N] return script ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.UOI3Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI1Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.AOR1Mutator]MSP[N] } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI1Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.CRCR5Mutator]MSP[S]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ; MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR3Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[InvertNegsMutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI3Mutator]MSP[N] }
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.ROR1Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , MST[NonVoidMethodCallMutator]MSP[N] middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ABSMutator]MSP[N] && end < end1
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR2Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI2Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI1Mutator]MSP[N]
final int i = k + offset - delta ; MST[rv.AOD2Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR6Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD2Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR2Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI3Mutator]MSP[N] } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; MST[rv.AOR4Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI4Mutator]MSP[N] int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ABSMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD2Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR3Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI4Mutator]MSP[N]
final int i = k + offset ; MST[rv.UOI1Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR4Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI4Mutator]MSP[N] int y = x - start1 + start2 - k ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.ABSMutator]MSP[N] }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI1Mutator]MSP[N] && end < end1
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR3Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOD2Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.AOR4Mutator]MSP[N] int i = start1 ; int j = start2 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[ConditionalsBoundaryMutator]MSP[S] if ( vUp [ i - delta ] <= vDown [ i ] ) {
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.ABSMutator]MSP[N] if ( middle == null
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR3Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.ABSMutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ABSMutator]MSP[S] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI4Mutator]MSP[S]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.CRCR5Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
buildScript ( start1 , middle . getStart () , MST[rv.ABSMutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI3Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
int y = x - start1 + start2 - k ; MST[rv.AOR1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI1Mutator]MSP[S] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR5Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI1Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.AOD1Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[InvertNegsMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.ABSMutator]MSP[N] if ( m == 0 || n == 0 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI1Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , MST[rv.UOI2Mutator]MSP[S] middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; MST[rv.UOI1Mutator]MSP[N] while ( end - diag < end2 && end < end1
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI3Mutator]MSP[N] && end < end1
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI1Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ROR2Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
final int i = k + offset - delta ; MST[rv.AOR3Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.ABSMutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR3Mutator]MSP[N] int i = start1 ; int j = start2 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.AOR4Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , MST[rv.UOI4Mutator]MSP[N] middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR2Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI4Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ABSMutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR4Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR4Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI3Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI1Mutator]MSP[N] && end < end1
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.CRCR6Mutator]MSP[S] for ( int k = - d ; k <= d ; k += 2 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] int i = start1 ; int j = start2 ;
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.ABSMutator]MSP[N] if ( middle == null
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[MathMutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[experimental.RemoveIncrementsMutator]MSP[N] ++ y ; }
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR1Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR1Mutator]MSP[N]
final int i = k + offset - delta ; MST[rv.AOD1Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI1Mutator]MSP[N] if ( m == 0 || n == 0 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[MathMutator]MSP[N]
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[NonVoidMethodCallMutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR2Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; MST[experimental.RemoveIncrementsMutator]MSP[N] ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI2Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR5Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR4Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return null ; } final int delta = m - n ; MST[rv.ABSMutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR4Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI3Mutator]MSP[S] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; MST[rv.UOI1Mutator]MSP[S] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI1Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD2Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI3Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ROR5Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR3Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[ConditionalsBoundaryMutator]MSP[S] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; final int sum = n + m ; MST[MathMutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI2Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset - delta ; MST[rv.ABSMutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.CRCR2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.AOR1Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI3Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.AOD2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI4Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[InlineConstantMutator]MSP[N] return script ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR4Mutator]MSP[S] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR1Mutator]MSP[N] int i = start1 ; int j = start2 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI4Mutator]MSP[S]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD1Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR4Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR2Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD1Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI2Mutator]MSP[N]
final int i = k + offset ; MST[rv.ABSMutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.CRCR4Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
buildScript ( start1 , middle . getStart () , MST[rv.UOI4Mutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[NegateConditionalsMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI1Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI3Mutator]MSP[N] && end < end1
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ROR1Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR4Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR3Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI1Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.ROR3Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR1Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset ; MST[rv.AOD1Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR4Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.AOR3Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[MathMutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ABSMutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.ROR3Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[NonVoidMethodCallMutator]MSP[N] return script ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ABSMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
buildScript ( start1 , middle . getStart () , MST[rv.UOI1Mutator]MSP[S] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOD2Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[ConditionalsBoundaryMutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI2Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI4Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI3Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] ++ end ; } return new Snake ( start , end , diag ) ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.CRCR2Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI3Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[MathMutator]MSP[S]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOD1Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.ABSMutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI3Mutator]MSP[N] } else {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI4Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
buildScript ( start1 , middle . getStart () , MST[rv.UOI2Mutator]MSP[S] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI4Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ROR2Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[InlineConstantMutator]MSP[N]
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[VoidMethodCallMutator]MSP[N] return script ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.UOI1Mutator]MSP[S] script ) ; } } public int getStart () {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.AOR2Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI3Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[MathMutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR1Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR1Mutator]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.ABSMutator]MSP[N] } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI3Mutator]MSP[N] vUp [ i ] = x -- ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI2Mutator]MSP[S] if ( m == 0 || n == 0 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI2Mutator]MSP[N] && end < end1
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR2Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI3Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI4Mutator]MSP[N] } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI1Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOD1Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; MST[IncrementsMutator]MSP[N] } return new Snake ( start , end , diag ) ; }
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI2Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI1Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI3Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI3Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ABSMutator]MSP[S]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.CRCR4Mutator]MSP[N] } else {
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI1Mutator]MSP[N] if ( middle == null
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI1Mutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] if ( middle == null
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI2Mutator]MSP[N] if ( middle == null
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR4Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.ABSMutator]MSP[N] ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.AOD1Mutator]MSP[N] } else {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; MST[rv.UOI3Mutator]MSP[N] while ( end - diag < end2 && end < end1
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ROR4Mutator]MSP[N]
final int i = k + offset - delta ; MST[rv.AOR1Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.AOD1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[ConditionalsBoundaryMutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[NonVoidMethodCallMutator]MSP[N] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR4Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI1Mutator]MSP[N] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return null ; } final int delta = m - n ; MST[rv.AOR2Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR3Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ABSMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR5Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR2Mutator]MSP[N]
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[rv.AOR2Mutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.AOR4Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.AOD1Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI2Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.AOR4Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[MathMutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.AOR2Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI2Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.AOR1Mutator]MSP[N] script ) ; } } public int getStart () {
int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[S] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.ABSMutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR1Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset ; MST[rv.UOI3Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI2Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.AOR1Mutator]MSP[S] int i = start1 ; int j = start2 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.UOI1Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI3Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[VoidMethodCallMutator]MSP[N] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.ABSMutator]MSP[N] } int x = vUp [ i ] - 1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI4Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.CRCR3Mutator]MSP[S] for ( int k = - d ; k <= d ; k += 2 ) {
while ( i < end1 || j < end2 ) { MST[rv.UOI1Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOD2Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI4Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI1Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI2Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.AOR2Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[ConstructorCallMutator]MSP[N] } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR3Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI4Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ABSMutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI2Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , MST[rv.ABSMutator]MSP[N] middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.AOD1Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.ABSMutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI2Mutator]MSP[N] && end < end1
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
while ( i < end1 || j < end2 ) { MST[NegateConditionalsMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR5Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[InlineConstantMutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; MST[IncrementsMutator]MSP[N] ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR6Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; MST[rv.UOI4Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
int y = x - start1 + start2 - k ; MST[rv.AOR2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI4Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR2Mutator]MSP[S]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.CRCR5Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] if ( middle == null
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR5Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
final int i = k + offset - delta ; if ( k == delta - d MST[MathMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR3Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI4Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[IncrementsMutator]MSP[N] ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR1Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI4Mutator]MSP[N] ++ y ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR5Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI3Mutator]MSP[N] int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; if ( k == delta - d MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ABSMutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
buildScript ( start1 , middle . getStart () , MST[rv.ABSMutator]MSP[N] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI4Mutator]MSP[N]
final int i = k + offset ; MST[rv.AOR2Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR1Mutator]MSP[S]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI3Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.CRCR4Mutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ROR5Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[NonVoidMethodCallMutator]MSP[N] script ) ; } } public int getStart () {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ABSMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI3Mutator]MSP[N] int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ROR1Mutator]MSP[S]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[NonVoidMethodCallMutator]MSP[N] int i = start1 ; int j = start2 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI4Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.AOR1Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[VoidMethodCallMutator]MSP[N] } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; return script ; MST[ReturnValsMutator]MSP[N] }
final int i = k + offset - delta ; MST[rv.UOI3Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI2Mutator]MSP[S] }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] && end < end1
final int i = k + offset ; MST[rv.UOI4Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.AOR2Mutator]MSP[N] } else {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
while ( i < end1 || j < end2 ) { MST[rv.ROR5Mutator]MSP[S] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOD1Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.AOD2Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; MST[rv.UOI2Mutator]MSP[S] int j = start2 ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.AOR3Mutator]MSP[N] if ( m == 0 || n == 0 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[InlineConstantMutator]MSP[N] } int x = vUp [ i ] - 1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ROR5Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI3Mutator]MSP[N] }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[NonVoidMethodCallMutator]MSP[S] ++ end ; } return new Snake ( start , end , diag ) ; }
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.AOR1Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ABSMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI1Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.CRCR2Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.ROR3Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.UOI2Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , MST[rv.UOI1Mutator]MSP[S] middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.UOI1Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
return null ; } final int delta = m - n ; MST[rv.AOD2Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[InlineConstantMutator]MSP[N] } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[NegateConditionalsMutator]MSP[N] int i = start1 ; int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR2Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR6Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.AOD2Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset ; MST[rv.UOI1Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; MST[rv.AOR2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[NegateConditionalsMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI1Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOD2Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOD1Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[InlineConstantMutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI4Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI1Mutator]MSP[N] ++ y ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI3Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR3Mutator]MSP[N] vUp [ i ] = x -- ;
vUp [ 1 + offset ] = end1 + 1 ; MST[MathMutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[ConditionalsBoundaryMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI2Mutator]MSP[N] } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.AOD1Mutator]MSP[N] script ) ; } } public int getStart () {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[NegateConditionalsMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR5Mutator]MSP[N] int i = start1 ; int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ROR4Mutator]MSP[N]
return null ; } final int delta = m - n ; MST[rv.ABSMutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; MST[rv.UOI4Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD1Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR6Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[InlineConstantMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR3Mutator]MSP[S]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.ABSMutator]MSP[N] if ( m == 0 || n == 0 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.AOD1Mutator]MSP[S] int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR3Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR1Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ROR5Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI1Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI3Mutator]MSP[N] && end < end1
int y = x - start1 + start2 - k ; MST[MathMutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI4Mutator]MSP[S] && end < end1
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI1Mutator]MSP[N] } else {
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI3Mutator]MSP[N] ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; } } } } else {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[NonVoidMethodCallMutator]MSP[N] int i = start1 ; int j = start2 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI4Mutator]MSP[N] int i = start1 ; int j = start2 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI2Mutator]MSP[S] } int x = vUp [ i ] - 1 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.AOR3Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.AOR1Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR3Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI4Mutator]MSP[N] int y = x - start1 + start2 - k ;
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[rv.AOD2Mutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI1Mutator]MSP[S] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR4Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.ABSMutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[MathMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[NegateConditionalsMutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR1Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
while ( i < end1 || j < end2 ) { MST[rv.UOI4Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
while ( i < end1 || j < end2 ) { MST[rv.ABSMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.AOR4Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.CRCR6Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ; MST[rv.UOI2Mutator]MSP[N]
return start ; MST[rv.UOI3Mutator]MSP[N] } public int getEnd () { return end ; } public int getDiag () { return diag ; }
return start ; MST[rv.UOI4Mutator]MSP[N] } public int getEnd () { return end ; } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; MST[ReturnValsMutator]MSP[N] } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; } public int getDiag () { return diag ; MST[rv.ABSMutator]MSP[N] }
return start ; } public int getEnd () { return end ; } public int getDiag () { return diag ; MST[rv.UOI1Mutator]MSP[N] }
return start ; } public int getEnd () { return end ; } public int getDiag () { return diag ; MST[rv.UOI4Mutator]MSP[N] }
return start ; } public int getEnd () { return end ; } public int getDiag () { return diag ; MST[rv.UOI3Mutator]MSP[N] }
return start ; } public int getEnd () { return end ; } public int getDiag () { return diag ; MST[rv.UOI2Mutator]MSP[N] }
return start ; } public int getEnd () { return end ; MST[rv.UOI4Mutator]MSP[N] } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; MST[rv.UOI3Mutator]MSP[N] } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; MST[PrimitiveReturnsMutator]MSP[N] } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; MST[rv.UOI1Mutator]MSP[N] } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; MST[rv.UOI2Mutator]MSP[N] } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; } public int getDiag () { return diag ; MST[ReturnValsMutator]MSP[N] }
return start ; } public int getEnd () { return end ; MST[rv.ABSMutator]MSP[N] } public int getDiag () { return diag ; }
return start ; } public int getEnd () { return end ; } public int getDiag () { return diag ; MST[PrimitiveReturnsMutator]MSP[N] }
return start ; MST[ReturnValsMutator]MSP[N] } public int getEnd () { return end ; } public int getDiag () { return diag ; }
return start ; MST[PrimitiveReturnsMutator]MSP[N] } public int getEnd () { return end ; } public int getDiag () { return diag ; }
return start ; MST[rv.ABSMutator]MSP[N] } public int getEnd () { return end ; } public int getDiag () { return diag ; }
return start ; MST[rv.UOI2Mutator]MSP[N] } public int getEnd () { return end ; } public int getDiag () { return diag ; }
return start ; MST[rv.UOI1Mutator]MSP[N] } public int getEnd () { return end ; } public int getDiag () { return diag ; }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.AOD1Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD2Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ABSMutator]MSP[N] vUp [ i ] = x -- ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[MathMutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI3Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI4Mutator]MSP[N]
buildScript ( start1 , middle . getStart () , MST[rv.UOI1Mutator]MSP[S] start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI3Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.AOR3Mutator]MSP[S] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
int y = x - start1 + start2 - k ; MST[rv.UOI4Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ROR1Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[MathMutator]MSP[N] } int x = vUp [ i ] - 1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR2Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR1Mutator]MSP[N] return script ; }
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI2Mutator]MSP[N] if ( middle == null
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[NegateConditionalsMutator]MSP[S]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ABSMutator]MSP[N]
final int i = k + offset - delta ; MST[rv.ABSMutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOD1Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI4Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI4Mutator]MSP[N] && end < end1
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[InlineConstantMutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
int y = x - start1 + start2 - k ; MST[MathMutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI2Mutator]MSP[N] } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR4Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI2Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI4Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI1Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ABSMutator]MSP[S] int i = start1 ; int j = start2 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI4Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR4Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI4Mutator]MSP[N] }
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.AOD1Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOD2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.ROR2Mutator]MSP[S] ++ end ; } return new Snake ( start , end , diag ) ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[MathMutator]MSP[N] } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI2Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.AOR1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.CRCR6Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N]
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[rv.AOR3Mutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.ABSMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.UOI1Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOD2Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[ConditionalsBoundaryMutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI1Mutator]MSP[N] && end < end1
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI1Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ; MST[rv.UOI4Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR3Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR3Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] int i = start1 ; int j = start2 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR4Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; MST[rv.UOI2Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
return null ; } final int delta = m - n ; MST[rv.AOR3Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR5Mutator]MSP[S]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[NegateConditionalsMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[RemoveConditionalMutator_ORDER_IF]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ABSMutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.AOR2Mutator]MSP[S] int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOD2Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI2Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.ABSMutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI3Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; MST[rv.UOI2Mutator]MSP[N] while ( end - diag < end2 && end < end1
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.ABSMutator]MSP[N] } int x = vUp [ i ] - 1 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI1Mutator]MSP[N] } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ROR3Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.AOR1Mutator]MSP[N] && end < end1
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[NegateConditionalsMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR3Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.AOR3Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR5Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[MathMutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.AOR2Mutator]MSP[N] script ) ; } } public int getStart () {
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI2Mutator]MSP[S] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOD1Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , MST[rv.AOD1Mutator]MSP[N] script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.CRCR4Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR4Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR4Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI2Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR2Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI4Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI1Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR1Mutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.ABSMutator]MSP[N] if ( middle == null
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; MST[MathMutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.AOR3Mutator]MSP[N]
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.AOR4Mutator]MSP[N] && end < end1
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR2Mutator]MSP[S] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.ABSMutator]MSP[N] } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ABSMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI3Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; MST[rv.UOI4Mutator]MSP[N] int j = start2 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI3Mutator]MSP[S]
int y = x - start1 + start2 - k ; MST[rv.AOD2Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.ABSMutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR5Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , MST[VoidMethodCallMutator]MSP[N] middle . getEnd () - middle . getDiag () , end2 , script ) ; } } public int getStart () {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; MST[experimental.RemoveIncrementsMutator]MSP[N] } else { if ( end1 - start1 > end2 - start2 ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.UOI4Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR3Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ABSMutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI3Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[NonVoidMethodCallMutator]MSP[N] script ) ; } } public int getStart () {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI3Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; ++ y ; MST[IncrementsMutator]MSP[N] }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI1Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] if ( middle == null
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.ROR5Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR2Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ABSMutator]MSP[N] && end < end1
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[MathMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.UOI1Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.AOD2Mutator]MSP[N] && end < end1
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NegateConditionalsMutator]MSP[N] vUp [ i ] = x -- ;
while ( i < end1 || j < end2 ) { MST[rv.UOI1Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[MathMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR1Mutator]MSP[N] return script ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.AOD1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.CRCR3Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR6Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI1Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI2Mutator]MSP[S]
final int i = k + offset ; MST[rv.ABSMutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[ConditionalsBoundaryMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ABSMutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.UOI1Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR2Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.ROR5Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI1Mutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOD1Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.AOR4Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI2Mutator]MSP[N] int y = x - start1 + start2 - k ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
while ( i < end1 || j < end2 ) { MST[NegateConditionalsMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR2Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[ConditionalsBoundaryMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOD2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI1Mutator]MSP[N] && end < end1
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[NegateConditionalsMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI4Mutator]MSP[N] } else {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI2Mutator]MSP[N] int i = start1 ; int j = start2 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset - delta ; MST[rv.AOR2Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI3Mutator]MSP[N] ++ y ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset - delta ; MST[MathMutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[InlineConstantMutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[NegateConditionalsMutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR3Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.UOI2Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ROR4Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[ConditionalsBoundaryMutator]MSP[S] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] && end < end1
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.ABSMutator]MSP[N]
final int i = k + offset ; MST[rv.UOI3Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI1Mutator]MSP[N] if ( middle == null
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR5Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[NegateConditionalsMutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.AOR1Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[MathMutator]MSP[S] int i = start1 ; int j = start2 ;
while ( i < end1 || j < end2 ) { MST[rv.ROR4Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.CRCR3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
while ( i < end1 || j < end2 ) { MST[rv.ROR5Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR4Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.ABSMutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[NullReturnValsMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI3Mutator]MSP[N] } else {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR5Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[NullReturnValsMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ABSMutator]MSP[N]
final int i = k + offset - delta ; MST[rv.UOI2Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR2Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI1Mutator]MSP[S] }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.CRCR5Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] vDown [ 1 + offset ] = start1 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR4Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.UOI2Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI3Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.AOR3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI1Mutator]MSP[N] if ( m == 0 || n == 0 ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR4Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI2Mutator]MSP[N] vUp [ i ] = x -- ;
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; MST[rv.ABSMutator]MSP[N] while ( end - diag < end2 && end < end1
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR5Mutator]MSP[N] vUp [ i ] = x -- ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR5Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; MST[rv.UOI1Mutator]MSP[N] int j = start2 ;
final int i = k + offset - delta ; MST[rv.AOR1Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.AOR4Mutator]MSP[N] if ( m == 0 || n == 0 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ROR4Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI3Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOD1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.AOR2Mutator]MSP[N] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[rv.UOI4Mutator]MSP[N] script ) ; } } public int getStart () {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.ABSMutator]MSP[N] }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI2Mutator]MSP[S] }
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.CRCR2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI4Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[MathMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOD1Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.CRCR5Mutator]MSP[N] } else {
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI4Mutator]MSP[S] vDown [ i ] = ++ x ; ++ y ; }
while ( i < end1 || j < end2 ) { MST[rv.UOI4Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI4Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI1Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[ConditionalsBoundaryMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI2Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.ABSMutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOR3Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.AOR1Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset - delta ; if ( k == delta - d MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI3Mutator]MSP[N] int i = start1 ; int j = start2 ;
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; if ( middle == null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; } buildScript ( middle . getEnd () , end1 , middle . getEnd () - middle . getDiag () , end2 , MST[MathMutator]MSP[N] script ) ; } } public int getStart () {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI4Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
int y = x - start1 + start2 - k ; MST[rv.AOR3Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.AOR2Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOD2Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI3Mutator]MSP[N] int y = x - start1 + start2 - k ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR3Mutator]MSP[S] if ( vUp [ i - delta ] <= vDown [ i ] ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR4Mutator]MSP[S] && end < end1
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ROR1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ABSMutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[InlineConstantMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR2Mutator]MSP[N]
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.AOD1Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[MathMutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI1Mutator]MSP[N] } else {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.ABSMutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI2Mutator]MSP[N] && end < end1
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[NonVoidMethodCallMutator]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ABSMutator]MSP[S] int i = start1 ; int j = start2 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI4Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ROR4Mutator]MSP[S] int i = start1 ; int j = start2 ;
int y = x - start1 + start2 - k ; MST[rv.AOD1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.AOD2Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ROR3Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR2Mutator]MSP[N]
final int i = k + offset - delta ; MST[rv.UOI3Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR2Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR5Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI3Mutator]MSP[N]
int y = x - start1 + start2 - k ; MST[rv.ABSMutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
return null ; } final int delta = m - n ; MST[rv.UOI3Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; MST[rv.ABSMutator]MSP[N] ++ j ; } } } } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR1Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR1Mutator]MSP[S]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[ConditionalsBoundaryMutator]MSP[N] && end < end1
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.ABSMutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOD2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI1Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
while ( i < end1 || j < end2 ) { MST[rv.UOI3Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.CRCR3Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vUp [ 1 + offset ] = end1 + 1 ; MST[InlineConstantMutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[NegateConditionalsMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset - delta ; MST[rv.UOI4Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; MST[rv.UOI1Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.CRCR2Mutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[NegateConditionalsMutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[MathMutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI4Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR1Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.ROR2Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR3Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR4Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.ROR4Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.UOI1Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
while ( i < end1 || j < end2 ) { MST[rv.UOI1Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
buildScript ( start1 , middle . getStart () , start2 , middle . getStart () - middle . getDiag () , script ) ; for ( int i = middle . getStart () ; i < middle . getEnd () ; ++ i ) { MST[rv.UOI3Mutator]MSP[N]
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.AOD2Mutator]MSP[N] if ( m == 0 || n == 0 ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ROR1Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
final int i = k + offset - delta ; MST[rv.AOR4Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI2Mutator]MSP[S] ++ y ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; ++ j ; MST[IncrementsMutator]MSP[N] } } } } else {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI1Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR3Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[ConstructorCallMutator]MSP[S] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.ROR5Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR5Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; MST[rv.UOI2Mutator]MSP[S] final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[InlineConstantMutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
int y = x - start1 + start2 - k ; MST[rv.UOI1Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.ROR3Mutator]MSP[S]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOR4Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.CRCR6Mutator]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[rv.UOI2Mutator]MSP[N]
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[NegateConditionalsMutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.AOD2Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI3Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[rv.UOI4Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR5Mutator]MSP[N] return script ; }
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ; MST[rv.UOI1Mutator]MSP[S]
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.AOR4Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.CRCR6Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.UOI3Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR2Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ROR5Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.UOI3Mutator]MSP[N] int i = start1 ; int j = start2 ;
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.UOI1Mutator]MSP[S] } int x = vUp [ i ] - 1 ;
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.AOR4Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.ROR4Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.ABSMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[NegateConditionalsMutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI4Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; if ( k == delta - d MST[MathMutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR1Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; if ( m == 0 || n == 0 ) { MST[NegateConditionalsMutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[ConditionalsBoundaryMutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI2Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR1Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.CRCR1Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI3Mutator]MSP[N] && end < end1
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.UOI4Mutator]MSP[S] && end < end1
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR1Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[MathMutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR2Mutator]MSP[S] vUp [ i ] = x -- ;
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; MST[ConstructorCallMutator]MSP[N] buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; return script ; }
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[InlineConstantMutator]MSP[N] return script ; }
vUp [ 1 + offset ] = end1 + 1 ; MST[rv.AOR1Mutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.ROR5Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { MST[rv.ABSMutator]MSP[S] int i = start1 ; int j = start2 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ROR1Mutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOD2Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.UOI2Mutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.CRCR5Mutator]MSP[N]
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ABSMutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI1Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
int y = x - start1 + start2 - k ; MST[rv.UOI3Mutator]MSP[N] while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[NegateConditionalsMutator]MSP[N]
return null ; } final int delta = m - n ; MST[rv.UOI4Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.UOI4Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.UOI4Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR2Mutator]MSP[S] && end < end1
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR1Mutator]MSP[N] vDown [ 1 + offset ] = start1 ;
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[rv.UOI4Mutator]MSP[N] if ( middle == null
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.UOI2Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; MST[rv.CRCR2Mutator]MSP[N] } int x = vUp [ i ] - 1 ;
script . append ( new DeleteCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; } else { script . append ( new InsertCommand <> ( sequence2 . get ( j ) ) ) ; MST[rv.UOI3Mutator]MSP[N] ++ j ; } } } } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOD2Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[MathMutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.AOR2Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ROR1Mutator]MSP[N] && end < end1
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.CRCR2Mutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
while ( i < end1 || j < end2 ) { MST[rv.ABSMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[ConditionalsBoundaryMutator]MSP[N]
return null ; } final int delta = m - n ; MST[rv.AOD1Mutator]MSP[N] final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR2Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] if ( vUp [ i ] <= vDown [ i + delta ] ) {
vUp [ 1 + offset ] = end1 + 1 ; MST[InlineConstantMutator]MSP[N] for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.AOR4Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; final int n = end2 - start2 ; MST[rv.UOI4Mutator]MSP[N] if ( m == 0 || n == 0 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI2Mutator]MSP[N]
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.ABSMutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI3Mutator]MSP[N] }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ROR2Mutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI2Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[NegateConditionalsMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.ABSMutator]MSP[N] int y = x - start1 + start2 - k ;
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.UOI4Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI3Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
final int i = k + offset - delta ; if ( k == delta - d MST[ConditionalsBoundaryMutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[NonVoidMethodCallMutator]MSP[N] return script ; }
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR5Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[rv.ROR2Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
while ( i < end1 || j < end2 ) { MST[rv.ROR1Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; MST[rv.UOI4Mutator]MSP[N] ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.UOI1Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.CRCR2Mutator]MSP[N] } else {
while ( i < end1 || j < end2 ) { if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) { MST[rv.ROR4Mutator]MSP[S]
final int i = k + offset - delta ; MST[rv.AOD2Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI2Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
y -- ; MST[IncrementsMutator]MSP[N] } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.UOI3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
private Snake buildSnake ( final int start , final int diag , final int end1 , final int end2 ) { int end = start ; while ( end - diag < end2 MST[rv.ABSMutator]MSP[S] && end < end1
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[MathMutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; MST[rv.UOI3Mutator]MSP[N] int j = start2 ;
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
script . append ( new KeepCommand <> ( sequence1 . get ( i ) ) ) ; ++ i ; ++ j ; } else { if ( end1 - start1 > end2 - start2 ) { MST[rv.UOI2Mutator]MSP[S]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ABSMutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.AOR1Mutator]MSP[N]
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[rv.UOI4Mutator]MSP[N] }
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOR4Mutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( middle == null
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[InlineConstantMutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR2Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.UOI3Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[rv.ABSMutator]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
|| middle . getStart () == end1 && middle . getDiag () == end1 - end2 MST[rv.UOI2Mutator]MSP[N] || middle . getEnd () == start1 && middle . getDiag () == start1 - start2 ) { int i = start1 ; int j = start2 ;
final int i = k + offset - delta ; if ( k == delta - d MST[rv.UOI1Mutator]MSP[N] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.ABSMutator]MSP[N]
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; if ( middle == null MST[NegateConditionalsMutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI2Mutator]MSP[S] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.UOI3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
public EditScript < T > getScript () { final EditScript < T > script = new EditScript <> () ; buildScript ( 0 , sequence1 . size () , 0 , sequence2 . size () , script ) ; MST[rv.CRCR5Mutator]MSP[N] return script ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ; MST[rv.UOI4Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[rv.ABSMutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.UOI2Mutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[rv.AOD2Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
private Snake getMiddleSnake ( final int start1 , final int end1 , final int start2 , final int end2 ) { final int m = end1 - start1 ; MST[rv.UOI4Mutator]MSP[N] final int n = end2 - start2 ; if ( m == 0 || n == 0 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI2Mutator]MSP[N]
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) { MST[rv.UOI4Mutator]MSP[N]
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR3Mutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { MST[rv.AOR1Mutator]MSP[N] ++ end ; } return new Snake ( start , end , diag ) ; }
return buildSnake ( vUp [ i ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.ABSMutator]MSP[N] } } } } throw new RuntimeException ( lr_1 ) ; }
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 MST[RemoveConditionalMutator_ORDER_IF]MSP[N] && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vUp [ i ] = x -- ;
final int i = k + offset ; MST[rv.UOI2Mutator]MSP[N] if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; MST[rv.UOI1Mutator]MSP[N] int y = x - start1 + start2 - k ;
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[rv.ROR4Mutator]MSP[N] for ( int k = - d ; k <= d ; k += 2 ) {
return buildSnake ( vUp [ i - delta ] , k + start1 - start2 , end1 , end2 ) ; MST[rv.AOR3Mutator]MSP[N] } } } for ( int k = delta - d ; k <= delta + d ; k += 2 ) {
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.UOI4Mutator]MSP[N] vDown [ i ] = vDown [ i + 1 ] ; } else {
vDown [ i ] = vDown [ i - 1 ] + 1 ; MST[rv.ABSMutator]MSP[N] } int x = vDown [ i ] ; int y = x - start1 + start2 - k ;
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ; MST[rv.AOD1Mutator]MSP[N]
while ( i < end1 || j < end2 ) { MST[rv.ROR3Mutator]MSP[N] if ( i < end1 && j < end2 && equator . equate ( sequence1 . get ( i ) , sequence2 . get ( j ) ) ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.ABSMutator]MSP[N]
vDown [ i ] = vDown [ i - 1 ] + 1 ; } int x = vDown [ i ] ; int y = x - start1 + start2 - k ; MST[MathMutator]MSP[N]
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; vDown [ 1 + offset ] = start1 ; MST[rv.AOR2Mutator]MSP[N]
int y = x - start1 + start2 - k ; while ( x >= start1 && y >= start2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR4Mutator]MSP[N] vUp [ i ] = x -- ;
final int i = k + offset - delta ; MST[rv.AOR3Mutator]MSP[N] if ( k == delta - d || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { vDown [ i ] = ++ x ; MST[rv.UOI2Mutator]MSP[N] ++ y ; }
vUp [ i ] = vUp [ i + 1 ] - 1 ; MST[rv.ABSMutator]MSP[N] } else { vUp [ i ] = vUp [ i - 1 ] ; } int x = vUp [ i ] - 1 ;
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { vDown [ i ] = vDown [ i + 1 ] ; MST[rv.UOI3Mutator]MSP[N] } else {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { if ( vUp [ i ] <= vDown [ i + delta ] ) { MST[rv.AOD2Mutator]MSP[N]
while ( x < end1 && y < end2 && equator . equate ( sequence1 . get ( x ) , sequence2 . get ( y ) ) ) { MST[rv.ROR3Mutator]MSP[N] vDown [ i ] = ++ x ; ++ y ; }
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.ABSMutator]MSP[N] vDown [ 1 + offset ] = start1 ;
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[S] for ( int k = - d ; k <= d ; k += 2 ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ROR5Mutator]MSP[N]
final int i = k + offset - delta ; if ( k == delta - d MST[rv.AOR4Mutator]MSP[S] || k != delta + d && vUp [ i + 1 ] <= vUp [ i - 1 ] ) {
&& equator . equate ( sequence1 . get ( end ) , sequence2 . get ( end - diag ) ) ) { ++ end ; } return new Snake ( start , end , diag ) ; MST[NullReturnValsMutator]MSP[N] }
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { if ( vUp [ i - delta ] <= vDown [ i ] ) { MST[rv.ABSMutator]MSP[N]
final int i = k + offset ; if ( k == - d || k != d && vDown [ i - 1 ] < vDown [ i + 1 ] ) { MST[rv.AOD1Mutator]MSP[S] vDown [ i ] = vDown [ i + 1 ] ; } else {
private void buildScript ( final int start1 , final int end1 , final int start2 , final int end2 , final EditScript < T > script ) { final Snake middle = getMiddleSnake ( start1 , end1 , start2 , end2 ) ; if ( middle == null MST[rv.ROR5Mutator]MSP[N]
y -- ; } if ( delta % 2 == 0 && - d <= k && k <= d ) { MST[MathMutator]MSP[N] if ( vUp [ i ] <= vDown [ i + delta ] ) {
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.UOI3Mutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
vUp [ 1 + offset ] = end1 + 1 ; for ( int d = 0 ; d <= offset ; ++ d ) { for ( int k = - d ; k <= d ; k += 2 ) { MST[rv.ROR3Mutator]MSP[N]
if ( delta % 2 != 0 && delta - d <= k && k <= delta + d ) { MST[rv.ABSMutator]MSP[N] if ( vUp [ i - delta ] <= vDown [ i ] ) {
return null ; } final int delta = m - n ; final int sum = n + m ; final int offset = ( sum % 2 == 0 ? sum : sum + 1 ) / 2 ; MST[rv.AOR1Mutator]MSP[S] vDown [ 1 + offset ] = start1 ;
