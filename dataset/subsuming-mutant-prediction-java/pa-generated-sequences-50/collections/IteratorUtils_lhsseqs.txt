if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[experimental.NakedReceiverMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > String toString ( final Iterator < E > iterator , final Transformer < ? super E , String > transformer ) { return toString ( iterator , transformer , DEFAULT_TOSTRING_DELIMITER , MST[NonVoidMethodCallMutator]MSP[] DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[rv.CRCR2Mutator]MSP[] return list . toArray () ; }
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[NegateConditionalsMutator]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] iterator . next () ; size ++ ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.UOI2Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[rv.CRCR5Mutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[] iterator . next () ; size ++ ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[InlineConstantMutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ; MST[VoidMethodCallMutator]MSP[]
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[ReturnValsMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[ReturnValsMutator]MSP[] }
} else if ( obj . getClass () . isArray () ) { return new ArrayIterator <> ( obj ) ; MST[NullReturnValsMutator]MSP[] } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[rv.ROR2Mutator]MSP[]
final List < E > list = new ArrayList <> ( estimatedSize ) ; MST[rv.ABSMutator]MSP[] while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
if ( obj instanceof Node ) { MST[rv.ROR4Mutator]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > String toString ( final Iterator < E > iterator , final Transformer < ? super E , String > transformer ) { return toString ( iterator , transformer , DEFAULT_TOSTRING_DELIMITER , MST[EmptyObjectReturnValsMutator]MSP[] DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
Objects . requireNonNull ( predicate , lr_4 ) ; return new FilterListIterator <> ( listIterator , predicate ) ; MST[ReturnValsMutator]MSP[] } public static < E > ResettableIterator < E > loopingIterator ( final Collection < ? extends E > collection ) {
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[]
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[rv.CRCR3Mutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.ROR5Mutator]MSP[] }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) {
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] i -- ;
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[] iterator . next () ; size ++ ;
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
} } return size ; } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , MST[EmptyObjectReturnValsMutator]MSP[] DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[NonVoidMethodCallMutator]MSP[] return list . toArray () ; }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[]
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; MST[rv.CRCR3Mutator]MSP[] } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; MST[ConstructorCallMutator]MSP[] } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[NonVoidMethodCallMutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; MST[rv.UOI2Mutator]MSP[] } } } return - 1 ; }
public static < K , V > OrderedMapIterator < K , V > emptyOrderedMapIterator () { return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > ResettableIterator < E > singletonIterator ( final E object ) {
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.CRCR2Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
return it ; } } } catch ( final RuntimeException e ) { } catch ( final NoSuchMethodException e ) { } catch ( final IllegalAccessException e ) { } catch ( final InvocationTargetException e ) { } return singletonIterator ( obj ) ; MST[ReturnValsMutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[InlineConstantMutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; MST[rv.CRCR1Mutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return index ; } } } return - 1 ; }
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration , final Collection < ? super E > removeCollection ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) , MST[NullReturnValsMutator]MSP[]
public static < E > Iterator < E > filteredIterator ( final Iterator < ? extends E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( predicate , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[]
public static < E > ListIterator < E > toListIterator ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] return new ListIteratorWrapper <> ( iterator ) ; }
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; MST[ArgumentPropagationMutator]MSP[] final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) {
return iterator == null || ! iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[InlineConstantMutator]MSP[] return list . toArray () ; }
return iterator == null || ! iterator . hasNext () ; } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.CRCR1Mutator]MSP[] }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR2Mutator]MSP[] return element ; } } } return null ; }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
} else if ( obj . getClass () . isArray () ) { MST[rv.ROR4Mutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[ConstructorCallMutator]MSP[] }
if ( obj instanceof Map ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[rv.ROR3Mutator]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR3Mutator]MSP[] return index ; } } } return - 1 ; }
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[rv.UOI3Mutator]MSP[] }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; MST[NullReturnValsMutator]MSP[] } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[rv.ROR3Mutator]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR5Mutator]MSP[] }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; MST[ReturnValsMutator]MSP[] } } } return null ; }
Objects . requireNonNull ( predicate , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[] return new FilterListIterator <> ( listIterator , predicate ) ; } public static < E > ResettableIterator < E > loopingIterator ( final Collection < ? extends E > collection ) {
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[rv.ABSMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
if ( iterator != null ) { MST[rv.ROR5Mutator]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[ReturnValsMutator]MSP[] }
return get ( iterator , 0 ) ; MST[NullReturnValsMutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
public static < E > ResettableIterator < E > emptyIterator () { return EmptyIterator . <E > resettableEmptyIterator () ; } public static < E > ResettableListIterator < E > emptyListIterator () { return EmptyListIterator . <E > resettableEmptyListIterator () ; MST[ReturnValsMutator]MSP[] }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[rv.CRCR6Mutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.UOI1Mutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] while ( iterator . hasNext () ) {
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.ABSMutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] closure . execute ( element ) ;
if ( i == - 1 ) { MST[rv.CRCR5Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( stringBuilder . length () > prefix . length () ) {
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[rv.AOD1Mutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; MST[rv.UOI2Mutator]MSP[] while ( iterator . hasNext () ) { i -- ;
final Iterator < ? extends E > ... iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.CRCR5Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; MST[ReturnValsMutator]MSP[] } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; MST[NonVoidMethodCallMutator]MSP[] } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
return get ( iterator , 0 ) ; MST[ReturnValsMutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[ConstructorCallMutator]MSP[] }
} } return size ; MST[rv.UOI3Mutator]MSP[] } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
Objects . requireNonNull ( predicate , lr_4 ) ; return new FilterListIterator <> ( listIterator , predicate ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ResettableIterator < E > loopingIterator ( final Collection < ? extends E > collection ) {
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[rv.ROR5Mutator]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > int indexOf ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[rv.ROR5Mutator]MSP[]
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR5Mutator]MSP[] return element ; } } } return null ; }
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[]
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration , final Collection < ? super E > removeCollection ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) , MST[NonVoidMethodCallMutator]MSP[]
} else if ( obj . getClass () . isArray () ) { return new ArrayIterator <> ( obj ) ; MST[ConstructorCallMutator]MSP[] } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] i -- ;
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[InlineConstantMutator]MSP[] }
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[ConstructorCallMutator]MSP[] }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[ReturnValsMutator]MSP[] }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[rv.ROR3Mutator]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
public static < E > int indexOf ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( iterator != null ) {
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[NegateConditionalsMutator]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
return iterator == null || ! iterator . hasNext () ; MST[NegateConditionalsMutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR5Mutator]MSP[] }
return new FilterIterator <> ( iterator , predicate ) ; } public static < E > ListIterator < E > filteredListIterator ( final ListIterator < ? extends E > listIterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( listIterator , lr_5 ) ; MST[NonVoidMethodCallMutator]MSP[]
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.ROR3Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.ROR5Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[] i -- ;
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > a , final Iterator < ? extends E > b ) { return new ZippingIterator <> ( a , b ) ; MST[ConstructorCallMutator]MSP[] }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[NegateConditionalsMutator]MSP[] return element ; } } } return null ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[rv.ROR5Mutator]MSP[] while ( iterator . hasNext () ) {
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[NullReturnValsMutator]MSP[] }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[rv.UOI3Mutator]MSP[] }
if ( i == - 1 ) { MST[rv.CRCR2Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
if ( i == - 1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
} else if ( obj . getClass () . isArray () ) { return new ArrayIterator <> ( obj ) ; MST[ReturnValsMutator]MSP[] } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[ConstructorCallMutator]MSP[] }
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[rv.CRCR5Mutator]MSP[] }
if ( obj instanceof Node ) { MST[rv.ROR1Mutator]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] closure . execute ( element ) ;
if ( iterator != null ) { MST[NegateConditionalsMutator]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final E ... array ) { return new ObjectArrayListIterator <> ( array ) ; } public static < E > ResettableListIterator < E > arrayListIterator ( final Object array ) { return new ArrayListIterator <> ( array ) ; MST[ConstructorCallMutator]MSP[]
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; MST[ReturnValsMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI1Mutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
if ( i == - 1 ) { return iterator . next () ; MST[NonVoidMethodCallMutator]MSP[] } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[NegateConditionalsMutator]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[rv.ROR4Mutator]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.ROR2Mutator]MSP[] }
final Transformer < ? super I , ? extends O > transformer ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( transformer , lr_3 ) ; return new TransformIterator <> ( iterator , transformer ) ; MST[ReturnValsMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final E ... array ) { return new ObjectArrayListIterator <> ( array ) ; MST[ReturnValsMutator]MSP[] } public static < E > ResettableListIterator < E > arrayListIterator ( final Object array ) { return new ArrayListIterator <> ( array ) ;
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[rv.CRCR3Mutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[NegateConditionalsMutator]MSP[] while ( iterator . hasNext () ) {
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[NegateConditionalsMutator]MSP[] while ( iterator . hasNext () ) {
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] return new IteratorIterable <> ( iterator , true ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
if ( obj instanceof Map ) { MST[rv.ROR2Mutator]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[rv.UOI2Mutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.CRCR6Mutator]MSP[] }
return new FilterIterator <> ( iterator , predicate ) ; MST[ConstructorCallMutator]MSP[] } public static < E > ListIterator < E > filteredListIterator ( final ListIterator < ? extends E > listIterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( listIterator , lr_5 ) ;
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[rv.AOR3Mutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
final List < E > list = toList ( iterator , 100 ) ; MST[rv.CRCR3Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
final Iterator < ? extends E > ... iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; MST[ReturnValsMutator]MSP[] }
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration , final Collection < ? super E > removeCollection ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) , MST[ArgumentPropagationMutator]MSP[]
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[rv.ROR5Mutator]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return element ; } } } return null ; }
} if ( obj instanceof Object [] ) { MST[rv.ROR3Mutator]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; MST[rv.CRCR5Mutator]MSP[] } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
return get ( iterator , 0 ) ; MST[rv.CRCR6Mutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; MST[rv.CRCR6Mutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[ConstructorCallMutator]MSP[] }
if ( i == - 1 ) { MST[rv.ROR2Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR5Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[rv.ABSMutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[rv.CRCR6Mutator]MSP[] }
} else if ( obj . getClass () . isArray () ) { MST[NonVoidMethodCallMutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
if ( obj == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[]
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
final E element = iterator . next () ; closure . execute ( element ) ; MST[VoidMethodCallMutator]MSP[] } } } public static < E > E forEachButLast ( final Iterator < E > iterator , final Closure < ? super E > closure ) {
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[ReturnValsMutator]MSP[] }
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) ) ; MST[ArgumentPropagationMutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[rv.ROR5Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[rv.ROR5Mutator]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[NegateConditionalsMutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
} } return size ; } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , MST[NonVoidMethodCallMutator]MSP[] DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Iterator < ? extends E > iterator1 , final Iterator < ? extends E > iterator2 ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[rv.ROR5Mutator]MSP[]
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; MST[ArgumentPropagationMutator]MSP[] Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) {
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[rv.ROR1Mutator]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
final Iterator < ? extends E > ... iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[] i -- ;
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] iterator . next () ; size ++ ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] if ( estimatedSize < 1 ) { throw new IllegalArgumentException ( lr_13 ) ; }
return get ( iterator , 0 ) ; MST[rv.CRCR1Mutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
final Transformer < ? super I , ? extends O > transformer ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] Objects . requireNonNull ( transformer , lr_3 ) ; return new TransformIterator <> ( iterator , transformer ) ; }
public static < E > Iterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) { return PushbackIterator . pushbackIterator ( iterator ) ; MST[NullReturnValsMutator]MSP[] }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[rv.CRCR4Mutator]MSP[] return list . toArray () ; }
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[rv.ROR4Mutator]MSP[]
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[rv.CRCR1Mutator]MSP[] }
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[rv.ROR4Mutator]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[] iterator . next () ; size ++ ;
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; MST[ReturnValsMutator]MSP[] }
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[NonVoidMethodCallMutator]MSP[]
Objects . requireNonNull ( predicate , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[] return new FilterListIterator <> ( listIterator , predicate ) ; } public static < E > ResettableIterator < E > loopingIterator ( final Collection < ? extends E > collection ) {
if ( obj == null ) { return emptyIterator () ; MST[NullReturnValsMutator]MSP[] } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
if ( obj instanceof Node ) { MST[rv.ROR2Mutator]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
final List < E > list = toList ( iterator , 100 ) ; @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; MST[NullReturnValsMutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[NegateConditionalsMutator]MSP[] return index ; } } } return - 1 ; }
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; MST[ArgumentPropagationMutator]MSP[] } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; MST[rv.UOI3Mutator]MSP[] while ( iterator . hasNext () ) { i -- ;
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; MST[ReturnValsMutator]MSP[] }
final Iterator < ? extends E > ... iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[NegateConditionalsMutator]MSP[] comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Iterator < ? extends E > iterator1 , final Iterator < ? extends E > iterator2 ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[rv.UOI4Mutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR4Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[ConstructorCallMutator]MSP[] }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[rv.CRCR4Mutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) {
comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterator1 , iterator2 ) ; MST[NullReturnValsMutator]MSP[] } public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator ,
final Transformer < ? super I , ? extends O > transformer ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( transformer , lr_3 ) ; return new TransformIterator <> ( iterator , transformer ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[NullReturnValsMutator]MSP[] }
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; MST[NonVoidMethodCallMutator]MSP[] stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
final Iterator < ? extends E > ... iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; MST[ConstructorCallMutator]MSP[] }
if ( i == - 1 ) { MST[InlineConstantMutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ; MST[ReturnValsMutator]MSP[]
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR2Mutator]MSP[] }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[NullReturnValsMutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[rv.ROR4Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
} if ( obj instanceof Object [] ) { MST[rv.ROR4Mutator]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.ROR2Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ;
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; MST[experimental.NakedReceiverMutator]MSP[] stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
public static < E > ListIterator < E > toListIterator ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] return new ListIteratorWrapper <> ( iterator ) ; }
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[ReturnValsMutator]MSP[] }
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[rv.ROR3Mutator]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI2Mutator]MSP[] }
final Iterator < ? extends E > ... iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[rv.ROR5Mutator]MSP[] comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; }
public static < E > Iterator < E > filteredIterator ( final Iterator < ? extends E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( predicate , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[]
} } return size ; MST[rv.UOI1Mutator]MSP[] } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[rv.ROR5Mutator]MSP[] while ( iterator . hasNext () ) {
return new SingletonIterator <> ( object ) ; } public static < E > ListIterator < E > singletonListIterator ( final E object ) { return new SingletonListIterator <> ( object ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.ABSMutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final E ... array ) { return new ObjectArrayIterator <> ( array ) ; } public static < E > ResettableIterator < E > arrayIterator ( final Object array ) { return new ArrayIterator <> ( array ) ; MST[NullReturnValsMutator]MSP[]
public static < E > ResettableListIterator < E > arrayListIterator ( final E ... array ) { return new ObjectArrayListIterator <> ( array ) ; } public static < E > ResettableListIterator < E > arrayListIterator ( final Object array ) { return new ArrayListIterator <> ( array ) ; MST[NullReturnValsMutator]MSP[]
public static < E > int indexOf ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[] if ( iterator != null ) {
if ( i == - 1 ) { MST[rv.ABSMutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
if ( obj == null ) { MST[NegateConditionalsMutator]MSP[] return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[rv.ABSMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
if ( obj instanceof Map ) { MST[rv.ROR3Mutator]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; MST[ConstructorCallMutator]MSP[] }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[rv.ROR1Mutator]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
return new FilterIterator <> ( iterator , predicate ) ; MST[ReturnValsMutator]MSP[] } public static < E > ListIterator < E > filteredListIterator ( final ListIterator < ? extends E > listIterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( listIterator , lr_5 ) ;
final List < E > list = toList ( iterator , 100 ) ; MST[rv.CRCR1Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
final List < E > list = toList ( iterator , 100 ) ; MST[rv.CRCR4Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ; MST[ReturnValsMutator]MSP[]
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.UOI3Mutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.CRCR5Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
} else if ( obj . getClass () . isArray () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[ConstructorCallMutator]MSP[] }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[rv.ROR2Mutator]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
public static < E > ResettableListIterator < E > arrayListIterator ( final E ... array ) { return new ObjectArrayListIterator <> ( array ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ResettableListIterator < E > arrayListIterator ( final Object array ) { return new ArrayListIterator <> ( array ) ;
final List < E > list = toList ( iterator , 100 ) ; @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; MST[NonVoidMethodCallMutator]MSP[] return list . toArray ( array ) ; }
final List < E > list = new ArrayList <> ( estimatedSize ) ; MST[rv.UOI3Mutator]MSP[] while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[]
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] while ( iterator . hasNext () ) {
} } return size ; } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , MST[ArgumentPropagationMutator]MSP[] DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[] i -- ;
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
public static < E > ResettableIterator < E > emptyIterator () { return EmptyIterator . <E > resettableEmptyIterator () ; MST[ReturnValsMutator]MSP[] } public static < E > ResettableListIterator < E > emptyListIterator () { return EmptyListIterator . <E > resettableEmptyListIterator () ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[IncrementsMutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI3Mutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[]
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Collection < Iterator < ? extends E > > iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return iterator == null || ! iterator . hasNext () ; MST[ReturnValsMutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR2Mutator]MSP[] }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; MST[rv.ABSMutator]MSP[] CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { i -- ;
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[] closure . execute ( element ) ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( estimatedSize < 1 ) { throw new IllegalArgumentException ( lr_13 ) ; }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ; MST[IncrementsMutator]MSP[]
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[rv.ROR5Mutator]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
} else { return element ; } } } return null ; } public static < E > E find ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; MST[ArgumentPropagationMutator]MSP[]
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > Iterator < E > chainedIterator ( final Iterator < ? extends E > ... iterators ) { return new IteratorChain <> ( iterators ) ; MST[ReturnValsMutator]MSP[] }
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
} } return size ; MST[PrimitiveReturnsMutator]MSP[] } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[ConstructorCallMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[ReturnValsMutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[]
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.UOI3Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; MST[ReturnValsMutator]MSP[] }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[rv.ROR1Mutator]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[rv.ROR1Mutator]MSP[]
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; MST[rv.UOI3Mutator]MSP[] CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { i -- ;
return iterator == null || ! iterator . hasNext () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
} else { return element ; MST[NullReturnValsMutator]MSP[] } } } return null ; } public static < E > E find ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ;
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; MST[ReturnValsMutator]MSP[] } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[]
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; MST[rv.UOI1Mutator]MSP[] CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { i -- ;
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[rv.UOI1Mutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] closure . execute ( element ) ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[rv.CRCR4Mutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[rv.CRCR2Mutator]MSP[] }
} } return size ; MST[rv.UOI4Mutator]MSP[] } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
if ( i == - 1 ) { MST[NegateConditionalsMutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[NegateConditionalsMutator]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
if ( obj == null ) { MST[rv.ROR5Mutator]MSP[] return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
public static < E > ResettableIterator < E > emptyIterator () { return EmptyIterator . <E > resettableEmptyIterator () ; } public static < E > ResettableListIterator < E > emptyListIterator () { return EmptyListIterator . <E > resettableEmptyListIterator () ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[] i -- ;
final List < E > list = toList ( iterator , 100 ) ; @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; MST[ArgumentPropagationMutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[]
public static < E > int indexOf ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; MST[PrimitiveReturnsMutator]MSP[] } } } return - 1 ; }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[BooleanTrueReturnValsMutator]MSP[] }
return it ; } } } catch ( final RuntimeException e ) { } catch ( final NoSuchMethodException e ) { } catch ( final IllegalAccessException e ) { } catch ( final InvocationTargetException e ) { } return singletonIterator ( obj ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
if ( obj instanceof Map ) { MST[NegateConditionalsMutator]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
final Transformer < ? super I , ? extends O > transformer ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( transformer , lr_3 ) ; return new TransformIterator <> ( iterator , transformer ) ; MST[ConstructorCallMutator]MSP[] }
if ( obj instanceof Map ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final E ... array ) { return new ObjectArrayListIterator <> ( array ) ; MST[ConstructorCallMutator]MSP[] } public static < E > ResettableListIterator < E > arrayListIterator ( final Object array ) { return new ArrayListIterator <> ( array ) ;
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ;
while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; MST[NullReturnValsMutator]MSP[] }
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return element ; } } } return null ; }
public static < E > Iterator < E > chainedIterator ( final Collection < Iterator < ? extends E > > iterators ) { return new IteratorChain <> ( iterators ) ; MST[ReturnValsMutator]MSP[] }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[]
if ( i == - 1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; MST[NullReturnValsMutator]MSP[] } } } return null ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; MST[ReturnValsMutator]MSP[] } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ;
if ( i == - 1 ) { MST[rv.UOI3Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; MST[ConstructorCallMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[rv.UOI1Mutator]MSP[] }
while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.CRCR3Mutator]MSP[] }
} else if ( obj . getClass () . isArray () ) { MST[rv.ROR2Mutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[experimental.NakedReceiverMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
if ( obj instanceof Map ) { MST[rv.ROR5Mutator]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
final List < E > list = toList ( iterator , 100 ) ; MST[rv.CRCR6Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
public static < E > ResettableIterator < E > arrayIterator ( final E ... array ) { return new ObjectArrayIterator <> ( array ) ; } public static < E > ResettableIterator < E > arrayIterator ( final Object array ) { return new ArrayIterator <> ( array ) ; MST[ConstructorCallMutator]MSP[]
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[rv.UOI1Mutator]MSP[] }
return new FilterIterator <> ( iterator , predicate ) ; } public static < E > ListIterator < E > filteredListIterator ( final ListIterator < ? extends E > listIterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( listIterator , lr_5 ) ; MST[ArgumentPropagationMutator]MSP[]
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR5Mutator]MSP[] return index ; } } } return - 1 ; }
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[NonVoidMethodCallMutator]MSP[]
if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[ConditionalsBoundaryMutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > Iterator < E > unmodifiableIterator ( final Iterator < E > iterator ) { return UnmodifiableIterator . unmodifiableIterator ( iterator ) ; MST[ArgumentPropagationMutator]MSP[] } public static < E > ListIterator < E > unmodifiableListIterator ( final ListIterator < E > listIterator ) {
} if ( obj instanceof Object [] ) { MST[rv.ROR1Mutator]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[rv.ROR4Mutator]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; MST[ReturnValsMutator]MSP[] } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; }
return iterator == null || ! iterator . hasNext () ; } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[]
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR2Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[rv.UOI2Mutator]MSP[] }
comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterator1 , iterator2 ) ; MST[ConstructorCallMutator]MSP[] } public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator ,
if ( obj instanceof Node ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; MST[NonVoidMethodCallMutator]MSP[] stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
return iterator == null || ! iterator . hasNext () ; MST[rv.ROR2Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; MST[rv.ABSMutator]MSP[] while ( iterator . hasNext () ) { i -- ;
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] final List < ? > list = toList ( iterator , 100 ) ; return list . toArray () ; }
public static < E > String toString ( final Iterator < E > iterator , final Transformer < ? super E , String > transformer , final String delimiter , final String prefix , final String suffix ) { Objects . requireNonNull ( transformer , lr_3 ) ; MST[NonVoidMethodCallMutator]MSP[]
public static < K , V > OrderedMapIterator < K , V > emptyOrderedMapIterator () { return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; MST[NullReturnValsMutator]MSP[] } public static < E > ResettableIterator < E > singletonIterator ( final E object ) {
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; MST[rv.UOI4Mutator]MSP[] } } } return - 1 ; }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[InlineConstantMutator]MSP[] }
public static < E > String toString ( final Iterator < E > iterator , final Transformer < ? super E , String > transformer ) { return toString ( iterator , transformer , DEFAULT_TOSTRING_DELIMITER , MST[ArgumentPropagationMutator]MSP[] DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
if ( obj == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
if ( i == - 1 ) { return iterator . next () ; MST[ReturnValsMutator]MSP[] } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[rv.ROR2Mutator]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[rv.ROR2Mutator]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
public static < E > Iterator < E > filteredIterator ( final Iterator < ? extends E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] Objects . requireNonNull ( predicate , lr_4 ) ;
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[rv.UOI3Mutator]MSP[] }
comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; MST[ReturnValsMutator]MSP[] } public static < E > Iterator < E > objectGraphIterator ( final E root ,
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[rv.CRCR6Mutator]MSP[] }
public static < E > OrderedIterator < E > emptyOrderedIterator () { return EmptyOrderedIterator . <E > emptyOrderedIterator () ; MST[NonVoidMethodCallMutator]MSP[] } public static < K , V > MapIterator < K , V > emptyMapIterator () { return EmptyMapIterator . <K , V > emptyMapIterator () ; }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[experimental.RemoveIncrementsMutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[ReturnValsMutator]MSP[] }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[rv.CRCR1Mutator]MSP[] return list . toArray () ; }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[rv.CRCR5Mutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.ROR4Mutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[NullReturnValsMutator]MSP[] }
if ( i == - 1 ) { MST[rv.ROR5Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
final Transformer < ? super I , ? extends O > transformer ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( transformer , lr_3 ) ; MST[ArgumentPropagationMutator]MSP[] return new TransformIterator <> ( iterator , transformer ) ; }
} else if ( obj . getClass () . isArray () ) { MST[NonVoidMethodCallMutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[NegateConditionalsMutator]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[rv.CRCR6Mutator]MSP[] return list . toArray () ; }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI4Mutator]MSP[] }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[NonVoidMethodCallMutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
final List < E > list = toList ( iterator , 100 ) ; MST[InlineConstantMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
return iterator == null || ! iterator . hasNext () ; MST[rv.ROR5Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[rv.ROR2Mutator]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[rv.AOD2Mutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ;
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[] iterator . next () ; size ++ ;
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; MST[rv.UOI1Mutator]MSP[] while ( iterator . hasNext () ) { i -- ;
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) { MST[NegateConditionalsMutator]MSP[]
} else if ( obj . getClass () . isArray () ) { return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
return new ZippingIterator <> ( a , b , c ) ; } public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > ... iterators ) { return new ZippingIterator <> ( iterators ) ; MST[ConstructorCallMutator]MSP[] }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; MST[ReturnValsMutator]MSP[] } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.ABSMutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.ROR1Mutator]MSP[] }
public static < E > E [] toArray ( final Iterator < ? extends E > iterator , final Class < E > arrayClass ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( arrayClass , lr_12 ) ; MST[ArgumentPropagationMutator]MSP[]
final List < E > list = toList ( iterator , 100 ) ; MST[NonVoidMethodCallMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
public static < E > OrderedIterator < E > emptyOrderedIterator () { return EmptyOrderedIterator . <E > emptyOrderedIterator () ; } public static < K , V > MapIterator < K , V > emptyMapIterator () { return EmptyMapIterator . <K , V > emptyMapIterator () ; MST[ReturnValsMutator]MSP[] }
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ; MST[NonVoidMethodCallMutator]MSP[]
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[] closure . execute ( element ) ;
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( stringBuilder . length () > prefix . length () ) {
public static < E > Iterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) { return PushbackIterator . pushbackIterator ( iterator ) ; MST[NonVoidMethodCallMutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR3Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
Objects . requireNonNull ( delimiter , lr_16 ) ; MST[NonVoidMethodCallMutator]MSP[] Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) {
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
return new ZippingIterator <> ( a , b , c ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > ... iterators ) { return new ZippingIterator <> ( iterators ) ; }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; MST[rv.UOI4Mutator]MSP[] CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { i -- ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.CRCR6Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; MST[NonVoidMethodCallMutator]MSP[] }
} else { return element ; MST[ReturnValsMutator]MSP[] } } } return null ; } public static < E > E find ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ;
return iterator == null || ! iterator . hasNext () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > ListIterator < E > toListIterator ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new ListIteratorWrapper <> ( iterator ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR4Mutator]MSP[] }
final List < E > list = toList ( iterator , 100 ) ; @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > ResettableIterator < E > emptyIterator () { return EmptyIterator . <E > resettableEmptyIterator () ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > ResettableListIterator < E > emptyListIterator () { return EmptyListIterator . <E > resettableEmptyListIterator () ; }
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; MST[rv.CRCR5Mutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[rv.UOI2Mutator]MSP[] }
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[rv.ABSMutator]MSP[] }
public static < E > Iterator < E > unmodifiableIterator ( final Iterator < E > iterator ) { return UnmodifiableIterator . unmodifiableIterator ( iterator ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ListIterator < E > unmodifiableListIterator ( final ListIterator < E > listIterator ) {
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[rv.CRCR1Mutator]MSP[] }
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Iterator < ? extends E > iterator1 , final Iterator < ? extends E > iterator2 ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[NullReturnValsMutator]MSP[] }
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[ConstructorCallMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; MST[ReturnValsMutator]MSP[] } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ;
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[ConstructorCallMutator]MSP[] }
} else if ( obj . getClass () . isArray () ) { MST[rv.ROR3Mutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; MST[EmptyObjectReturnValsMutator]MSP[] }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ; MST[NullReturnValsMutator]MSP[]
if ( obj instanceof Map ) { MST[rv.ROR1Mutator]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ; MST[ConstructorCallMutator]MSP[]
final List < E > list = toList ( iterator , 100 ) ; MST[rv.CRCR2Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[rv.ROR4Mutator]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[rv.UOI2Mutator]MSP[] }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[rv.AOR4Mutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[ConstructorCallMutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
public static < E > ListIterator < E > toListIterator ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new ListIteratorWrapper <> ( iterator ) ; MST[ReturnValsMutator]MSP[] }
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.CRCR3Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > Iterator < E > chainedIterator ( final Iterator < ? extends E > ... iterators ) { return new IteratorChain <> ( iterators ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Collection < Iterator < ? extends E > > iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[rv.ABSMutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; MST[ArgumentPropagationMutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Collection < Iterator < ? extends E > > iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[rv.ROR5Mutator]MSP[]
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
return new SingletonIterator <> ( object ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ListIterator < E > singletonListIterator ( final E object ) { return new SingletonListIterator <> ( object ) ; }
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; MST[NullReturnValsMutator]MSP[] } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ;
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
if ( obj instanceof Node ) { MST[NegateConditionalsMutator]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
if ( i == - 1 ) { MST[rv.UOI4Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[MathMutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
final List < E > list = new ArrayList <> ( estimatedSize ) ; MST[rv.UOI1Mutator]MSP[] while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[rv.ROR3Mutator]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
return new SingletonIterator <> ( object ) ; } public static < E > ListIterator < E > singletonListIterator ( final E object ) { return new SingletonListIterator <> ( object ) ; MST[ConstructorCallMutator]MSP[] }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; MST[ConstructorCallMutator]MSP[] } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[ConstructorCallMutator]MSP[] }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[] i -- ;
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ; MST[ReturnValsMutator]MSP[]
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR6Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[rv.CRCR2Mutator]MSP[] }
public static < E > Iterator < E > filteredIterator ( final Iterator < ? extends E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] Objects . requireNonNull ( predicate , lr_4 ) ;
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[rv.CRCR5Mutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR1Mutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[]
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[VoidMethodCallMutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[rv.ROR1Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ; MST[NullReturnValsMutator]MSP[]
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[PrimitiveReturnsMutator]MSP[] }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { i -- ; MST[experimental.RemoveIncrementsMutator]MSP[]
return new SingletonIterator <> ( object ) ; MST[ReturnValsMutator]MSP[] } public static < E > ListIterator < E > singletonListIterator ( final E object ) { return new SingletonListIterator <> ( object ) ; }
} public static < E > Iterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) { return PeekingIterator . peekingIterator ( iterator ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > String toString ( final Iterator < E > iterator , final Transformer < ? super E , String > transformer , final String delimiter , final String prefix , final String suffix ) { Objects . requireNonNull ( transformer , lr_3 ) ; MST[ArgumentPropagationMutator]MSP[]
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR4Mutator]MSP[] }
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) { MST[rv.ROR5Mutator]MSP[]
} if ( obj instanceof Object [] ) { MST[rv.ROR2Mutator]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR6Mutator]MSP[] }
return get ( iterator , 0 ) ; MST[rv.CRCR5Mutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; MST[NullReturnValsMutator]MSP[] } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[rv.ROR5Mutator]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
if ( i == - 1 ) { MST[rv.UOI1Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
if ( i == - 1 ) { MST[rv.ROR1Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] while ( iterator . hasNext () ) {
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[rv.ROR3Mutator]MSP[]
public static < E > Iterator < E > chainedIterator ( final Collection < Iterator < ? extends E > > iterators ) { return new IteratorChain <> ( iterators ) ; MST[ConstructorCallMutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[rv.CRCR2Mutator]MSP[] }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[rv.CRCR3Mutator]MSP[] return list . toArray () ; }
public static < E > OrderedIterator < E > emptyOrderedIterator () { return EmptyOrderedIterator . <E > emptyOrderedIterator () ; MST[ReturnValsMutator]MSP[] } public static < K , V > MapIterator < K , V > emptyMapIterator () { return EmptyMapIterator . <K , V > emptyMapIterator () ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[rv.CRCR6Mutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[ReturnValsMutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[] iterator . next () ; size ++ ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.UOI1Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > OrderedIterator < E > emptyOrderedIterator () { return EmptyOrderedIterator . <E > emptyOrderedIterator () ; } public static < K , V > MapIterator < K , V > emptyMapIterator () { return EmptyMapIterator . <K , V > emptyMapIterator () ; MST[NullReturnValsMutator]MSP[] }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; MST[ConstructorCallMutator]MSP[] } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ;
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ; MST[experimental.RemoveIncrementsMutator]MSP[]
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
} public static < E > Iterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) { return PeekingIterator . peekingIterator ( iterator ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[ReturnValsMutator]MSP[] }
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[ReturnValsMutator]MSP[] }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] return new IteratorIterable <> ( iterator , true ) ; }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI1Mutator]MSP[] }
} } return size ; MST[rv.UOI2Mutator]MSP[] } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
} else if ( obj . getClass () . isArray () ) { return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ; MST[NonVoidMethodCallMutator]MSP[]
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ; MST[ArgumentPropagationMutator]MSP[]
return new ZippingIterator <> ( a , b , c ) ; MST[ConstructorCallMutator]MSP[] } public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > ... iterators ) { return new ZippingIterator <> ( iterators ) ; }
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) ) ; MST[ConstructorCallMutator]MSP[] }
if ( i == - 1 ) { MST[rv.ROR3Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > int indexOf ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; MST[NullReturnValsMutator]MSP[] } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > a , final Iterator < ? extends E > b ) { return new ZippingIterator <> ( a , b ) ; MST[ReturnValsMutator]MSP[] }
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; MST[ArgumentPropagationMutator]MSP[] }
} else if ( obj . getClass () . isArray () ) { MST[NegateConditionalsMutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR1Mutator]MSP[] }
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; MST[ArgumentPropagationMutator]MSP[] stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
} else if ( obj . getClass () . isArray () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
if ( i == - 1 ) { MST[rv.CRCR6Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[rv.CRCR1Mutator]MSP[] }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[rv.ROR4Mutator]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[InlineConstantMutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
return new ZippingIterator <> ( a , b , c ) ; MST[ReturnValsMutator]MSP[] } public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > ... iterators ) { return new ZippingIterator <> ( iterators ) ; }
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; MST[ConstructorCallMutator]MSP[] } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ;
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[ReturnValsMutator]MSP[] }
final List < E > list = new ArrayList <> ( estimatedSize ) ; MST[ConstructorCallMutator]MSP[] while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
if ( obj instanceof Node ) { MST[rv.ROR5Mutator]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[rv.UOI1Mutator]MSP[] }
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[rv.CRCR4Mutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[NegateConditionalsMutator]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[rv.CRCR2Mutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR4Mutator]MSP[] return element ; } } } return null ; }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR3Mutator]MSP[] return element ; } } } return null ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[rv.UOI3Mutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.CRCR1Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; MST[ReturnValsMutator]MSP[] } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[ReturnValsMutator]MSP[] }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; } } stringBuilder . append ( suffix ) ; MST[experimental.NakedReceiverMutator]MSP[] return stringBuilder . toString () ; }
public static < E > ResettableIterator < E > arrayIterator ( final E ... array ) { return new ObjectArrayIterator <> ( array ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ResettableIterator < E > arrayIterator ( final Object array ) { return new ArrayIterator <> ( array ) ;
while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[NonVoidMethodCallMutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR2Mutator]MSP[] return index ; } } } return - 1 ; }
} else if ( obj . getClass () . isArray () ) { MST[rv.ROR5Mutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[rv.UOI3Mutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.CRCR5Mutator]MSP[] }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; return list . toArray () ; MST[ReturnValsMutator]MSP[] }
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ; MST[NullReturnValsMutator]MSP[]
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[rv.UOI4Mutator]MSP[] }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[rv.AOR2Mutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > E [] toArray ( final Iterator < ? extends E > iterator , final Class < E > arrayClass ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] Objects . requireNonNull ( arrayClass , lr_12 ) ;
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) ) ; MST[ReturnValsMutator]MSP[] }
public static < E > Iterator < E > chainedIterator ( final Iterator < ? extends E > iterator1 , final Iterator < ? extends E > iterator2 ) { return new IteratorChain <> ( iterator1 , iterator2 ) ; MST[ReturnValsMutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.CRCR6Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
public static < E > ResettableIterator < E > arrayIterator ( final E ... array ) { return new ObjectArrayIterator <> ( array ) ; MST[ReturnValsMutator]MSP[] } public static < E > ResettableIterator < E > arrayIterator ( final Object array ) { return new ArrayIterator <> ( array ) ;
if ( obj == null ) { return emptyIterator () ; MST[NonVoidMethodCallMutator]MSP[] } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[rv.ROR5Mutator]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
final Transformer < ? super E , ? extends E > transformer ) { return new ObjectGraphIterator <> ( root , transformer ) ; MST[NullReturnValsMutator]MSP[] } public static < I , O > Iterator < O > transformedIterator ( final Iterator < ? extends I > iterator ,
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ; MST[NullReturnValsMutator]MSP[]
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[InlineConstantMutator]MSP[] }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; return list . toArray () ; MST[NullReturnValsMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[ConstructorCallMutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR1Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
Objects . requireNonNull ( closure , lr_14 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR6Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { i -- ; MST[IncrementsMutator]MSP[]
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[NullReturnValsMutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; MST[rv.UOI1Mutator]MSP[] } } } return - 1 ; }
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[rv.ABSMutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Collection < Iterator < ? extends E > > iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[NegateConditionalsMutator]MSP[]
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[] closure . execute ( element ) ;
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
if ( i == - 1 ) { MST[rv.CRCR1Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[rv.CRCR6Mutator]MSP[] }
final Transformer < ? super E , ? extends E > transformer ) { return new ObjectGraphIterator <> ( root , transformer ) ; MST[ReturnValsMutator]MSP[] } public static < I , O > Iterator < O > transformedIterator ( final Iterator < ? extends I > iterator ,
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR6Mutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[NegateConditionalsMutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.ROR4Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
} public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start ) { return new ObjectArrayIterator <> ( array , start ) ; MST[ReturnValsMutator]MSP[] }
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[rv.ROR1Mutator]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > Iterator < E > chainedIterator ( final Iterator < ? extends E > iterator1 , final Iterator < ? extends E > iterator2 ) { return new IteratorChain <> ( iterator1 , iterator2 ) ; MST[NullReturnValsMutator]MSP[] }
} if ( obj instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ; MST[ConstructorCallMutator]MSP[]
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ; MST[NonVoidMethodCallMutator]MSP[]
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) ) ; MST[NullReturnValsMutator]MSP[] }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ; MST[ReturnValsMutator]MSP[]
return new ZippingIterator <> ( a , b , c ) ; } public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > ... iterators ) { return new ZippingIterator <> ( iterators ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] return new IteratorIterable <> ( iterator , false ) ; }
if ( obj instanceof Node ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[]
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; MST[ArgumentPropagationMutator]MSP[] }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ; MST[NonVoidMethodCallMutator]MSP[]
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[NonVoidMethodCallMutator]MSP[] return element ; } } } return null ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.UOI4Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
public static < E > Iterator < E > chainedIterator ( final Collection < Iterator < ? extends E > > iterators ) { return new IteratorChain <> ( iterators ) ; MST[NullReturnValsMutator]MSP[] }
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; MST[NullReturnValsMutator]MSP[] } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[InlineConstantMutator]MSP[] }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] iterator . next () ; size ++ ;
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; MST[ConstructorCallMutator]MSP[] } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator , final Iterator < ? extends E > iterator1 , final Iterator < ? extends E > iterator2 ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[NegateConditionalsMutator]MSP[]
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI2Mutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.ABSMutator]MSP[] }
Objects . requireNonNull ( predicate , lr_4 ) ; return new FilterListIterator <> ( listIterator , predicate ) ; MST[ConstructorCallMutator]MSP[] } public static < E > ResettableIterator < E > loopingIterator ( final Collection < ? extends E > collection ) {
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.ROR3Mutator]MSP[] }
return new ZippingIterator <> ( a , b , c ) ; } public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > ... iterators ) { return new ZippingIterator <> ( iterators ) ; MST[ReturnValsMutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[rv.CRCR5Mutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > Iterator < E > chainedIterator ( final Iterator < ? extends E > iterator1 , final Iterator < ? extends E > iterator2 ) { return new IteratorChain <> ( iterator1 , iterator2 ) ; MST[ConstructorCallMutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[] i -- ;
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator ) { return toList ( iterator , 10 ) ; MST[ReturnValsMutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return get ( iterator , 0 ) ; MST[NonVoidMethodCallMutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
public static < E > OrderedIterator < E > emptyOrderedIterator () { return EmptyOrderedIterator . <E > emptyOrderedIterator () ; MST[NullReturnValsMutator]MSP[] } public static < K , V > MapIterator < K , V > emptyMapIterator () { return EmptyMapIterator . <K , V > emptyMapIterator () ; }
public static < E > ResettableIterator < E > arrayIterator ( final E ... array ) { return new ObjectArrayIterator <> ( array ) ; } public static < E > ResettableIterator < E > arrayIterator ( final Object array ) { return new ArrayIterator <> ( array ) ; MST[ReturnValsMutator]MSP[]
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.UOI4Mutator]MSP[] }
final E element = iterator . next () ; MST[NonVoidMethodCallMutator]MSP[] if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR6Mutator]MSP[] }
} if ( obj instanceof Object [] ) { MST[NegateConditionalsMutator]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
public static < E > ZippingIterator < E > zippingIterator ( final Iterator < ? extends E > a , final Iterator < ? extends E > b ) { return new ZippingIterator <> ( a , b ) ; MST[NullReturnValsMutator]MSP[] }
} public static < E > Iterator < E > peekingIterator ( final Iterator < ? extends E > iterator ) { return PeekingIterator . peekingIterator ( iterator ) ; MST[ReturnValsMutator]MSP[] }
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { MST[rv.ROR3Mutator]MSP[] return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
final List < E > list = toList ( iterator , 100 ) ; @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; MST[NonVoidMethodCallMutator]MSP[] return list . toArray ( array ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
return get ( iterator , 0 ) ; MST[InlineConstantMutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
final List < E > list = new ArrayList <> ( estimatedSize ) ; MST[rv.UOI4Mutator]MSP[] while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[]
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; MST[ReturnValsMutator]MSP[] } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start ) { return new ArrayListIterator <> ( array , start ) ; MST[rv.UOI2Mutator]MSP[] }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; MST[ArgumentPropagationMutator]MSP[] } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ;
} else if ( obj . getClass () . isArray () ) { MST[rv.ROR1Mutator]MSP[] return new ArrayIterator <> ( obj ) ; } try { final Method method = obj . getClass () . getMethod ( lr_2 , ( Class [] ) null ) ;
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[rv.UOI4Mutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[NullReturnValsMutator]MSP[] }
if ( obj instanceof Map ) { MST[rv.ROR4Mutator]MSP[] return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR4Mutator]MSP[] return index ; } } } return - 1 ; }
if ( i == - 1 ) { return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; MST[rv.UOI1Mutator]MSP[] } public static < E > E first ( final Iterator < E > iterator ) {
} else { return element ; } } } return null ; MST[ReturnValsMutator]MSP[] } public static < E > E find ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.CRCR3Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; MST[rv.AOR1Mutator]MSP[] } } stringBuilder . append ( suffix ) ; return stringBuilder . toString () ; }
public static < E > ResettableIterator < E > emptyIterator () { return EmptyIterator . <E > resettableEmptyIterator () ; MST[NullReturnValsMutator]MSP[] } public static < E > ResettableListIterator < E > emptyListIterator () { return EmptyListIterator . <E > resettableEmptyListIterator () ; }
public static < E > ResettableIterator < E > arrayIterator ( final E ... array ) { return new ObjectArrayIterator <> ( array ) ; MST[ConstructorCallMutator]MSP[] } public static < E > ResettableIterator < E > arrayIterator ( final Object array ) { return new ArrayIterator <> ( array ) ;
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[BooleanFalseReturnValsMutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR1Mutator]MSP[] return index ; } } } return - 1 ; }
return new FilterIterator <> ( iterator , predicate ) ; MST[NullReturnValsMutator]MSP[] } public static < E > ListIterator < E > filteredListIterator ( final ListIterator < ? extends E > listIterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( listIterator , lr_5 ) ;
final Iterator < ? extends E > ... iterators ) { @SuppressWarnings ( lr_1 ) final Comparator < E > comp = MST[RemoveConditionalMutator_EQUAL_IF]MSP[] comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; }
} if ( obj instanceof Object [] ) { MST[rv.ROR5Mutator]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return index ; } } } return - 1 ; }
while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
if ( obj == null ) { return emptyIterator () ; } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { MST[rv.ROR1Mutator]MSP[] return ( ( Iterable < ? > ) obj ) . iterator () ;
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { MST[rv.ROR1Mutator]MSP[] return false ; } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR3Mutator]MSP[] }
} public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start ) { return new ObjectArrayListIterator <> ( array , start ) ; MST[rv.UOI2Mutator]MSP[] }
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[rv.ROR2Mutator]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; MST[ReturnValsMutator]MSP[] } public static Iterator < ? > getIterator ( final Object obj ) {
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] while ( iterator . hasNext () ) {
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[rv.CRCR4Mutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > boolean matchesAll ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) {
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[rv.ROR5Mutator]MSP[] closure . execute ( element ) ;
final Transformer < ? super E , ? extends E > transformer ) { return new ObjectGraphIterator <> ( root , transformer ) ; MST[ConstructorCallMutator]MSP[] } public static < I , O > Iterator < O > transformedIterator ( final Iterator < ? extends I > iterator ,
if ( i == - 1 ) { MST[rv.ROR4Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > E [] toArray ( final Iterator < ? extends E > iterator , final Class < E > arrayClass ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] Objects . requireNonNull ( arrayClass , lr_12 ) ;
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[rv.UOI3Mutator]MSP[] }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; MST[NullReturnValsMutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR4Mutator]MSP[] final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > Iterator < E > unmodifiableIterator ( final Iterator < E > iterator ) { return UnmodifiableIterator . unmodifiableIterator ( iterator ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > ListIterator < E > unmodifiableListIterator ( final ListIterator < E > listIterator ) {
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[NegateConditionalsMutator]MSP[]
public static < E > Iterator < E > pushbackIterator ( final Iterator < ? extends E > iterator ) { return PushbackIterator . pushbackIterator ( iterator ) ; MST[ReturnValsMutator]MSP[] }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; MST[rv.CRCR1Mutator]MSP[] } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR5Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
return iterator == null || ! iterator . hasNext () ; } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; MST[ReturnValsMutator]MSP[] }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[]
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] final List < ? > list = toList ( iterator , 100 ) ; return list . toArray () ; }
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; MST[NonVoidMethodCallMutator]MSP[] } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[NegateConditionalsMutator]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; MST[ConstructorCallMutator]MSP[] } public static < E > Iterator < E > objectGraphIterator ( final E root ,
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { MST[NegateConditionalsMutator]MSP[] while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; MST[NullReturnValsMutator]MSP[] }
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; MST[VoidMethodCallMutator]MSP[] while ( iterator . hasNext () ) { i -- ;
} } return size ; } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , MST[NonVoidMethodCallMutator]MSP[] DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
if ( iterator != null ) { while ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; }
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; MST[NonVoidMethodCallMutator]MSP[] Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) {
public static < E > OrderedIterator < E > emptyOrderedIterator () { return EmptyOrderedIterator . <E > emptyOrderedIterator () ; } public static < K , V > MapIterator < K , V > emptyMapIterator () { return EmptyMapIterator . <K , V > emptyMapIterator () ; MST[NonVoidMethodCallMutator]MSP[] }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; MST[rv.CRCR6Mutator]MSP[] } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ; MST[ArgumentPropagationMutator]MSP[]
public static < E > ResettableIterator < E > emptyIterator () { return EmptyIterator . <E > resettableEmptyIterator () ; } public static < E > ResettableListIterator < E > emptyListIterator () { return EmptyListIterator . <E > resettableEmptyListIterator () ; MST[NullReturnValsMutator]MSP[] }
final Transformer < ? super I , ? extends O > transformer ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( transformer , lr_3 ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformIterator <> ( iterator , transformer ) ; }
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[] return new IteratorIterable <> ( iterator , false ) ; }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return element ; } } } return null ; MST[ReturnValsMutator]MSP[] }
return it ; } } } catch ( final RuntimeException e ) { } catch ( final NoSuchMethodException e ) { } catch ( final IllegalAccessException e ) { } catch ( final InvocationTargetException e ) { } return singletonIterator ( obj ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; MST[rv.CRCR5Mutator]MSP[] return list . toArray () ; }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI3Mutator]MSP[] }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[NegateConditionalsMutator]MSP[] closure . execute ( element ) ;
public static Object [] toArray ( final Iterator < ? > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; final List < ? > list = toList ( iterator , 100 ) ; return list . toArray () ; MST[NonVoidMethodCallMutator]MSP[] }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[rv.ROR5Mutator]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[rv.ROR2Mutator]MSP[] iterator . next () ; size ++ ;
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start , final int end ) { return new ArrayIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterator1 , iterator2 ) ; MST[ReturnValsMutator]MSP[] } public static < E > Iterator < E > collatedIterator ( final Comparator < ? super E > comparator ,
} public static NodeListIterator nodeListIterator ( final NodeList nodeList ) { return new NodeListIterator ( Objects . requireNonNull ( nodeList , lr_8 ) ) ; MST[ArgumentPropagationMutator]MSP[] } public static NodeListIterator nodeListIterator ( final Node node ) { return new NodeListIterator ( Objects . requireNonNull ( node , lr_9 ) ) ;
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[NonVoidMethodCallMutator]MSP[] return index ; } } } return - 1 ; }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { throw new IllegalArgumentException ( lr_13 ) ; MST[ConstructorCallMutator]MSP[] }
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[rv.ROR5Mutator]MSP[]
if ( obj == null ) { return emptyIterator () ; MST[ReturnValsMutator]MSP[] } if ( obj instanceof Iterator ) { return ( Iterator < ? > ) obj ; } if ( obj instanceof Iterable ) { return ( ( Iterable < ? > ) obj ) . iterator () ;
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { closure . execute ( element ) ;
public static < E > Iterator < E > asIterator ( final Enumeration < ? extends E > enumeration , final Collection < ? super E > removeCollection ) { return new EnumerationIterator <> ( Objects . requireNonNull ( enumeration , lr_10 ) , MST[ReturnValsMutator]MSP[]
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; MST[ArgumentPropagationMutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) {
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[NonVoidMethodCallMutator]MSP[] }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; MST[InlineConstantMutator]MSP[] } } } return true ; } public static boolean isEmpty ( final Iterator < ? > iterator ) {
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[rv.ROR1Mutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
public static < E > void forEach ( final Iterator < E > iterator , final Closure < ? super E > closure ) { Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
while ( iterator . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
public static < E > int indexOf ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; if ( iterator != null ) { MST[NegateConditionalsMutator]MSP[]
return iterator == null || ! iterator . hasNext () ; MST[rv.CRCR3Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > SkippingIterator < E > skippingIterator ( final Iterator < E > iterator , final long offset ) { return new SkippingIterator <> ( iterator , offset ) ; MST[rv.UOI1Mutator]MSP[] }
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[rv.CRCR3Mutator]MSP[] }
return iterator == null || ! iterator . hasNext () ; MST[rv.ROR3Mutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
public static < E > ResettableListIterator < E > arrayListIterator ( final E ... array ) { return new ObjectArrayListIterator <> ( array ) ; } public static < E > ResettableListIterator < E > arrayListIterator ( final Object array ) { return new ArrayListIterator <> ( array ) ; MST[ReturnValsMutator]MSP[]
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { MST[InlineConstantMutator]MSP[] final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; MST[rv.UOI3Mutator]MSP[] } } } return - 1 ; }
Objects . requireNonNull ( closure , lr_14 ) ; if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( iterator . hasNext () ) { MST[rv.ROR3Mutator]MSP[] closure . execute ( element ) ;
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] i -- ;
} } return size ; } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , MST[ReturnValsMutator]MSP[] DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
return iterator == null || ! iterator . hasNext () ; MST[InlineConstantMutator]MSP[] } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; }
final Transformer < ? super I , ? extends O > transformer ) { Objects . requireNonNull ( iterator , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] Objects . requireNonNull ( transformer , lr_3 ) ; return new TransformIterator <> ( iterator , transformer ) ; }
} } return size ; MST[rv.ABSMutator]MSP[] } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; MST[NonVoidMethodCallMutator]MSP[] final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) {
return iterator == null || ! iterator . hasNext () ; } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
Objects . requireNonNull ( delimiter , lr_16 ) ; MST[ArgumentPropagationMutator]MSP[] Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; if ( iterator != null ) {
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; CollectionUtils . checkIndexBounds ( i ) ; MST[rv.UOI4Mutator]MSP[] while ( iterator . hasNext () ) { i -- ;
public static < E > Iterable < E > asMultipleUseIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , true ) ; MST[InlineConstantMutator]MSP[] }
while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[] final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) {
public static < E > ResettableListIterator < E > arrayListIterator ( final Object array , final int start , final int end ) { return new ArrayListIterator <> ( array , start , end ) ; MST[rv.UOI2Mutator]MSP[] }
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; MST[NullReturnValsMutator]MSP[] } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; }
return get ( iterator , 0 ) ; MST[rv.CRCR3Mutator]MSP[] } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
} if ( obj instanceof Object [] ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
if ( iterator != null ) { while ( iterator . hasNext () ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { MST[rv.ROR1Mutator]MSP[] return element ; } } } return null ; }
return new SingletonIterator <> ( object ) ; MST[ConstructorCallMutator]MSP[] } public static < E > ListIterator < E > singletonListIterator ( final E object ) { return new SingletonListIterator <> ( object ) ; }
final E element = iterator . next () ; if ( ! predicate . evaluate ( element ) ) { return false ; } } } return true ; MST[ReturnValsMutator]MSP[] } public static boolean isEmpty ( final Iterator < ? > iterator ) {
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { MST[rv.ROR5Mutator]MSP[] while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
public static < E > ResettableListIterator < E > arrayListIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayListIterator <> ( array , start , end ) ; MST[rv.UOI1Mutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[NonVoidMethodCallMutator]MSP[] }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; MST[ReturnValsMutator]MSP[] } } } return - 1 ; }
Objects . requireNonNull ( removeCollection , lr_11 ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static < E > Enumeration < E > asEnumeration ( final Iterator < ? extends E > iterator ) { return new IteratorEnumeration <> ( Objects . requireNonNull ( iterator , lr_2 ) ) ; }
final List < E > list = toList ( iterator , 100 ) ; MST[rv.CRCR5Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; }
if ( obj instanceof Node ) { return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { MST[rv.ROR2Mutator]MSP[] return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > String toString ( final Iterator < E > iterator , final Transformer < ? super E , String > transformer ) { return toString ( iterator , transformer , DEFAULT_TOSTRING_DELIMITER , MST[ReturnValsMutator]MSP[] DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; MST[rv.ABSMutator]MSP[] } } } return - 1 ; }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[InlineConstantMutator]MSP[] }
public static < K , V > OrderedMapIterator < K , V > emptyOrderedMapIterator () { return EmptyOrderedMapIterator . <K , V > emptyOrderedMapIterator () ; MST[ReturnValsMutator]MSP[] } public static < E > ResettableIterator < E > singletonIterator ( final E object ) {
return UnmodifiableListIterator . umodifiableListIterator ( listIterator ) ; MST[ArgumentPropagationMutator]MSP[] } public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < K , V > mapIterator ) { return UnmodifiableMapIterator . unmodifiableMapIterator ( mapIterator ) ; }
return new LoopingIterator <> ( Objects . requireNonNull ( collection , lr_6 ) ) ; } public static < E > ResettableListIterator < E > loopingListIterator ( final List < E > list ) { return new LoopingListIterator <> ( Objects . requireNonNull ( list , lr_7 ) ) ; MST[ConstructorCallMutator]MSP[]
return iterator == null || ! iterator . hasNext () ; } public static < E > boolean contains ( final Iterator < E > iterator , final Object object ) { return matchesAny ( iterator , EqualPredicate . equalPredicate ( object ) ) ; MST[BooleanFalseReturnValsMutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR5Mutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[rv.CRCR3Mutator]MSP[] }
stringBuilder . setLength ( stringBuilder . length () - delimiter . length () ) ; } } stringBuilder . append ( suffix ) ; MST[NonVoidMethodCallMutator]MSP[] return stringBuilder . toString () ; }
return new SingletonIterator <> ( object ) ; } public static < E > ListIterator < E > singletonListIterator ( final E object ) { return new SingletonListIterator <> ( object ) ; MST[ReturnValsMutator]MSP[] }
if ( i == - 1 ) { return iterator . next () ; MST[NullReturnValsMutator]MSP[] } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[ReturnValsMutator]MSP[] }
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { MST[rv.ROR1Mutator]MSP[] list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { return new NodeListIterator ( ( NodeList ) obj ) ; MST[ReturnValsMutator]MSP[] }
public static < E > E [] toArray ( final Iterator < ? extends E > iterator , final Class < E > arrayClass ) { Objects . requireNonNull ( iterator , lr_2 ) ; Objects . requireNonNull ( arrayClass , lr_12 ) ; MST[NonVoidMethodCallMutator]MSP[]
public static < E > Iterator < E > unmodifiableIterator ( final Iterator < E > iterator ) { return UnmodifiableIterator . unmodifiableIterator ( iterator ) ; MST[ReturnValsMutator]MSP[] } public static < E > ListIterator < E > unmodifiableListIterator ( final ListIterator < E > listIterator ) {
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.UOI3Mutator]MSP[] }
if ( i == - 1 ) { MST[rv.UOI2Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
if ( obj instanceof Map ) { return ( ( Map < ? , ? > ) obj ) . values () . iterator () ; } if ( obj instanceof NodeList ) { MST[rv.ROR4Mutator]MSP[] return new NodeListIterator ( ( NodeList ) obj ) ; }
public static < E > ResettableIterator < E > arrayIterator ( final E [] array , final int start , final int end ) { return new ObjectArrayIterator <> ( array , start , end ) ; MST[rv.ABSMutator]MSP[] }
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long offset , final long max ) { return new BoundedIterator <> ( iterator , offset , max ) ; MST[rv.UOI4Mutator]MSP[] }
public static < E > ListIterator < E > toListIterator ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new ListIteratorWrapper <> ( iterator ) ; MST[ConstructorCallMutator]MSP[] }
} } return size ; MST[ReturnValsMutator]MSP[] } public static < E > String toString ( final Iterator < E > iterator ) { return toString ( iterator , TransformerUtils . stringValueTransformer () , DEFAULT_TOSTRING_DELIMITER , DEFAULT_TOSTRING_PREFIX , DEFAULT_TOSTRING_SUFFIX ) ; }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; MST[ConstructorCallMutator]MSP[] }
} if ( obj instanceof Object [] ) { return new ObjectArrayIterator <> ( ( Object [] ) obj ) ; } if ( obj instanceof Enumeration ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return new EnumerationIterator <> ( ( Enumeration < ? > ) obj ) ; }
comparator == null ? ComparatorUtils . NATURAL_COMPARATOR : ( Comparator < E > ) comparator ; return new CollatingIterator <> ( comp , iterators ) ; MST[NullReturnValsMutator]MSP[] } public static < E > Iterator < E > objectGraphIterator ( final E root ,
if ( i == - 1 ) { MST[rv.CRCR4Mutator]MSP[] return iterator . next () ; } iterator . next () ; } throw new IndexOutOfBoundsException ( lr_15 + i ) ; } public static < E > E first ( final Iterator < E > iterator ) {
Objects . requireNonNull ( delimiter , lr_16 ) ; Objects . requireNonNull ( prefix , lr_17 ) ; Objects . requireNonNull ( suffix , lr_18 ) ; final StringBuilder stringBuilder = new StringBuilder ( prefix ) ; MST[ConstructorCallMutator]MSP[] if ( iterator != null ) {
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[InlineConstantMutator]MSP[] }
public static < E > Iterable < E > asIterable ( final Iterator < ? extends E > iterator ) { Objects . requireNonNull ( iterator , lr_2 ) ; return new IteratorIterable <> ( iterator , false ) ; MST[rv.CRCR3Mutator]MSP[] }
public static < E > List < E > toList ( final Iterator < ? extends E > iterator , final int estimatedSize ) { Objects . requireNonNull ( iterator , lr_2 ) ; if ( estimatedSize < 1 ) { MST[rv.CRCR4Mutator]MSP[] throw new IllegalArgumentException ( lr_13 ) ; }
if ( obj instanceof Node ) { MST[rv.ROR3Mutator]MSP[] return new NodeListIterator ( ( Node ) obj ) ; } if ( obj instanceof Dictionary ) { return new EnumerationIterator <> ( ( ( Dictionary < ? , ? > ) obj ) . elements () ) ;
public static < E > E get ( final Iterator < E > iterator , final int index ) { int i = index ; MST[rv.UOI2Mutator]MSP[] CollectionUtils . checkIndexBounds ( i ) ; while ( iterator . hasNext () ) { i -- ;
final List < E > list = new ArrayList <> ( estimatedSize ) ; while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; MST[EmptyObjectReturnValsMutator]MSP[] } public static Iterator < ? > getIterator ( final Object obj ) {
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; if ( iterator != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
} else { return element ; } } } return null ; } public static < E > E find ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { Objects . requireNonNull ( predicate , lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[]
for ( int index = 0 ; iterator . hasNext () ; index ++ ) { final E element = iterator . next () ; if ( predicate . evaluate ( element ) ) { return index ; } } } return - 1 ; MST[InlineConstantMutator]MSP[] }
public static < E > boolean matchesAny ( final Iterator < E > iterator , final Predicate < ? super E > predicate ) { return indexOf ( iterator , predicate ) != - 1 ; MST[NegateConditionalsMutator]MSP[] }
public static < E > ResettableIterator < E > arrayIterator ( final Object array , final int start ) { return new ArrayIterator <> ( array , start ) ; MST[ConstructorCallMutator]MSP[] }
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; MST[rv.CRCR3Mutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
while ( iterator . hasNext () ) { final E element = iterator . next () ; stringBuilder . append ( transformer . transform ( element ) ) ; stringBuilder . append ( delimiter ) ; } if ( stringBuilder . length () > prefix . length () ) { MST[ConditionalsBoundaryMutator]MSP[]
final List < E > list = toList ( iterator , 100 ) ; @SuppressWarnings ( lr_1 ) final E [] array = ( E [] ) Array . newInstance ( arrayClass , list . size () ) ; return list . toArray ( array ) ; MST[ReturnValsMutator]MSP[] }
final List < E > list = new ArrayList <> ( estimatedSize ) ; MST[rv.UOI2Mutator]MSP[] while ( iterator . hasNext () ) { list . add ( iterator . next () ) ; } return list ; } public static Iterator < ? > getIterator ( final Object obj ) {
return get ( iterator , 0 ) ; } public static int size ( final Iterator < ? > iterator ) { int size = 0 ; MST[InlineConstantMutator]MSP[] if ( iterator != null ) { while ( iterator . hasNext () ) { iterator . next () ; size ++ ;
public static < E > BoundedIterator < E > boundedIterator ( final Iterator < ? extends E > iterator , final long max ) { return boundedIterator ( iterator , 0 , max ) ; MST[rv.UOI2Mutator]MSP[] }
public static < E > Iterator < E > chainedIterator ( final Iterator < ? extends E > ... iterators ) { return new IteratorChain <> ( iterators ) ; MST[ConstructorCallMutator]MSP[] }
