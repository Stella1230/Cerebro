final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[NegateConditionalsMutator]MSP[S]
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[rv.ROR4Mutator]MSP[N]
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = MST[ConstructorCallMutator]MSP[S] new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) {
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
final MultiValuedMap < K , V > mapCopy = new ArrayListValuedHashMap <> ( map ) ; decorated . clear () ; decorated . putAll ( mapCopy ) ; } return decorated ; MST[NullReturnValsMutator]MSP[S] } protected K transformKey ( final K object ) { if ( keyTransformer == null ) {
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
final Transformer < ? super V , ? extends V > valueTransformer ) { return new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; MST[ReturnValsMutator]MSP[S] }
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[rv.ROR1Mutator]MSP[S]
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[rv.ROR3Mutator]MSP[N]
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[rv.ROR5Mutator]MSP[S]
final MultiValuedMap < K , V > mapCopy = new ArrayListValuedHashMap <> ( map ) ; decorated . clear () ; decorated . putAll ( mapCopy ) ; } return decorated ; MST[ReturnValsMutator]MSP[S] } protected K transformKey ( final K object ) { if ( keyTransformer == null ) {
final Transformer < ? super V , ? extends V > valueTransformer ) { return new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; MST[ConstructorCallMutator]MSP[S] }
final Transformer < ? super V , ? extends V > valueTransformer ) { return new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; MST[NullReturnValsMutator]MSP[S] }
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[S]
final Transformer < ? super V , ? extends V > valueTransformer ) { final TransformedMultiValuedMap < K , V > decorated = new TransformedMultiValuedMap <> ( map , keyTransformer , valueTransformer ) ; if ( ! map . isEmpty () ) { MST[rv.ROR2Mutator]MSP[S]
