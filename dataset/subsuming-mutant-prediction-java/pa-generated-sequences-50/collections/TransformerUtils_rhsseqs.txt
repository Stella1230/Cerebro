public static < T > Transformer < T , T > nopTransformer () { return NOPTransformer . nopTransformer () ; } public static < T > Transformer < T , T > cloneTransformer () { return CloneTransformer . cloneTransformer () ; MST[NullReturnValsMutator]MSP[S] }
public static < T > Transformer < T , String > stringValueTransformer () { return StringValueTransformer . stringValueTransformer () ; MST[ReturnValsMutator]MSP[S] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR5Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
return SwitchTransformer . switchTransformer ( predicates , transformers , null ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < I , O > Transformer < I , O > switchTransformer ( final Predicate < ? super I > [] predicates ,
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR3Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[InlineConstantMutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR4Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR2Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR6Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer () { return InstantiateTransformer . instantiateTransformer () ; MST[NonVoidMethodCallMutator]MSP[S] } public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer (
public static < T > Transformer < T , Boolean > asTransformer ( final Predicate < ? super T > predicate ) { return PredicateTransformer . predicateTransformer ( predicate ) ; MST[NonVoidMethodCallMutator]MSP[S] }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[NonVoidMethodCallMutator]MSP[N] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[NullReturnValsMutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > trueTransformer , final Transformer < ? super I , ? extends O > falseTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer , falseTransformer ) ; MST[NullReturnValsMutator]MSP[N] } @SuppressWarnings ( lr_1 ) @Deprecated
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; MST[NonVoidMethodCallMutator]MSP[N] trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
public static < I , O > Transformer < I , O > mapTransformer ( final Map < ? super I , ? extends O > map ) { return MapTransformer . mapTransformer ( map ) ; MST[NonVoidMethodCallMutator]MSP[S] }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; MST[NullReturnValsMutator]MSP[N] }
public static < I , O > Transformer < I , O > exceptionTransformer () { return ExceptionTransformer . exceptionTransformer () ; MST[ReturnValsMutator]MSP[S] } public static < I , O > Transformer < I , O > nullTransformer () { return ConstantTransformer . nullTransformer () ; }
public static < I , O > Transformer < I , O > invokerTransformer ( final String methodName ) { return InvokerTransformer . invokerTransformer ( methodName , null , null ) ; MST[NullReturnValsMutator]MSP[S] }
public static < T > Transformer < T , T > asTransformer ( final Closure < ? super T > closure ) { return ClosureTransformer . closureTransformer ( closure ) ; MST[NullReturnValsMutator]MSP[S] }
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; final int size = objectsAndTransformers . size () ; MST[NonVoidMethodCallMutator]MSP[N] final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ;
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; final int size = objectsAndTransformers . size () ; final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ; MST[rv.UOI1Mutator]MSP[N]
public static < I , O > Transformer < I , O > switchMapTransformer ( final Map < I , Transformer < I , O > > objectsAndTransformers ) { Objects . requireNonNull ( objectsAndTransformers , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N]
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; final int size = objectsAndTransformers . size () ; final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ; MST[rv.UOI3Mutator]MSP[N]
public static < I , O > Transformer < I , O > invokerTransformer ( final String methodName , final Class < ? > [] paramTypes , final Object [] args ) { return InvokerTransformer . invokerTransformer ( methodName , paramTypes , args ) ; MST[NonVoidMethodCallMutator]MSP[S] }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[IncrementsMutator]MSP[S] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public static < T > Transformer < T , T > nopTransformer () { return NOPTransformer . nopTransformer () ; } public static < T > Transformer < T , T > cloneTransformer () { return CloneTransformer . cloneTransformer () ; MST[ReturnValsMutator]MSP[S] }
public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer () { return InstantiateTransformer . instantiateTransformer () ; MST[NullReturnValsMutator]MSP[S] } public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer (
public static < I , O > Transformer < I , O > switchTransformer ( final Map < Predicate < I > , Transformer < I , O > > predicatesAndTransformers ) { return SwitchTransformer . switchTransformer ( predicatesAndTransformers ) ; MST[NullReturnValsMutator]MSP[N] } @SuppressWarnings ( lr_1 )
public static < T > Transformer < T , T > nopTransformer () { return NOPTransformer . nopTransformer () ; MST[ReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > cloneTransformer () { return CloneTransformer . cloneTransformer () ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[InlineConstantMutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR6Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super T , ? extends T > trueTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer ) ; MST[NonVoidMethodCallMutator]MSP[N] } public static < I , O > Transformer < I , O > ifTransformer ( final Predicate < ? super I > predicate ,
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; MST[ArgumentPropagationMutator]MSP[S] final int size = objectsAndTransformers . size () ; final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ;
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR5Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
public static < I , O > Transformer < I , O > exceptionTransformer () { return ExceptionTransformer . exceptionTransformer () ; MST[NonVoidMethodCallMutator]MSP[S] } public static < I , O > Transformer < I , O > nullTransformer () { return ConstantTransformer . nullTransformer () ; }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; MST[ReturnValsMutator]MSP[N] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR3Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Predicate < I > [] preds = new Predicate [ size ] ; int i = 0 ; MST[rv.CRCR3Mutator]MSP[N] for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
public static < T > Transformer < T , T > nopTransformer () { return NOPTransformer . nopTransformer () ; MST[NonVoidMethodCallMutator]MSP[S] } public static < T > Transformer < T , T > cloneTransformer () { return CloneTransformer . cloneTransformer () ; }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; MST[NonVoidMethodCallMutator]MSP[S] trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
final Predicate < I > [] preds = new Predicate [ size ] ; int i = 0 ; MST[rv.CRCR6Mutator]MSP[N] for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
public static < I , O > Transformer < I , O > constantTransformer ( final O constantToReturn ) { return ConstantTransformer . constantTransformer ( constantToReturn ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public static < I , O > Transformer < I , O > exceptionTransformer () { return ExceptionTransformer . exceptionTransformer () ; } public static < I , O > Transformer < I , O > nullTransformer () { return ConstantTransformer . nullTransformer () ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer () { return InstantiateTransformer . instantiateTransformer () ; MST[ReturnValsMutator]MSP[S] } public static < T > Transformer < Class < ? extends T > , T > instantiateTransformer (
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[ReturnValsMutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > [] transformers , final Transformer < ? super I , ? extends O > defaultTransformer ) { return SwitchTransformer . switchTransformer ( predicates , transformers , defaultTransformer ) ; MST[ArgumentPropagationMutator]MSP[N] }
final Predicate < I > [] preds = new Predicate [ size ] ; MST[rv.UOI3Mutator]MSP[N] int i = 0 ; for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR1Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > trueTransformer , final Transformer < ? super I , ? extends O > falseTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer , falseTransformer ) ; MST[ArgumentPropagationMutator]MSP[S] } @SuppressWarnings ( lr_1 ) @Deprecated
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; final int size = objectsAndTransformers . size () ; final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ; MST[rv.UOI4Mutator]MSP[N]
public static < I , O > Transformer < I , O > asTransformer ( final Factory < ? extends O > factory ) { return FactoryTransformer . factoryTransformer ( factory ) ; MST[NullReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > chainedTransformer (
final Class < ? > [] paramTypes , final Object [] args ) { return InstantiateTransformer . instantiateTransformer ( paramTypes , args ) ; MST[ReturnValsMutator]MSP[S] }
final Transformer < ? super I , ? extends O > trueTransformer , final Transformer < ? super I , ? extends O > falseTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer , falseTransformer ) ; MST[NonVoidMethodCallMutator]MSP[N] } @SuppressWarnings ( lr_1 ) @Deprecated
final Predicate < I > [] preds = new Predicate [ size ] ; int i = 0 ; for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) { MST[NonVoidMethodCallMutator]MSP[N]
public static < I , O > Transformer < I , O > switchTransformer ( final Map < Predicate < I > , Transformer < I , O > > predicatesAndTransformers ) { return SwitchTransformer . switchTransformer ( predicatesAndTransformers ) ; MST[ReturnValsMutator]MSP[N] } @SuppressWarnings ( lr_1 )
final Transformer < ? super T , ? extends T > ... transformers ) { return ChainedTransformer . chainedTransformer ( transformers ) ; MST[NullReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > chainedTransformer (
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[rv.UOI1Mutator]MSP[S] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[rv.UOI3Mutator]MSP[N] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[rv.UOI2Mutator]MSP[S] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
public static < I , O > Transformer < I , O > mapTransformer ( final Map < ? super I , ? extends O > map ) { return MapTransformer . mapTransformer ( map ) ; MST[ReturnValsMutator]MSP[S] }
return SwitchTransformer . switchTransformer ( predicates , transformers , null ) ; MST[ReturnValsMutator]MSP[S] } public static < I , O > Transformer < I , O > switchTransformer ( final Predicate < ? super I > [] predicates ,
final Transformer < ? super T , ? extends T > trueTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer ) ; MST[NullReturnValsMutator]MSP[N] } public static < I , O > Transformer < I , O > ifTransformer ( final Predicate < ? super I > predicate ,
final Transformer < ? super I , ? extends O > [] transformers , final Transformer < ? super I , ? extends O > defaultTransformer ) { return SwitchTransformer . switchTransformer ( predicates , transformers , defaultTransformer ) ; MST[NonVoidMethodCallMutator]MSP[N] }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; MST[rv.UOI1Mutator]MSP[N] trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; MST[rv.UOI3Mutator]MSP[N] trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; MST[rv.UOI2Mutator]MSP[N] trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
public static < T > Transformer < T , String > stringValueTransformer () { return StringValueTransformer . stringValueTransformer () ; MST[NonVoidMethodCallMutator]MSP[S] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR4Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR3Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR5Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR2Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR6Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Collection < ? extends Transformer < ? super T , ? extends T > > transformers ) { return ChainedTransformer . chainedTransformer ( transformers ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < T > Transformer < T , T > ifTransformer ( final Predicate < ? super T > predicate ,
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[rv.UOI4Mutator]MSP[N] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
final Predicate < I > [] preds = new Predicate [ size ] ; int i = 0 ; MST[InlineConstantMutator]MSP[N] for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
public static < T > Transformer < T , T > asTransformer ( final Closure < ? super T > closure ) { return ClosureTransformer . closureTransformer ( closure ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < T > Transformer < T , Boolean > asTransformer ( final Predicate < ? super T > predicate ) { return PredicateTransformer . predicateTransformer ( predicate ) ; MST[ReturnValsMutator]MSP[S] }
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; final int size = objectsAndTransformers . size () ; final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ; MST[rv.ABSMutator]MSP[N]
public static < I , O > Transformer < I , O > invokerTransformer ( final String methodName ) { return InvokerTransformer . invokerTransformer ( methodName , null , null ) ; MST[NonVoidMethodCallMutator]MSP[S] }
final Predicate < I > [] preds = new Predicate [ size ] ; MST[rv.UOI2Mutator]MSP[N] int i = 0 ; for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
return SwitchTransformer . switchTransformer ( predicates , transformers , null ) ; MST[ArgumentPropagationMutator]MSP[N] } public static < I , O > Transformer < I , O > switchTransformer ( final Predicate < ? super I > [] predicates ,
final Transformer < ? super T , ? extends T > trueTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer ) ; MST[ReturnValsMutator]MSP[N] } public static < I , O > Transformer < I , O > ifTransformer ( final Predicate < ? super I > predicate ,
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; MST[NonVoidMethodCallMutator]MSP[S] final int size = objectsAndTransformers . size () ; final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ;
final Transformer < ? super T , ? extends T > trueTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer ) ; MST[ArgumentPropagationMutator]MSP[S] } public static < I , O > Transformer < I , O > ifTransformer ( final Predicate < ? super I > predicate ,
public static < I , O > Transformer < I , O > constantTransformer ( final O constantToReturn ) { return ConstantTransformer . constantTransformer ( constantToReturn ) ; MST[ReturnValsMutator]MSP[N] }
final Collection < ? extends Transformer < ? super T , ? extends T > > transformers ) { return ChainedTransformer . chainedTransformer ( transformers ) ; MST[NullReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > ifTransformer ( final Predicate < ? super T > predicate ,
final Transformer < ? super I , ? extends O > [] transformers , final Transformer < ? super I , ? extends O > defaultTransformer ) { return SwitchTransformer . switchTransformer ( predicates , transformers , defaultTransformer ) ; MST[NullReturnValsMutator]MSP[N] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[InlineConstantMutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Predicate < I > [] preds = new Predicate [ size ] ; MST[rv.UOI4Mutator]MSP[N] int i = 0 ; for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
public static < I , O > Transformer < I , O > invokerTransformer ( final String methodName , final Class < ? > [] paramTypes , final Object [] args ) { return InvokerTransformer . invokerTransformer ( methodName , paramTypes , args ) ; MST[ReturnValsMutator]MSP[S] }
public static < I , O > Transformer < I , O > exceptionTransformer () { return ExceptionTransformer . exceptionTransformer () ; } public static < I , O > Transformer < I , O > nullTransformer () { return ConstantTransformer . nullTransformer () ; MST[NullReturnValsMutator]MSP[S] }
final Class < ? > [] paramTypes , final Object [] args ) { return InstantiateTransformer . instantiateTransformer ( paramTypes , args ) ; MST[NullReturnValsMutator]MSP[S] }
final Transformer < ? super T , ? extends T > ... transformers ) { return ChainedTransformer . chainedTransformer ( transformers ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < T > Transformer < T , T > chainedTransformer (
public static < I , O > Transformer < I , O > asTransformer ( final Factory < ? extends O > factory ) { return FactoryTransformer . factoryTransformer ( factory ) ; MST[ReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > chainedTransformer (
return SwitchTransformer . switchTransformer ( predicates , transformers , null ) ; MST[NullReturnValsMutator]MSP[S] } public static < I , O > Transformer < I , O > switchTransformer ( final Predicate < ? super I > [] predicates ,
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[rv.ABSMutator]MSP[S] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
public static < I , O > Transformer < I , O > mapTransformer ( final Map < ? super I , ? extends O > map ) { return MapTransformer . mapTransformer ( map ) ; MST[NullReturnValsMutator]MSP[S] }
final Transformer < ? super T , ? extends T > ... transformers ) { return ChainedTransformer . chainedTransformer ( transformers ) ; MST[ReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > chainedTransformer (
public static < T > Transformer < T , String > stringValueTransformer () { return StringValueTransformer . stringValueTransformer () ; MST[NullReturnValsMutator]MSP[S] }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; MST[ArgumentPropagationMutator]MSP[N] }
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; MST[rv.ABSMutator]MSP[S] trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
public static < I , O > Transformer < I , O > switchMapTransformer ( final Map < I , Transformer < I , O > > objectsAndTransformers ) { Objects . requireNonNull ( objectsAndTransformers , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[N]
public static < T > Transformer < T , T > nopTransformer () { return NOPTransformer . nopTransformer () ; } public static < T > Transformer < T , T > cloneTransformer () { return CloneTransformer . cloneTransformer () ; MST[NonVoidMethodCallMutator]MSP[S] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR3Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
public static < I , O > Transformer < I , O > switchTransformer ( final Map < Predicate < I > , Transformer < I , O > > predicatesAndTransformers ) { return SwitchTransformer . switchTransformer ( predicatesAndTransformers ) ; MST[NonVoidMethodCallMutator]MSP[N] } @SuppressWarnings ( lr_1 )
public static < I , O > Transformer < I , O > asTransformer ( final Factory < ? extends O > factory ) { return FactoryTransformer . factoryTransformer ( factory ) ; MST[NonVoidMethodCallMutator]MSP[S] } public static < T > Transformer < T , T > chainedTransformer (
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR6Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR5Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
final Transformer < ? super I , ? extends O > trueTransformer , final Transformer < ? super I , ? extends O > falseTransformer ) { return IfTransformer . ifTransformer ( predicate , trueTransformer , falseTransformer ) ; MST[ReturnValsMutator]MSP[N] } @SuppressWarnings ( lr_1 ) @Deprecated
final Predicate < I > [] preds = new Predicate [ size ] ; int i = 0 ; MST[rv.CRCR5Mutator]MSP[N] for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
final Predicate < I > [] preds = new Predicate [ size ] ; int i = 0 ; MST[rv.CRCR1Mutator]MSP[N] for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
final Class < ? > [] paramTypes , final Object [] args ) { return InstantiateTransformer . instantiateTransformer ( paramTypes , args ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public static < I , O > Transformer < I , O > invokerTransformer ( final String methodName , final Class < ? > [] paramTypes , final Object [] args ) { return InvokerTransformer . invokerTransformer ( methodName , paramTypes , args ) ; MST[NullReturnValsMutator]MSP[S] }
final Predicate < I > [] preds = new Predicate [ size ] ; MST[rv.UOI1Mutator]MSP[N] int i = 0 ; for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
final Transformer < ? super I , ? extends O > [] transformers , final Transformer < ? super I , ? extends O > defaultTransformer ) { return SwitchTransformer . switchTransformer ( predicates , transformers , defaultTransformer ) ; MST[ReturnValsMutator]MSP[N] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[rv.CRCR1Mutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
public static < I , O > Transformer < I , O > constantTransformer ( final O constantToReturn ) { return ConstantTransformer . constantTransformer ( constantToReturn ) ; MST[NullReturnValsMutator]MSP[N] }
final Predicate < I > [] preds = new Predicate [ size ] ; MST[rv.ABSMutator]MSP[N] int i = 0 ; for ( final Map . Entry < I , Transformer < I , O > > entry : objectsAndTransformers . entrySet () ) {
public static < T > Transformer < T , Boolean > asTransformer ( final Predicate < ? super T > predicate ) { return PredicateTransformer . predicateTransformer ( predicate ) ; MST[NullReturnValsMutator]MSP[S] }
final Transformer < ? super I , ? extends O > def = objectsAndTransformers . remove ( null ) ; final int size = objectsAndTransformers . size () ; final Transformer < ? super I , ? extends O > [] trs = new Transformer [ size ] ; MST[rv.UOI2Mutator]MSP[N]
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; MST[rv.UOI4Mutator]MSP[N] trs [ i ++ ] = entry . getValue () ; } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
public static < T > Transformer < T , T > nopTransformer () { return NOPTransformer . nopTransformer () ; MST[NullReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > cloneTransformer () { return CloneTransformer . cloneTransformer () ; }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[NonVoidMethodCallMutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
public static < I , O > Transformer < I , O > exceptionTransformer () { return ExceptionTransformer . exceptionTransformer () ; } public static < I , O > Transformer < I , O > nullTransformer () { return ConstantTransformer . nullTransformer () ; MST[ReturnValsMutator]MSP[S] }
public static < T > Transformer < T , T > asTransformer ( final Closure < ? super T > closure ) { return ClosureTransformer . closureTransformer ( closure ) ; MST[ReturnValsMutator]MSP[S] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[ArgumentPropagationMutator]MSP[S] new Transformer [] { trueTransformer } , falseTransformer ) ; }
public static < I , O > Transformer < I , O > invokerTransformer ( final String methodName ) { return InvokerTransformer . invokerTransformer ( methodName , null , null ) ; MST[ReturnValsMutator]MSP[S] }
final Transformer < ? super I , ? extends O > falseTransformer ) { return SwitchTransformer . switchTransformer ( new Predicate [] { predicate } , MST[InlineConstantMutator]MSP[N] new Transformer [] { trueTransformer } , falseTransformer ) ; }
public static < I , O > Transformer < I , O > exceptionTransformer () { return ExceptionTransformer . exceptionTransformer () ; MST[NullReturnValsMutator]MSP[S] } public static < I , O > Transformer < I , O > nullTransformer () { return ConstantTransformer . nullTransformer () ; }
final Collection < ? extends Transformer < ? super T , ? extends T > > transformers ) { return ChainedTransformer . chainedTransformer ( transformers ) ; MST[ReturnValsMutator]MSP[S] } public static < T > Transformer < T , T > ifTransformer ( final Predicate < ? super T > predicate ,
preds [ i ] = EqualPredicate . <I > equalPredicate ( entry . getKey () ) ; trs [ i ++ ] = entry . getValue () ; MST[experimental.RemoveIncrementsMutator]MSP[S] } return TransformerUtils . switchTransformer ( preds , trs , def ) ; }
