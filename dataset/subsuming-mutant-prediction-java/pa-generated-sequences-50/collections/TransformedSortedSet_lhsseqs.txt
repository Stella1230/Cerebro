return getSortedSet () . first () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI1Mutator]MSP[]
public SortedSet < E > headSet ( final E toElement ) { final SortedSet < E > set = getSortedSet () . headSet ( toElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[ReturnValsMutator]MSP[] } @Override
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.ABSMutator]MSP[]
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI1Mutator]MSP[]
public SortedSet < E > subSet ( final E fromElement , final E toElement ) { final SortedSet < E > set = getSortedSet () . subSet ( fromElement , toElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[ConstructorCallMutator]MSP[] } @Override
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI4Mutator]MSP[]
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI3Mutator]MSP[]
public SortedSet < E > headSet ( final E toElement ) { final SortedSet < E > set = getSortedSet () . headSet ( toElement ) ; MST[experimental.NakedReceiverMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; } @Override
if ( set . size () > 0 ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
public static < E > TransformedSortedSet < E > transformingSortedSet ( final SortedSet < E > set , final Transformer < ? super E , ? extends E > transformer ) { return new TransformedSortedSet <> ( set , transformer ) ; MST[ConstructorCallMutator]MSP[] }
if ( set . size () > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI4Mutator]MSP[]
if ( set . size () > 0 ) { MST[NonVoidMethodCallMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
public SortedSet < E > tailSet ( final E fromElement ) { final SortedSet < E > set = getSortedSet () . tailSet ( fromElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[ReturnValsMutator]MSP[] }
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI3Mutator]MSP[]
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI2Mutator]MSP[]
public SortedSet < E > subSet ( final E fromElement , final E toElement ) { final SortedSet < E > set = getSortedSet () . subSet ( fromElement , toElement ) ; MST[experimental.NakedReceiverMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; } @Override
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; MST[ReturnValsMutator]MSP[] } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; MST[ReturnValsMutator]MSP[] } @Override public E first () {
public static < E > TransformedSortedSet < E > transformingSortedSet ( final SortedSet < E > set , final Transformer < ? super E , ? extends E > transformer ) { return new TransformedSortedSet <> ( set , transformer ) ; MST[NullReturnValsMutator]MSP[] }
public SortedSet < E > subSet ( final E fromElement , final E toElement ) { final SortedSet < E > set = getSortedSet () . subSet ( fromElement , toElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[ReturnValsMutator]MSP[] } @Override
public SortedSet < E > headSet ( final E toElement ) { final SortedSet < E > set = getSortedSet () . headSet ( toElement ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E first () {
public static < E > TransformedSortedSet < E > transformedSortedSet ( final SortedSet < E > set , final Transformer < ? super E , ? extends E > transformer ) { final TransformedSortedSet < E > decorated = new TransformedSortedSet <> ( set , transformer ) ; MST[ConstructorCallMutator]MSP[]
if ( set . size () > 0 ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
if ( set . size () > 0 ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; MST[NullReturnValsMutator]MSP[] } @Override
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } return decorated ; } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; } @Override public E first () {
return getSortedSet () . first () ; MST[NullReturnValsMutator]MSP[] } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
public SortedSet < E > subSet ( final E fromElement , final E toElement ) { final SortedSet < E > set = getSortedSet () . subSet ( fromElement , toElement ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[ArgumentPropagationMutator]MSP[] } } return decorated ; } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; } @Override public E first () {
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.ABSMutator]MSP[]
return getSortedSet () . first () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
public SortedSet < E > tailSet ( final E fromElement ) { final SortedSet < E > set = getSortedSet () . tailSet ( fromElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[NullReturnValsMutator]MSP[] }
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI1Mutator]MSP[]
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.ABSMutator]MSP[]
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI2Mutator]MSP[]
public SortedSet < E > headSet ( final E toElement ) { final SortedSet < E > set = getSortedSet () . headSet ( toElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[NullReturnValsMutator]MSP[] } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; MST[ReturnValsMutator]MSP[] } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; } @Override public E first () {
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI4Mutator]MSP[]
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; MST[NonVoidMethodCallMutator]MSP[] set . clear () ; for ( final E value : values ) {
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) { MST[rv.UOI3Mutator]MSP[]
if ( set . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; MST[VoidMethodCallMutator]MSP[] for ( final E value : values ) {
public SortedSet < E > tailSet ( final E fromElement ) { final SortedSet < E > set = getSortedSet () . tailSet ( fromElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[ConstructorCallMutator]MSP[] }
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; MST[NullReturnValsMutator]MSP[] } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
public SortedSet < E > headSet ( final E toElement ) { final SortedSet < E > set = getSortedSet () . headSet ( toElement ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; } @Override
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; MST[NullReturnValsMutator]MSP[] } @Override public E first () {
if ( set . size () > 0 ) { MST[ConditionalsBoundaryMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; MST[ReturnValsMutator]MSP[] } @Override
if ( set . size () > 0 ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; MST[NullReturnValsMutator]MSP[] } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; } @Override public E first () {
public SortedSet < E > subSet ( final E fromElement , final E toElement ) { final SortedSet < E > set = getSortedSet () . subSet ( fromElement , toElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[NullReturnValsMutator]MSP[] } @Override
public SortedSet < E > tailSet ( final E fromElement ) { final SortedSet < E > set = getSortedSet () . tailSet ( fromElement ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; }
if ( set . size () > 0 ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
if ( set . size () > 0 ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
return getSortedSet () . first () ; MST[ReturnValsMutator]MSP[] } @Override public E last () { return getSortedSet () . last () ; } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
public SortedSet < E > tailSet ( final E fromElement ) { final SortedSet < E > set = getSortedSet () . tailSet ( fromElement ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; }
public SortedSet < E > tailSet ( final E fromElement ) { final SortedSet < E > set = getSortedSet () . tailSet ( fromElement ) ; MST[experimental.NakedReceiverMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; }
if ( set . size () > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) set . toArray () ; set . clear () ; for ( final E value : values ) {
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } return decorated ; } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; } @Override public E first () {
return getSortedSet () . first () ; } @Override public E last () { return getSortedSet () . last () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public Comparator < ? super E > comparator () { return getSortedSet () . comparator () ; } @Override
public static < E > TransformedSortedSet < E > transformingSortedSet ( final SortedSet < E > set , final Transformer < ? super E , ? extends E > transformer ) { return new TransformedSortedSet <> ( set , transformer ) ; MST[ReturnValsMutator]MSP[] }
public SortedSet < E > subSet ( final E fromElement , final E toElement ) { final SortedSet < E > set = getSortedSet () . subSet ( fromElement , toElement ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedSortedSet <> ( set , transformer ) ; } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } return decorated ; } protected SortedSet < E > getSortedSet () { return ( SortedSet < E > ) decorated () ; } @Override public E first () {
public SortedSet < E > headSet ( final E toElement ) { final SortedSet < E > set = getSortedSet () . headSet ( toElement ) ; return new TransformedSortedSet <> ( set , transformer ) ; MST[ConstructorCallMutator]MSP[] } @Override
