if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
return new PredicatedMap <> ( map , keyPredicate , valuePredicate ) ; MST[ConstructorCallMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; out . writeObject ( map ) ; } @SuppressWarnings ( lr_1 )
for ( final Map . Entry < ? extends K , ? extends V > entry : mapToCopy . entrySet () ) { MST[NonVoidMethodCallMutator]MSP[] validate ( entry . getKey () , entry . getValue () ) ; } super . putAll ( mapToCopy ) ; }
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[NegateConditionalsMutator]MSP[] } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
for ( final Map . Entry < ? extends K , ? extends V > entry : mapToCopy . entrySet () ) { validate ( entry . getKey () , entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } super . putAll ( mapToCopy ) ; }
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
for ( final Map . Entry < ? extends K , ? extends V > entry : mapToCopy . entrySet () ) { validate ( entry . getKey () , entry . getValue () ) ; MST[NonVoidMethodCallMutator]MSP[] } super . putAll ( mapToCopy ) ; }
return new PredicatedMap <> ( map , keyPredicate , valuePredicate ) ; MST[NullReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; out . writeObject ( map ) ; } @SuppressWarnings ( lr_1 )
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[ReturnValsMutator]MSP[] } @Override
for ( final Map . Entry < ? extends K , ? extends V > entry : mapToCopy . entrySet () ) { validate ( entry . getKey () , entry . getValue () ) ; MST[VoidMethodCallMutator]MSP[] } super . putAll ( mapToCopy ) ; }
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; MST[ConstructorCallMutator]MSP[] } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR1Mutator]MSP[] } @Override
public V put ( final K key , final V value ) { validate ( key , value ) ; return map . put ( key , value ) ; MST[NullReturnValsMutator]MSP[] } @Override public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) {
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR2Mutator]MSP[] } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; MST[NullReturnValsMutator]MSP[] } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR4Mutator]MSP[] } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR6Mutator]MSP[] } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR6Mutator]MSP[] } @Override
public V put ( final K key , final V value ) { validate ( key , value ) ; MST[VoidMethodCallMutator]MSP[] return map . put ( key , value ) ; } @Override public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) {
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; MST[VoidMethodCallMutator]MSP[] map = ( Map < K , V > ) in . readObject () ; } protected void validate ( final K key , final V value ) {
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
public V put ( final K key , final V value ) { validate ( key , value ) ; return map . put ( key , value ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) {
return new PredicatedMap <> ( map , keyPredicate , valuePredicate ) ; } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; MST[VoidMethodCallMutator]MSP[] out . writeObject ( map ) ; } @SuppressWarnings ( lr_1 )
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; MST[ConstructorCallMutator]MSP[] } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
for ( final Map . Entry < ? extends K , ? extends V > entry : mapToCopy . entrySet () ) { validate ( entry . getKey () , entry . getValue () ) ; } super . putAll ( mapToCopy ) ; MST[VoidMethodCallMutator]MSP[] }
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[InlineConstantMutator]MSP[] } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.ROR5Mutator]MSP[] } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[InlineConstantMutator]MSP[] } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; MST[ReturnValsMutator]MSP[] } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
public V put ( final K key , final V value ) { validate ( key , value ) ; return map . put ( key , value ) ; MST[ReturnValsMutator]MSP[] } @Override public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) {
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; MST[ConstructorCallMutator]MSP[] } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override
return new PredicatedMap <> ( map , keyPredicate , valuePredicate ) ; } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; out . writeObject ( map ) ; MST[VoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 )
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
public V put ( final K key , final V value ) { validate ( key , value ) ; return map . put ( key , value ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public void putAll ( final Map < ? extends K , ? extends V > mapToCopy ) {
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR3Mutator]MSP[] } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR5Mutator]MSP[] } @Override
return new PredicatedMap <> ( map , keyPredicate , valuePredicate ) ; MST[ReturnValsMutator]MSP[] } private void writeObject ( final ObjectOutputStream out ) throws IOException { out . defaultWriteObject () ; out . writeObject ( map ) ; } @SuppressWarnings ( lr_1 )
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR3Mutator]MSP[] } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[rv.CRCR5Mutator]MSP[] } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; } } @Override
if ( keyPredicate != null && keyPredicate . evaluate ( key ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_2 ) ; } if ( valuePredicate != null && valuePredicate . evaluate ( value ) == false ) { throw new IllegalArgumentException ( lr_3 ) ; } } @Override
protected V checkSetValue ( final V value ) { if ( valuePredicate . evaluate ( value ) == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_4 ) ; } return value ; } @Override protected boolean isSetValueChecking () { return valuePredicate != null ; } @Override
private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; map = ( Map < K , V > ) in . readObject () ; MST[experimental.MemberVariableMutator]MSP[] } protected void validate ( final K key , final V value ) {
private void readObject ( final ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject () ; map = ( Map < K , V > ) in . readObject () ; MST[NonVoidMethodCallMutator]MSP[] } protected void validate ( final K key , final V value ) {
