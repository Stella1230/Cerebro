final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ; MST[ArgumentPropagationMutator]MSP[]
getListIterator () . add ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void set ( E object ) { object = transform ( object ) ; getListIterator () . set ( object ) ; }
getListIterator () . add ( object ) ; } @Override public void set ( E object ) { object = transform ( object ) ; getListIterator () . set ( object ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( list . size () > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
if ( list . size () > 0 ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
if ( list . size () > 0 ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
if ( list . size () > 0 ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
if ( list . size () > 0 ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
return object == this || decorated () . equals ( object ) ; MST[NegateConditionalsMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; MST[NullReturnValsMutator]MSP[] } protected List < E > getList () { return ( List < E > ) decorated () ; } @Override public boolean equals ( final Object object ) {
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[rv.UOI1Mutator]MSP[] } @Override
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI2Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
return object == this || decorated () . equals ( object ) ; MST[rv.ROR5Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; MST[ReturnValsMutator]MSP[] } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI1Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI3Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI4Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public ListIterator < E > listIterator () {
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[experimental.NakedReceiverMutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
return getList () . remove ( index ) ; MST[rv.UOI3Mutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
object = transform ( object ) ; MST[NonVoidMethodCallMutator]MSP[] return getList () . set ( index , object ) ; } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[rv.ABSMutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
return object == this || decorated () . equals ( object ) ; MST[rv.ROR1Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[rv.ROR2Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; return new TransformedList <> ( sub , transformer ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public void add ( E object ) { object = transform ( object ) ;
return object == this || decorated () . equals ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
public static < E > TransformedList < E > transformingList ( final List < E > list , final Transformer < ? super E , ? extends E > transformer ) { return new TransformedList <> ( list , transformer ) ; MST[ReturnValsMutator]MSP[] }
return getList () . remove ( index ) ; MST[rv.UOI1Mutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[rv.ROR4Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[rv.ROR3Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[rv.UOI3Mutator]MSP[] } @Override
return getList () . remove ( index ) ; MST[NullReturnValsMutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
return getList () . remove ( index ) ; MST[rv.UOI4Mutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
return getList () . remove ( index ) ; MST[rv.UOI2Mutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[rv.UOI4Mutator]MSP[] } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[rv.UOI2Mutator]MSP[] } @Override
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
if ( list . size () > 0 ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E remove ( final int index ) {
return listIterator ( 0 ) ; MST[ReturnValsMutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR3Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[rv.UOI4Mutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[ReturnValsMutator]MSP[] } @Override public ListIterator < E > listIterator () {
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR5Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return getList () . remove ( index ) ; MST[rv.ABSMutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[rv.UOI2Mutator]MSP[] } @Override public E set ( final int index , E object ) {
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[rv.UOI2Mutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
return listIterator ( 0 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; MST[ArgumentPropagationMutator]MSP[] return getList () . addAll ( index , coll ) ; } @Override public ListIterator < E > listIterator () {
return listIterator ( 0 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.ABSMutator]MSP[]
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E set ( final int index , E object ) {
return listIterator ( 0 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
return object == this || decorated () . equals ( object ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.ABSMutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR1Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; MST[ReturnValsMutator]MSP[] } protected List < E > getList () { return ( List < E > ) decorated () ; } @Override public boolean equals ( final Object object ) {
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR3Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR5Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
public static < E > TransformedList < E > transformingList ( final List < E > list , final Transformer < ? super E , ? extends E > transformer ) { return new TransformedList <> ( list , transformer ) ; MST[NullReturnValsMutator]MSP[] }
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[ReturnValsMutator]MSP[] } @Override public E set ( final int index , E object ) {
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; MST[rv.ABSMutator]MSP[] } @Override
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; MST[NonVoidMethodCallMutator]MSP[] return getList () . addAll ( index , coll ) ; } @Override public ListIterator < E > listIterator () {
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; } protected List < E > getList () { return ( List < E > ) decorated () ; MST[ReturnValsMutator]MSP[] } @Override public boolean equals ( final Object object ) {
if ( list . size () > 0 ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI4Mutator]MSP[]
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[ArgumentPropagationMutator]MSP[] } } return decorated ; } protected List < E > getList () { return ( List < E > ) decorated () ; } @Override public boolean equals ( final Object object ) {
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI2Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI3Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI3Mutator]MSP[]
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public ListIterator < E > listIterator () {
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[NullReturnValsMutator]MSP[] } @Override
public static < E > TransformedList < E > transformingList ( final List < E > list , final Transformer < ? super E , ? extends E > transformer ) { return new TransformedList <> ( list , transformer ) ; MST[ConstructorCallMutator]MSP[] }
return listIterator ( 0 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public ListIterator < E > listIterator () {
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public ListIterator < E > listIterator () {
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[rv.UOI4Mutator]MSP[] } @Override public E set ( final int index , E object ) {
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[rv.ABSMutator]MSP[] } @Override public E set ( final int index , E object ) {
return getList () . remove ( index ) ; MST[ReturnValsMutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[rv.UOI1Mutator]MSP[] } @Override public E set ( final int index , E object ) {
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR6Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; } protected List < E > getList () { return ( List < E > ) decorated () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean equals ( final Object object ) {
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[rv.UOI1Mutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
if ( list . size () > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.ABSMutator]MSP[]
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; } @Override public E remove ( final int index ) {
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.ABSMutator]MSP[]
return getList () . remove ( index ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[ReturnValsMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return listIterator ( 0 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI1Mutator]MSP[]
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI1Mutator]MSP[]
if ( list . size () > 0 ) { MST[ConditionalsBoundaryMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[ReturnValsMutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.ABSMutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; return new TransformedList <> ( sub , transformer ) ; MST[ReturnValsMutator]MSP[] } @Override public void add ( E object ) { object = transform ( object ) ;
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; MST[rv.UOI1Mutator]MSP[] } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; return new TransformedList <> ( sub , transformer ) ; MST[ConstructorCallMutator]MSP[] } @Override public void add ( E object ) { object = transform ( object ) ;
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR2Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR6Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[rv.UOI1Mutator]MSP[] } @Override public ListIterator < E > listIterator () {
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[rv.UOI2Mutator]MSP[] } @Override public ListIterator < E > listIterator () {
return object == this || decorated () . equals ( object ) ; MST[InlineConstantMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI4Mutator]MSP[]
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override
return listIterator ( 0 ) ; MST[InlineConstantMutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI3Mutator]MSP[]
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI2Mutator]MSP[]
object = transform ( object ) ; MST[ArgumentPropagationMutator]MSP[] return getList () . set ( index , object ) ; } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; MST[VoidMethodCallMutator]MSP[] for ( final E value : values ) {
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[NullReturnValsMutator]MSP[] } @Override public E set ( final int index , E object ) {
if ( list . size () > 0 ) { MST[NonVoidMethodCallMutator]MSP[] @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) {
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
return object == this || decorated () . equals ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E remove ( final int index ) {
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E set ( final int index , E object ) {
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[ConstructorCallMutator]MSP[] } @Override public E set ( final int index , E object ) {
return object == this || decorated () . equals ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI1Mutator]MSP[]
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI4Mutator]MSP[]
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } return decorated ; } protected List < E > getList () { return ( List < E > ) decorated () ; } @Override public boolean equals ( final Object object ) {
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[rv.UOI3Mutator]MSP[] } @Override public ListIterator < E > listIterator () {
public static < E > TransformedList < E > transformedList ( final List < E > list , final Transformer < ? super E , ? extends E > transformer ) { final TransformedList < E > decorated = new TransformedList <> ( list , transformer ) ; MST[ConstructorCallMutator]MSP[]
return object == this || decorated () . equals ( object ) ; MST[InlineConstantMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; MST[rv.UOI4Mutator]MSP[] } @Override
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; MST[rv.UOI2Mutator]MSP[] } @Override
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; MST[NonVoidMethodCallMutator]MSP[] getList () . add ( index , object ) ; } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[rv.ABSMutator]MSP[] } @Override
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[rv.ABSMutator]MSP[] } @Override public ListIterator < E > listIterator () {
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI4Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[NullReturnValsMutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[rv.UOI1Mutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
return object == this || decorated () . equals ( object ) ; MST[rv.ROR5Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
return object == this || decorated () . equals ( object ) ; MST[NegateConditionalsMutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; MST[NonVoidMethodCallMutator]MSP[] list . clear () ; for ( final E value : values ) {
decorated . decorated () . add ( transformer . transform ( value ) ) ; } } return decorated ; } protected List < E > getList () { return ( List < E > ) decorated () ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public boolean equals ( final Object object ) {
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; MST[ArgumentPropagationMutator]MSP[] getList () . add ( index , object ) ; } @Override
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; MST[VoidMethodCallMutator]MSP[] } @Override
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; MST[ReturnValsMutator]MSP[] } @Override
return listIterator ( 0 ) ; } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; MST[rv.UOI3Mutator]MSP[] } @Override public E set ( final int index , E object ) {
object = transform ( object ) ; return getList () . set ( index , object ) ; MST[rv.UOI3Mutator]MSP[] } @Override public List < E > subList ( final int fromIndex , final int toIndex ) {
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; MST[ReturnValsMutator]MSP[] } @Override public E remove ( final int index ) {
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; MST[ReturnValsMutator]MSP[] } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; } @Override public E remove ( final int index ) {
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; MST[PrimitiveReturnsMutator]MSP[] } @Override public E remove ( final int index ) {
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; MST[NonVoidMethodCallMutator]MSP[] return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ;
return getList () . remove ( index ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; } @Override
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI3Mutator]MSP[]
if ( list . size () > 0 ) { @SuppressWarnings ( lr_1 ) final E [] values = ( E [] ) list . toArray () ; list . clear () ; for ( final E value : values ) { MST[rv.UOI2Mutator]MSP[]
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } return decorated ; } protected List < E > getList () { return ( List < E > ) decorated () ; } @Override public boolean equals ( final Object object ) {
return object == this || decorated () . equals ( object ) ; } @Override public int hashCode () { return decorated () . hashCode () ; MST[PrimitiveReturnsMutator]MSP[] } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
public boolean addAll ( final int index , Collection < ? extends E > coll ) { coll = transform ( coll ) ; return getList () . addAll ( index , coll ) ; MST[rv.UOI4Mutator]MSP[] } @Override public ListIterator < E > listIterator () {
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; } @Override public E remove ( final int index ) {
decorated . decorated () . add ( transformer . transform ( value ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } return decorated ; } protected List < E > getList () { return ( List < E > ) decorated () ; } @Override public boolean equals ( final Object object ) {
public int indexOf ( final Object object ) { return getList () . indexOf ( object ) ; MST[PrimitiveReturnsMutator]MSP[] } @Override public int lastIndexOf ( final Object object ) { return getList () . lastIndexOf ( object ) ; } @Override public E remove ( final int index ) {
return listIterator ( 0 ) ; MST[NullReturnValsMutator]MSP[] } @Override public ListIterator < E > listIterator ( final int i ) { return new TransformedListIterator ( getList () . listIterator ( i ) ) ; } @Override public E set ( final int index , E object ) {
return getList () . remove ( index ) ; } @Override public void add ( final int index , E object ) { object = transform ( object ) ; getList () . add ( index , object ) ; MST[rv.UOI3Mutator]MSP[] } @Override
return object == this || decorated () . equals ( object ) ; MST[rv.CRCR4Mutator]MSP[] } @Override public int hashCode () { return decorated () . hashCode () ; } @Override public E get ( final int index ) { return getList () . get ( index ) ; } @Override
getListIterator () . add ( object ) ; } @Override public void set ( E object ) { object = transform ( object ) ; MST[NonVoidMethodCallMutator]MSP[] getListIterator () . set ( object ) ; }
getListIterator () . add ( object ) ; } @Override public void set ( E object ) { object = transform ( object ) ; MST[ArgumentPropagationMutator]MSP[] getListIterator () . set ( object ) ; }
final List < E > sub = getList () . subList ( fromIndex , toIndex ) ; return new TransformedList <> ( sub , transformer ) ; } @Override public void add ( E object ) { object = transform ( object ) ; MST[NonVoidMethodCallMutator]MSP[]
getListIterator () . add ( object ) ; MST[VoidMethodCallMutator]MSP[] } @Override public void set ( E object ) { object = transform ( object ) ; getListIterator () . set ( object ) ; }
getListIterator () . add ( object ) ; } @Override public void set ( E object ) { object = transform ( object ) ; getListIterator () . set ( object ) ; MST[VoidMethodCallMutator]MSP[] }
