public Iterator < Map . Entry < K , V > > iterator () { return new EntryIterator () ; MST[ReturnValsMutator]MSP[N] } @Override public boolean contains ( final Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new EntryIterator () ; MST[NullReturnValsMutator]MSP[N] } @Override public boolean contains ( final Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; }
public Iterator < Map . Entry < K , V > > iterator () { return new EntryIterator () ; MST[ConstructorCallMutator]MSP[N] } @Override public boolean contains ( final Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; }
buffer . append ( lr_24 ) . append ( predecessor . getKey () ) . append ( lr_15 ) . append ( predecessor . bitIndex ) . append ( lr_20 ) ; } } buffer . append ( lr_25 ) ; return buffer . toString () ; } @Override MST[experimental.MemberVariableMutator]MSP[N]
return AbstractPatriciaTrie . this . size () ; } @Override public void clear () { AbstractPatriciaTrie . this . clear () ; } @Override public Map . Entry < K , V > next () { return nextEntry () ; MST[NullReturnValsMutator]MSP[N] } @Override public Iterator < K > iterator () {
return AbstractPatriciaTrie . this . size () ; } @Override public void clear () { AbstractPatriciaTrie . this . clear () ; } @Override public Map . Entry < K , V > next () { return nextEntry () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public Iterator < K > iterator () {
return AbstractPatriciaTrie . this . size () ; } @Override public void clear () { AbstractPatriciaTrie . this . clear () ; } @Override MST[experimental.MemberVariableMutator]MSP[N] public Map . Entry < K , V > next () { return nextEntry () ; } @Override public Iterator < K > iterator () {
return AbstractPatriciaTrie . this . size () ; } @Override public void clear () { AbstractPatriciaTrie . this . clear () ; } @Override public Map . Entry < K , V > next () { return nextEntry () ; MST[ReturnValsMutator]MSP[N] } @Override public Iterator < K > iterator () {
return key == null ; MST[rv.CRCR3Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR5Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR6Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[ReturnValsMutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.ROR5Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[InlineConstantMutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR4Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[NegateConditionalsMutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR3Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR1Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR5Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR6Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[rv.CRCR2Mutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[InlineConstantMutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
return key == null ; MST[BooleanTrueReturnValsMutator]MSP[N] } public boolean isInternalNode () { return left != this && right != this ; } public boolean isExternalNode () { return ! isInternalNode () ; } @Override public String toString () { final StringBuilder buffer = new StringBuilder () ;
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR4Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR1Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( previous == null || start != previous . predecessor ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
if ( isValidUplink ( current . right , current ) ) { MST[rv.ROR5Mutator]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.ROR3Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; MST[rv.UOI1Mutator]MSP[N] addEntry ( t , lengthInBits ) ;
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] break; } if ( isValidUplink ( current . left , current ) ) {
@Override MST[experimental.MemberVariableMutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; MST[ArgumentPropagationMutator]MSP[N] }
&& isValidUplink ( current . parent . right , current . parent ) ) { return current . parent . right ; MST[ReturnValsMutator]MSP[N] } if ( current . parent . right == current . parent ) { return null ; }
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[NonVoidMethodCallMutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( isValidUplink ( current . right , current ) ) { MST[NegateConditionalsMutator]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.UOI2Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.ABSMutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
if ( child . bitIndex <= node . bitIndex ) { MST[rv.ABSMutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[NegateConditionalsMutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[rv.ROR1Mutator]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[rv.ROR1Mutator]MSP[N]
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ; MST[rv.UOI2Mutator]MSP[N]
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[InlineConstantMutator]MSP[N] } @Override
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] return current ; } path = current ;
if ( previous == null || start != previous . predecessor ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
return current . left ; MST[ReturnValsMutator]MSP[N] } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; MST[rv.ABSMutator]MSP[N] } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR4Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( child . bitIndex <= node . bitIndex ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
&& isValidUplink ( current . parent . right , current . parent ) ) { return current . parent . right ; } if ( current . parent . right == current . parent ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; }
if ( child . bitIndex <= node . bitIndex ) { MST[ConditionalsBoundaryMutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; MST[NullReturnValsMutator]MSP[N] }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.UOI2Mutator]MSP[N] } @Override
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.ROR3Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[NegateConditionalsMutator]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR3Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.ABSMutator]MSP[N] } @Override
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.ROR2Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI1Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right MST[rv.ROR5Mutator]MSP[N]
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR4Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[rv.ROR1Mutator]MSP[N]
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.AOD1Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; MST[rv.UOI4Mutator]MSP[N] addEntry ( t , lengthInBits ) ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[RemoveConditionalMutator_ORDER_IF]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( child . bitIndex <= node . bitIndex ) { return child ; MST[NullReturnValsMutator]MSP[N] } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[NonVoidMethodCallMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.AOR3Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.CRCR5Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.ABSMutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] current . predecessor = entry ; }
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; MST[NonVoidMethodCallMutator]MSP[N] } while ( current == current . parent . right ) { if ( current == tree ) {
return null ; } current = current . parent ; } if ( current == tree ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR1Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[NonVoidMethodCallMutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] current . predecessor = entry ; }
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI2Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
incrementSize () ; MST[VoidMethodCallMutator]MSP[N] return null ; } else if ( KeyAnalyzer . isNullBitKey ( bitIndex ) ) { if ( root . isEmpty () ) { incrementSize () ; } else { incrementModCount () ; } return root . setKeyValue ( key , value ) ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] return current ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR4Mutator]MSP[N] return current ; } path = current ;
if ( previous == null || start != previous . predecessor ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR5Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( child . bitIndex <= node . bitIndex ) { MST[NegateConditionalsMutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.ROR5Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[NegateConditionalsMutator]MSP[N] current . predecessor = entry ; }
if ( found . isEmpty () ) { incrementSize () ; } else { incrementModCount () ; } return found . setKeyValue ( key , value ) ; } final int bitIndex = bitIndex ( key , found . key ) ; MST[NonVoidMethodCallMutator]MSP[N]
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI4Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[rv.ROR4Mutator]MSP[N]
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
if ( child . bitIndex <= node . bitIndex ) { MST[rv.ROR1Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( child . bitIndex <= node . bitIndex ) { MST[rv.ROR5Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { entry . left = entry ; MST[experimental.MemberVariableMutator]MSP[N] entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.UOI4Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ABSMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[rv.ROR5Mutator]MSP[N] child = node . right ; }
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; MST[rv.UOI1Mutator]MSP[N] if ( compareKeys ( key , found . key ) ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[RemoveConditionalMutator_ORDER_IF]MSP[N] || current . bitIndex <= path . bitIndex ) {
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[rv.ROR1Mutator]MSP[N] return null ; } return followLeft ( root ) ; }
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[rv.ROR4Mutator]MSP[N]
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ; MST[experimental.MemberVariableMutator]MSP[N]
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.AOR4Mutator]MSP[N] } @Override
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR3Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] break; } if ( isValidUplink ( current . left , current ) ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[rv.ROR4Mutator]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return null ; } if ( previous != current . right ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { path . left = entry ; } else { path . right = entry ; } return entry ; MST[NullReturnValsMutator]MSP[N] } path = current ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR5Mutator]MSP[N] current . predecessor = entry ; }
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[N] final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { if ( root . isEmpty () ) { incrementSize () ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.ROR1Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[ConditionalsBoundaryMutator]MSP[N] current . predecessor = entry ; }
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( lengthInBits == 0 ) { if ( root . isEmpty () ) { incrementSize () ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR2Mutator]MSP[N] current . predecessor = entry ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ABSMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[rv.ROR1Mutator]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ; MST[rv.ABSMutator]MSP[N]
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.AOR1Mutator]MSP[N] } @Override
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[rv.ROR4Mutator]MSP[N] return null ; } return followLeft ( root ) ; }
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[rv.ROR3Mutator]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI3Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; MST[ReturnValsMutator]MSP[N] } while ( current == current . parent . right ) { if ( current == tree ) {
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right MST[NegateConditionalsMutator]MSP[N]
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR2Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.AOD2Mutator]MSP[N] } @Override
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ROR3Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { return firstEntry () ; MST[NullReturnValsMutator]MSP[N] } return nextEntryImpl ( node . predecessor , node , null ) ; }
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; MST[rv.UOI3Mutator]MSP[N] if ( compareKeys ( key , found . key ) ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR1Mutator]MSP[N] return current ; } path = current ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.ROR2Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
@Override MST[experimental.MemberVariableMutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[NegateConditionalsMutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.CRCR2Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[NegateConditionalsMutator]MSP[N] child = node . right ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.ABSMutator]MSP[N] return current ; } path = current ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] current . predecessor = entry ; }
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; MST[ArgumentPropagationMutator]MSP[N] }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; MST[VoidMethodCallMutator]MSP[N] } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR5Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI3Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR3Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.ABSMutator]MSP[N] current . predecessor = entry ; }
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ROR4Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI2Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.ROR4Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; } if ( previous != current . right ) {
incrementSize () ; return null ; MST[ReturnValsMutator]MSP[N] } else if ( KeyAnalyzer . isNullBitKey ( bitIndex ) ) { if ( root . isEmpty () ) { incrementSize () ; } else { incrementModCount () ; } return root . setKeyValue ( key , value ) ;
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[rv.ROR2Mutator]MSP[N]
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[ConditionalsBoundaryMutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( compareKeys ( key , found . key ) ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI4Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR3Mutator]MSP[N] current . predecessor = entry ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ABSMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[rv.ROR2Mutator]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] current . predecessor = entry ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { return current ; MST[ReturnValsMutator]MSP[N] } path = current ;
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.CRCR6Mutator]MSP[N] } @Override
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { return current ; MST[NullReturnValsMutator]MSP[N] } path = current ;
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.AOD2Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[NegateConditionalsMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[ConditionalsBoundaryMutator]MSP[N] return current ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI1Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[ConditionalsBoundaryMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.ABSMutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[experimental.MemberVariableMutator]MSP[N] } @Override
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[NegateConditionalsMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( current == tree ) {
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; MST[NullReturnValsMutator]MSP[N] }
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR5Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[ReturnValsMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
@Override MST[rv.CRCR1Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[rv.ROR5Mutator]MSP[N]
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.ROR2Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[N] final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { if ( root . isEmpty () ) { incrementSize () ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI1Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR4Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[rv.ROR5Mutator]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; }
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[RemoveConditionalMutator_ORDER_IF]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
@Override MST[rv.CRCR1Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] return current ; } path = current ;
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[rv.ROR1Mutator]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[rv.ROR2Mutator]MSP[N] return null ; } return followLeft ( root ) ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.UOI3Mutator]MSP[N] } @Override
if ( isValidUplink ( current . right , current ) ) { return current . right ; MST[ReturnValsMutator]MSP[N] } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.UOI4Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.ROR4Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { MST[rv.ROR5Mutator]MSP[N] return null ; } if ( previous != current . parent . right
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[ConditionalsBoundaryMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( entrySet == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] entrySet = new EntrySet () ; } return entrySet ; } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR3Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] current . predecessor = entry ; }
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { MST[NegateConditionalsMutator]MSP[N] return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; }
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; MST[rv.UOI3Mutator]MSP[N] addEntry ( t , lengthInBits ) ;
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { return firstEntry () ; MST[ReturnValsMutator]MSP[N] } return nextEntryImpl ( node . predecessor , node , null ) ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.UOI4Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[rv.ROR4Mutator]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.ROR1Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { MST[NegateConditionalsMutator]MSP[N] return null ; } if ( previous != current . parent . right
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { MST[rv.ROR5Mutator]MSP[N] return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; }
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[rv.ROR2Mutator]MSP[N] child = node . right ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI3Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; MST[experimental.MemberVariableMutator]MSP[N] } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[NegateConditionalsMutator]MSP[N] return null ; } return followLeft ( root ) ; }
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.UOI4Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
return nextEntryImpl ( current . parent . right , previous , tree ) ; MST[ArgumentPropagationMutator]MSP[N] } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; }
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; MST[experimental.MemberVariableMutator]MSP[N] }
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ; MST[rv.UOI4Mutator]MSP[N]
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR3Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[MathMutator]MSP[N] } @Override
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; MST[NonVoidMethodCallMutator]MSP[N] }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.AOR2Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR1Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR6Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.CRCR3Mutator]MSP[N] } @Override
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[rv.ROR2Mutator]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
if ( previous == null || start != previous . predecessor ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[NegateConditionalsMutator]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[NegateConditionalsMutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[NegateConditionalsMutator]MSP[N]
@Override MST[InlineConstantMutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] return current ; } path = current ;
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[rv.ROR5Mutator]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.UOI1Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[rv.ROR3Mutator]MSP[N]
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI2Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.ROR3Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
if ( child . bitIndex <= node . bitIndex ) { MST[rv.ROR2Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; MST[rv.UOI2Mutator]MSP[N] } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
return null ; } current = current . parent ; } if ( current == tree ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] child = node . right ; }
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR3Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { path . left = entry ; MST[experimental.MemberVariableMutator]MSP[N] } else { path . right = entry ; } return entry ; } path = current ;
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; MST[NullReturnValsMutator]MSP[N] } while ( current == current . parent . right ) { if ( current == tree ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
@Override MST[InlineConstantMutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[rv.ROR5Mutator]MSP[N] return null ; } return followLeft ( root ) ; }
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { entry . left = entry ; entry . right = current ; MST[experimental.MemberVariableMutator]MSP[N] } else { entry . left = current ; entry . right = entry ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.ROR5Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.UOI3Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI4Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( isValidUplink ( current . right , current ) ) { MST[rv.ROR2Mutator]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
&& isValidUplink ( current . parent . right , current . parent ) ) { return current . parent . right ; } if ( current . parent . right == current . parent ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return null ; }
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.ROR4Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return null ; } if ( previous != current . parent . right
return nextEntryImpl ( current . parent . right , previous , tree ) ; MST[NonVoidMethodCallMutator]MSP[N] } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; }
if ( child . bitIndex <= node . bitIndex ) { MST[rv.ABSMutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR5Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] current . predecessor = entry ; }
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[rv.ROR3Mutator]MSP[N] return null ; } return followLeft ( root ) ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[InlineConstantMutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.ROR4Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[NegateConditionalsMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[N] child = node . right ; }
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; MST[ReturnValsMutator]MSP[N] }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] return current ; } path = current ;
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; MST[rv.UOI2Mutator]MSP[N] if ( compareKeys ( key , found . key ) ) {
@Override MST[rv.CRCR5Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return null ; } return followLeft ( root ) ; }
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[rv.ROR3Mutator]MSP[N] child = node . right ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.AOD1Mutator]MSP[N] } @Override
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[ConditionalsBoundaryMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[NonVoidMethodCallMutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; MST[rv.ABSMutator]MSP[N] if ( compareKeys ( key , found . key ) ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.UOI2Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[rv.ROR2Mutator]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
if ( isValidUplink ( current . right , current ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
&& isValidUplink ( current . parent . right , current . parent ) ) { return current . parent . right ; MST[NullReturnValsMutator]MSP[N] } if ( current . parent . right == current . parent ) { return null ; }
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; MST[PrimitiveReturnsMutator]MSP[N] } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
return null ; } current = current . parent ; } if ( current == tree ) { MST[rv.ROR5Mutator]MSP[N] return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR1Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( entrySet == null ) { entrySet = new EntrySet () ; MST[experimental.MemberVariableMutator]MSP[N] } return entrySet ; } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[NonVoidMethodCallMutator]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] return current ; } path = current ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR4Mutator]MSP[N] current . predecessor = entry ; }
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
&& isValidUplink ( current . parent . right , current . parent ) ) { return current . parent . right ; } if ( current . parent . right == current . parent ) { MST[NegateConditionalsMutator]MSP[N] return null ; }
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[NegateConditionalsMutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] child = node . right ; }
@Override MST[rv.CRCR5Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[rv.ROR3Mutator]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
if ( previous == null || start != previous . predecessor ) { MST[NegateConditionalsMutator]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.CRCR5Mutator]MSP[N] } @Override
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI2Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR5Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.CRCR4Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) { MST[NegateConditionalsMutator]MSP[N]
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR6Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.ABSMutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
return null ; } current = current . parent ; } if ( current == tree ) { MST[NegateConditionalsMutator]MSP[N] return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[NegateConditionalsMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.AOR3Mutator]MSP[N] } @Override
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
if ( isValidUplink ( current . right , current ) ) { MST[NonVoidMethodCallMutator]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR4Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ROR5Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI1Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.ROR3Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[NegateConditionalsMutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; } if ( previous != current . parent . right
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; MST[ConstructorCallMutator]MSP[N] addEntry ( t , lengthInBits ) ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR5Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ; MST[ArgumentPropagationMutator]MSP[N]
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR4Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR2Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
if ( isValidUplink ( current . right , current ) ) { MST[rv.ROR3Mutator]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
entry . predecessor = entry ; MST[experimental.MemberVariableMutator]MSP[N] if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.ROR1Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { MST[NegateConditionalsMutator]MSP[N] if ( current == tree ) {
return current . left ; MST[NullReturnValsMutator]MSP[N] } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[NonVoidMethodCallMutator]MSP[N]
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { return null ; MST[ReturnValsMutator]MSP[N] } if ( previous != current . parent . right
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { MST[rv.ROR5Mutator]MSP[N] if ( current == tree ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.ABSMutator]MSP[N] return current ; } path = current ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ; MST[rv.UOI1Mutator]MSP[N]
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.UOI1Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.ROR1Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.UOI3Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
if ( entrySet == null ) { entrySet = new EntrySet () ; } return entrySet ; MST[ReturnValsMutator]MSP[N] } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ABSMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[NonVoidMethodCallMutator]MSP[N]
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR3Mutator]MSP[N] return current ; } path = current ;
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ROR1Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[rv.ROR5Mutator]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; } return followLeft ( root ) ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; MST[rv.UOI3Mutator]MSP[N] } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) { MST[NegateConditionalsMutator]MSP[N]
return nextEntryImpl ( current . parent . right , previous , tree ) ; MST[ReturnValsMutator]MSP[N] } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; }
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[NegateConditionalsMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; MST[rv.UOI2Mutator]MSP[N] addEntry ( t , lengthInBits ) ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR2Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ABSMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR1Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; MST[NonVoidMethodCallMutator]MSP[N] }
} entry . parent = path ; MST[experimental.MemberVariableMutator]MSP[N] if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] current . predecessor = entry ; }
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR2Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) { MST[rv.ROR5Mutator]MSP[N]
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.UOI3Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.UOI1Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[NegateConditionalsMutator]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.AOR1Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI4Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.CRCR2Mutator]MSP[N] } @Override
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI3Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( child . bitIndex <= node . bitIndex ) { MST[rv.ROR3Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR2Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ; MST[rv.UOI3Mutator]MSP[N]
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
return nextEntryImpl ( current . parent . right , previous , tree ) ; } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[N] return null ; } return followLeft ( root ) ; }
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { MST[NegateConditionalsMutator]MSP[N] return null ; } if ( previous != current . right ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; MST[ReturnValsMutator]MSP[N] } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( entrySet == null ) { MST[NegateConditionalsMutator]MSP[N] entrySet = new EntrySet () ; } return entrySet ; } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR1Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR2Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( isValidUplink ( current . right , current ) ) { MST[rv.ROR1Mutator]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.ROR3Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { MST[rv.ROR5Mutator]MSP[N] return null ; } if ( previous != current . right ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { path . left = entry ; } else { path . right = entry ; MST[experimental.MemberVariableMutator]MSP[N] } return entry ; } path = current ;
if ( entrySet == null ) { MST[rv.ROR5Mutator]MSP[N] entrySet = new EntrySet () ; } return entrySet ; } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.AOR2Mutator]MSP[N] } @Override
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[rv.ROR2Mutator]MSP[N]
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.UOI1Mutator]MSP[N] } @Override
if ( entrySet == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] entrySet = new EntrySet () ; } return entrySet ; } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.ABSMutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; MST[rv.UOI1Mutator]MSP[N] } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[rv.ROR4Mutator]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI4Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR5Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ; MST[NonVoidMethodCallMutator]MSP[N]
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[rv.ROR4Mutator]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.UOI2Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.CRCR3Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI3Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI1Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI2Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR5Mutator]MSP[N] return current ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI4Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( child . bitIndex <= node . bitIndex ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] current . predecessor = entry ; }
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.CRCR6Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; MST[ReturnValsMutator]MSP[N] }
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[NegateConditionalsMutator]MSP[N]
return null ; } current = current . parent ; } if ( current == tree ) { return null ; } if ( current . parent . right == null ) { return null ; } if ( previous != current . parent . right MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[NegateConditionalsMutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
if ( isValidUplink ( current . right , current ) ) { return current . right ; MST[NullReturnValsMutator]MSP[N] } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; MST[rv.UOI4Mutator]MSP[N] } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; MST[rv.ABSMutator]MSP[N] addEntry ( t , lengthInBits ) ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI2Mutator]MSP[N] return current ; } path = current ;
if ( entrySet == null ) { entrySet = new EntrySet () ; } return entrySet ; MST[EmptyObjectReturnValsMutator]MSP[N] } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] return current ; } path = current ;
if ( entrySet == null ) { entrySet = new EntrySet () ; MST[ConstructorCallMutator]MSP[N] } return entrySet ; } @Override public Set < K > keySet () { if ( keySet == null ) { keySet = new KeySet () ; } return keySet ; } @Override
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR4Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.AOR4Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] current . predecessor = entry ; }
if ( isValidUplink ( current . right , current ) ) { MST[rv.ROR4Mutator]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI3Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { entry . left = entry ; entry . right = current ; } else { entry . left = current ; MST[experimental.MemberVariableMutator]MSP[N] entry . right = entry ;
@Override MST[rv.CRCR6Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.UOI2Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[NonVoidMethodCallMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[rv.ROR1Mutator]MSP[N] child = node . right ; }
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.CRCR5Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.CRCR4Mutator]MSP[N] } @Override
if ( child . bitIndex <= node . bitIndex ) { return child ; MST[ReturnValsMutator]MSP[N] } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[rv.UOI3Mutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; if ( compareKeys ( key , found . key ) ) { MST[rv.ROR5Mutator]MSP[N]
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.ROR5Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { return firstEntry () ; MST[NonVoidMethodCallMutator]MSP[N] } return nextEntryImpl ( node . predecessor , node , null ) ; }
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[NegateConditionalsMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
@Override MST[rv.CRCR6Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[NegateConditionalsMutator]MSP[N] return current ; } path = current ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR3Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( previous == null || start != previous . predecessor ) { MST[rv.ROR5Mutator]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[InlineConstantMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI1Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR1Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { MST[rv.ROR5Mutator]MSP[N] break; } if ( isValidUplink ( current . left , current ) ) {
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( current == tree ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { path . left = entry ; } else { path . right = entry ; } return entry ; MST[ReturnValsMutator]MSP[N] } path = current ;
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ROR2Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
return nextEntryImpl ( current . parent . right , previous , tree ) ; MST[NullReturnValsMutator]MSP[N] } TrieEntry < K , V > firstEntry () { if ( isEmpty () ) { return null ; } return followLeft ( root ) ; }
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.ROR2Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.ROR5Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.ROR2Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( isValidUplink ( current . right , current ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) {
if ( previous == null || start != previous . predecessor ) { MST[NegateConditionalsMutator]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.ABSMutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { MST[NegateConditionalsMutator]MSP[N] break; } if ( isValidUplink ( current . left , current ) ) {
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI1Mutator]MSP[N] return current ; } path = current ;
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.UOI1Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
if ( ! isBitSet ( key , current . bitIndex , lengthInBits ) ) { MST[rv.UOI1Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } V removeEntry ( final TrieEntry < K , V > h ) {
@Override MST[rv.CRCR3Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI3Mutator]MSP[N] current . predecessor = entry ; }
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; MST[rv.UOI4Mutator]MSP[N] } @Override
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[NegateConditionalsMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { MST[rv.ROR1Mutator]MSP[N] current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { current . predecessor = entry ; }
if ( child . bitIndex <= node . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
if ( child . bitIndex <= node . bitIndex ) { MST[rv.ROR4Mutator]MSP[N] return child ; } node = child ; } } @Override public Comparator < ? super K > comparator () { return getKeyAnalyzer () ; } @Override public K firstKey () {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI3Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
} else { incrementModCount () ; } return root . setKeyValue ( key , value ) ; } final TrieEntry < K , V > found = getNearestEntryForKey ( key , lengthInBits ) ; MST[rv.UOI4Mutator]MSP[N] if ( compareKeys ( key , found . key ) ) {
if ( ! isBitSet ( entry . key , current . bitIndex , lengthInBits ) ) { MST[rv.ROR3Mutator]MSP[N] current = current . left ; } else { current = current . right ; } } } @Override public V get ( final Object k ) {
if ( previous == null || start != previous . predecessor ) { MST[rv.ROR5Mutator]MSP[N] while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[NegateConditionalsMutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; } while ( current == current . parent . right ) { if ( current == tree ) { MST[rv.ROR5Mutator]MSP[N]
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[InlineConstantMutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
@Override MST[rv.CRCR3Mutator]MSP[N] public void clear () { root . key = null ; root . bitIndex = - 1 ; root . value = null ; root . parent = null ; root . left = root ; root . right = null ; root . predecessor = root ;
public V put ( final K key , final V value ) { Objects . requireNonNull ( key , lr_1 ) ; final int lengthInBits = lengthInBits ( key ) ; if ( lengthInBits == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( root . isEmpty () ) { incrementSize () ;
&& isValidUplink ( current . parent . right , current . parent ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return current . parent . right ; } if ( current . parent . right == current . parent ) { return null ; }
if ( isValidUplink ( current . right , current ) ) { return current . right ; } return nextEntryImpl ( current . right , previous , tree ) ; MST[ArgumentPropagationMutator]MSP[N] } while ( current == current . parent . right ) { if ( current == tree ) {
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[MathMutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
size = 0 ; incrementModCount () ; } @Override public int size () { return size ; } void incrementSize () { size ++ ; MST[experimental.MemberVariableMutator]MSP[N] incrementModCount () ; } void decrementSize () { size -- ; incrementModCount () ; } private void incrementModCount () { ++ modCount ; } @Override
return next != null && next . bitIndex <= from . bitIndex && ! next . isEmpty () ; MST[rv.UOI4Mutator]MSP[N] } public void set ( final E item ) { this . item = item ; } public E get () { return item ; } public boolean isEmpty () {
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[rv.UOI2Mutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
&& isValidUplink ( current . parent . right , current . parent ) ) { return current . parent . right ; } if ( current . parent . right == current . parent ) { MST[rv.ROR5Mutator]MSP[N] return null ; }
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.ROR5Mutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { MST[rv.ABSMutator]MSP[N] final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
entry . predecessor = entry ; if ( ! isBitSet ( entry . key , entry . bitIndex , lengthInBits ) ) { MST[rv.ROR2Mutator]MSP[N] entry . left = entry ; entry . right = current ; } else { entry . left = current ; entry . right = entry ;
if ( ! KeyAnalyzer . isOutOfBoundsIndex ( bitIndex ) ) { MST[NonVoidMethodCallMutator]MSP[N] if ( KeyAnalyzer . isValidBitIndex ( bitIndex ) ) { final TrieEntry < K , V > t = new TrieEntry <> ( key , value , bitIndex ) ; addEntry ( t , lengthInBits ) ;
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR2Mutator]MSP[N] return current ; } path = current ;
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { MST[rv.ROR3Mutator]MSP[N] if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) {
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.ABSMutator]MSP[N] current . predecessor = entry ; }
return current . left ; } current = current . left ; } } if ( current . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; } if ( current . right == null ) { return null ; } if ( previous != current . right ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex <= path . bitIndex ) { MST[rv.UOI4Mutator]MSP[N] return current ; } path = current ;
} TrieEntry < K , V > nextEntry ( final TrieEntry < K , V > node ) { if ( node == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return firstEntry () ; } return nextEntryImpl ( node . predecessor , node , null ) ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.UOI2Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( path == root || ! isBitSet ( entry . key , path . bitIndex , lengthInBits ) ) { MST[rv.ROR5Mutator]MSP[N] path . left = entry ; } else { path . right = entry ; } return entry ; } path = current ;
} entry . parent = path ; if ( current . bitIndex >= entry . bitIndex ) { current . parent = entry ; } if ( current . bitIndex <= path . bitIndex ) { MST[rv.ROR1Mutator]MSP[N] current . predecessor = entry ; }
TrieEntry < K , V > followLeft ( TrieEntry < K , V > node ) { while ( true ) { TrieEntry < K , V > child = node . left ; if ( child . isEmpty () ) { MST[rv.ROR4Mutator]MSP[N] child = node . right ; }
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ROR5Mutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
TrieEntry < K , V > current = root . left ; TrieEntry < K , V > path = root ; while ( true ) { if ( current . bitIndex >= entry . bitIndex MST[rv.ABSMutator]MSP[N] || current . bitIndex <= path . bitIndex ) {
if ( previous == null || start != previous . predecessor ) { while ( ! current . left . isEmpty () ) { if ( previous == current . left ) { break; } if ( isValidUplink ( current . left , current ) ) { MST[rv.ROR3Mutator]MSP[N]
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.ABSMutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[NegateConditionalsMutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
} next = findNext ( e ) ; current = e ; return e ; MST[NullReturnValsMutator]MSP[N] } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; } @Override
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { MST[NegateConditionalsMutator]MSP[N] throw new NoSuchElementException () ;
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
} next = findNext ( e ) ; current = e ; return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
public boolean hasNext () { return next != null ; MST[ReturnValsMutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
} next = findNext ( e ) ; MST[ArgumentPropagationMutator]MSP[N] current = e ; return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; } @Override
public boolean hasNext () { return next != null ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.CRCR3Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.ABSMutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.CRCR2Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.ROR3Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.CRCR3Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI1Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.CRCR6Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
} next = findNext ( e ) ; current = e ; return e ; MST[ReturnValsMutator]MSP[N] } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; } @Override
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] throw new NoSuchElementException () ;
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI4Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.CRCR6Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.ROR2Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[InlineConstantMutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.ROR5Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI1Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI2Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
} next = findNext ( e ) ; current = e ; return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; MST[ReturnValsMutator]MSP[N] } @Override
public boolean hasNext () { return next != null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
public boolean hasNext () { return next != null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI4Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI3Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[InlineConstantMutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
public boolean hasNext () { return next != null ; MST[NegateConditionalsMutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
} next = findNext ( e ) ; current = e ; MST[experimental.MemberVariableMutator]MSP[N] return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; } @Override
} next = findNext ( e ) ; current = e ; return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; MST[ArgumentPropagationMutator]MSP[N] } @Override
} next = findNext ( e ) ; MST[NonVoidMethodCallMutator]MSP[N] current = e ; return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; } @Override
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.ROR5Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
} next = findNext ( e ) ; current = e ; return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; MST[NullReturnValsMutator]MSP[N] } @Override
public boolean hasNext () { return next != null ; MST[rv.CRCR1Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.ROR4Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI2Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.CRCR5Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { MST[rv.ROR5Mutator]MSP[N] throw new NoSuchElementException () ;
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.UOI3Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
public boolean hasNext () { return next != null ; MST[rv.CRCR5Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
public boolean hasNext () { return next != null ; MST[rv.CRCR4Mutator]MSP[N] } @Override public void remove () { if ( current == null ) { throw new IllegalStateException () ; } if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { throw new ConcurrentModificationException () ; }
protected TrieEntry < K , V > nextEntry () { if ( expectedModCount != AbstractPatriciaTrie . this . modCount ) { MST[rv.ROR1Mutator]MSP[N] throw new ConcurrentModificationException () ; } final TrieEntry < K , V > e = next ; if ( e == null ) { throw new NoSuchElementException () ;
} next = findNext ( e ) ; MST[experimental.MemberVariableMutator]MSP[N] current = e ; return e ; } protected TrieEntry < K , V > findNext ( final TrieEntry < K , V > prior ) { return AbstractPatriciaTrie . this . nextEntry ( prior ) ; } @Override
