final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; MST[NullReturnValsMutator]MSP[S] } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; MST[NullReturnValsMutator]MSP[S] } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; MST[NullReturnValsMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; MST[ReturnValsMutator]MSP[S] } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] @SuppressWarnings ( lr_2 )
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; MST[ConstructorCallMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; MST[ReturnValsMutator]MSP[S] } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public K next () { return iterator . next () ; MST[ReturnValsMutator]MSP[S] } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( iterator instanceof Unmodifiable ) { @SuppressWarnings ( lr_2 )
throw new UnsupportedOperationException ( lr_3 ) ; MST[ConstructorCallMutator]MSP[S] } @Override public void remove () { throw new UnsupportedOperationException ( lr_4 ) ; }
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; MST[ReturnValsMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR2Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR1Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR3Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR4Mutator]MSP[S] @SuppressWarnings ( lr_2 )
public K next () { return iterator . next () ; MST[NullReturnValsMutator]MSP[S] } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[N] if ( iterator instanceof Unmodifiable ) { @SuppressWarnings ( lr_2 )
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[NegateConditionalsMutator]MSP[N] @SuppressWarnings ( lr_2 )
throw new UnsupportedOperationException ( lr_3 ) ; } @Override public void remove () { throw new UnsupportedOperationException ( lr_4 ) ; MST[ConstructorCallMutator]MSP[S] }
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[N] } @Override
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[rv.ROR5Mutator]MSP[N] @SuppressWarnings ( lr_2 )
final MapIterator < K , V > tmpIterator = ( MapIterator < K , V > ) iterator ; return tmpIterator ; } return new UnmodifiableMapIterator <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; MST[ReturnValsMutator]MSP[S] } @Override public V getValue () { return iterator . getValue () ; } @Override public V setValue ( final V value ) {
public K next () { return iterator . next () ; } @Override public K getKey () { return iterator . getKey () ; } @Override public V getValue () { return iterator . getValue () ; MST[NullReturnValsMutator]MSP[S] } @Override public V setValue ( final V value ) {
public static < K , V > MapIterator < K , V > unmodifiableMapIterator ( final MapIterator < ? extends K , ? extends V > iterator ) { Objects . requireNonNull ( iterator , lr_1 ) ; if ( iterator instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] @SuppressWarnings ( lr_2 )
