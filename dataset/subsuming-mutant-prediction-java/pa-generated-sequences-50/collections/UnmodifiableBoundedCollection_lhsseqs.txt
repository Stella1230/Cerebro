for ( int i = 0 ; i < 1000 ; i ++ ) { MST[ConditionalsBoundaryMutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR6Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR5Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR4Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
protected BoundedCollection < E > decorated () { return ( BoundedCollection < E > ) super . decorated () ; MST[NullReturnValsMutator]MSP[] }
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR2Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
return new UnmodifiableBoundedCollection <> ( ( BoundedCollection < E > ) collection ) ; } @Override public Iterator < E > iterator () { return UnmodifiableIterator . unmodifiableIterator ( decorated () . iterator () ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean add ( final E object ) {
return new UnmodifiableBoundedCollection <> ( ( BoundedCollection < E > ) collection ) ; } @Override public Iterator < E > iterator () { return UnmodifiableIterator . unmodifiableIterator ( decorated () . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean add ( final E object ) {
throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public boolean removeIf ( final Predicate < ? super E > filter ) { throw new UnsupportedOperationException () ; } @Override public boolean removeAll ( final Collection < ? > coll ) { throw new UnsupportedOperationException () ; } @Override
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[rv.ROR5Mutator]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.ROR2Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.ROR4Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[rv.ROR1Mutator]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[rv.ROR3Mutator]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
public boolean retainAll ( final Collection < ? > coll ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public boolean isFull () { return decorated () . isFull () ; } @Override public int maxSize () { return decorated () . maxSize () ; } @Override
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[IncrementsMutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[InlineConstantMutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; MST[ConstructorCallMutator]MSP[] }
throw new UnsupportedOperationException () ; } @Override public boolean removeIf ( final Predicate < ? super E > filter ) { throw new UnsupportedOperationException () ; } @Override public boolean removeAll ( final Collection < ? > coll ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public boolean addAll ( final Collection < ? extends E > coll ) { throw new UnsupportedOperationException () ; } @Override public void clear () { throw new UnsupportedOperationException () ; } @Override public boolean remove ( final Object object ) {
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR3Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
} else if ( collection instanceof SynchronizedCollection ) { MST[NegateConditionalsMutator]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR3Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[rv.ROR1Mutator]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
return new UnmodifiableBoundedCollection <> ( ( BoundedCollection < E > ) collection ) ; } @Override public Iterator < E > iterator () { return UnmodifiableIterator . unmodifiableIterator ( decorated () . iterator () ) ; MST[NullReturnValsMutator]MSP[] } @Override public boolean add ( final E object ) {
} return new UnmodifiableBoundedCollection <> ( coll ) ; MST[ConstructorCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( Collection < ? extends E > collection ) { Objects . requireNonNull ( collection , lr_2 ) ;
throw new UnsupportedOperationException () ; } @Override public boolean removeIf ( final Predicate < ? super E > filter ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public boolean removeAll ( final Collection < ? > coll ) { throw new UnsupportedOperationException () ; } @Override
throw new UnsupportedOperationException () ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { throw new UnsupportedOperationException () ; } @Override public void clear () { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public boolean remove ( final Object object ) {
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[rv.ROR5Mutator]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
return new UnmodifiableBoundedCollection <> ( ( BoundedCollection < E > ) collection ) ; } @Override public Iterator < E > iterator () { return UnmodifiableIterator . unmodifiableIterator ( decorated () . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean add ( final E object ) {
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.ROR3Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[rv.ROR2Mutator]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.UOI3Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[InlineConstantMutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ; MST[ReturnValsMutator]MSP[]
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { MST[rv.ROR3Mutator]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
} else if ( collection instanceof SynchronizedCollection ) { MST[rv.ROR2Mutator]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
} else if ( collection instanceof SynchronizedCollection ) { MST[rv.ROR1Mutator]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
} else if ( collection instanceof SynchronizedCollection ) { MST[rv.ROR4Mutator]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
} return new UnmodifiableBoundedCollection <> ( coll ) ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( Collection < ? extends E > collection ) { Objects . requireNonNull ( collection , lr_2 ) ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[rv.ROR2Mutator]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { MST[rv.ROR5Mutator]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[rv.ROR4Mutator]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[NegateConditionalsMutator]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
throw new UnsupportedOperationException () ; } @Override public boolean addAll ( final Collection < ? extends E > coll ) { throw new UnsupportedOperationException () ; MST[ConstructorCallMutator]MSP[] } @Override public void clear () { throw new UnsupportedOperationException () ; } @Override public boolean remove ( final Object object ) {
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[NegateConditionalsMutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
} else if ( collection instanceof SynchronizedCollection ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
} else if ( collection instanceof SynchronizedCollection ) { collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_3 ) ; }
return new UnmodifiableBoundedCollection <> ( ( BoundedCollection < E > ) collection ) ; } @Override public Iterator < E > iterator () { return UnmodifiableIterator . unmodifiableIterator ( decorated () . iterator () ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public boolean add ( final E object ) {
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ; MST[NullReturnValsMutator]MSP[]
} return new UnmodifiableBoundedCollection <> ( coll ) ; MST[NullReturnValsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( Collection < ? extends E > collection ) { Objects . requireNonNull ( collection , lr_2 ) ;
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR5Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR1Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR6Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
protected BoundedCollection < E > decorated () { return ( BoundedCollection < E > ) super . decorated () ; MST[ReturnValsMutator]MSP[] }
public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( final BoundedCollection < ? extends E > coll ) { if ( coll instanceof Unmodifiable ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_1 ) final BoundedCollection < E > tmpColl = ( BoundedCollection < E > ) coll ; return tmpColl ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.CRCR1Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[rv.ROR3Mutator]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
protected BoundedCollection < E > decorated () { return ( BoundedCollection < E > ) super . decorated () ; MST[NonVoidMethodCallMutator]MSP[] }
return new UnmodifiableBoundedCollection <> ( ( BoundedCollection < E > ) collection ) ; } @Override public Iterator < E > iterator () { return UnmodifiableIterator . unmodifiableIterator ( decorated () . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean add ( final E object ) {
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[rv.ROR4Mutator]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} return new UnmodifiableBoundedCollection <> ( coll ) ; } @SuppressWarnings ( lr_1 ) public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( Collection < ? extends E > collection ) { Objects . requireNonNull ( collection , lr_2 ) ; MST[NonVoidMethodCallMutator]MSP[]
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.ABSMutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} else if ( collection instanceof SynchronizedCollection ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] collection = ( ( SynchronizedCollection < E > ) collection ) . decorated () ; } } if ( collection instanceof BoundedCollection == false ) { throw new IllegalArgumentException ( lr_3 ) ; }
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.UOI1Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { MST[NegateConditionalsMutator]MSP[] break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.ROR1Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
for ( int i = 0 ; i < 1000 ; i ++ ) { MST[rv.ROR5Mutator]MSP[] if ( collection instanceof BoundedCollection ) { break; } if ( collection instanceof AbstractCollectionDecorator ) { collection = ( ( AbstractCollectionDecorator < E > ) collection ) . decorated () ;
} return new UnmodifiableBoundedCollection <> ( coll ) ; } @SuppressWarnings ( lr_1 ) public static < E > BoundedCollection < E > unmodifiableBoundedCollection ( Collection < ? extends E > collection ) { Objects . requireNonNull ( collection , lr_2 ) ; MST[ArgumentPropagationMutator]MSP[]
