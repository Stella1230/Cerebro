vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[MathMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI2Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[InlineConstantMutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public boolean fn_1 () { MST[rv.CRCR5Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[VoidMethodCallMutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.OBBN2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[experimental.MemberVariableMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.AOR3Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR3Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.ABSMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR4Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR3Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.OBBN1Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[NonVoidMethodCallMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[ReturnValsMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.OBBN3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.AOR1Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR2Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.CRCR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , MST[ReturnValsMutator]MSP[] vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.ROR4Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { MST[rv.CRCR6Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.ABSMutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.ROR3Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI1Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOD1Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[InlineConstantMutator]MSP[]
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ; MST[rv.CRCR5Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.OBBN2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[InlineConstantMutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.AOR3Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR5Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[ArgumentPropagationMutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR5Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { MST[rv.ROR1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.AOR2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOD1Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[InlineConstantMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI4Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR5Mutator]MSP[]
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[MathMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.CRCR2Mutator]MSP[]
public boolean fn_1 () { MST[rv.UOI1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOD2Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.CRCR6Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[InlineConstantMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; MST[IncrementsMutator]MSP[] if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR1Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR4Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR4Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR3Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR3Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI1Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
case '\r' : MST[rv.UOI3Mutator]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.AOD1Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR5Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[rv.ROR5Mutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.ROR4Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[NonVoidMethodCallMutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI3Mutator]MSP[] case 2 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[rv.UOI3Mutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR5Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { MST[rv.UOI3Mutator]MSP[] return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[NegateConditionalsMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ROR1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.ABSMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR1Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR4Mutator]MSP[] case 2 :
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[NegateConditionalsMutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vl_2 += vl_14 . length ; MST[rv.UOI4Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.CRCR6Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[experimental.MemberVariableMutator]MSP[] case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[NullReturnValsMutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.ROR1Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.ROR3Mutator]MSP[] + lr_3 + vr_30 ) ; }
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR5Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR6Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[InlineConstantMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ROR5Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR6Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vl_2 += vl_14 . length ; } } else { MST[rv.UOI4Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[rv.ROR5Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR6Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.OBBN2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; MST[rv.CRCR3Mutator]MSP[] } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ROR5Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR2Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { MST[rv.CRCR6Mutator]MSP[] if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[rv.CRCR3Mutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI4Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR6Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR1Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[ReturnValsMutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR5Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR2Mutator]MSP[] case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI3Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI2Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR1Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI3Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.UOI1Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR6Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI1Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI4Mutator]MSP[] + lr_3 + vr_30 ) ; }
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[ArgumentPropagationMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR3Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI3Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR6Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.UOI4Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.AOD1Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.CRCR4Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vl_2 += vl_14 . length ; MST[rv.UOI2Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR5Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[ArgumentPropagationMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.ABSMutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; MST[NonVoidMethodCallMutator]MSP[] fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR6Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR3Mutator]MSP[]
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ; MST[rv.ABSMutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR6Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[MathMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; MST[VoidMethodCallMutator]MSP[] int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[MathMutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.ROR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR1Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI2Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.CRCR4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; MST[NullReturnValsMutator]MSP[] fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR6Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR1Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI4Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR3Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR4Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; MST[InlineConstantMutator]MSP[] } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[NegateConditionalsMutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR5Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR1Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; MST[rv.UOI2Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR4Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[InlineConstantMutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR6Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.UOI2Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOD1Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.UOI2Mutator]MSP[] fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI4Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[InlineConstantMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR5Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR5Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR6Mutator]MSP[] }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { MST[InlineConstantMutator]MSP[] vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; MST[NegateConditionalsMutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; MST[InlineConstantMutator]MSP[] } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[IncrementsMutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.CRCR1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[NegateConditionalsMutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.UOI1Mutator]MSP[]
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR3Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[experimental.MemberVariableMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ; MST[experimental.RemoveIncrementsMutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.AOD1Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.UOI1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[rv.CRCR1Mutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.AOR2Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI1Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR3Mutator]MSP[]
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { MST[rv.CRCR5Mutator]MSP[] return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { MST[rv.CRCR3Mutator]MSP[] final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) { MST[ConstructorCallMutator]MSP[]
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[ConditionalsBoundaryMutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI2Mutator]MSP[]
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ABSMutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.ROR2Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOD1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.UOI3Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.UOI4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR5Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI1Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR3Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[experimental.MemberVariableMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR6Mutator]MSP[] } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[InlineConstantMutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR6Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.AOR4Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[rv.ROR2Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR3Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.UOI4Mutator]MSP[]
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[rv.CRCR5Mutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[NullReturnValsMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.AOD2Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[BooleanTrueReturnValsMutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI3Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI1Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.ROR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[MathMutator]MSP[]
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR5Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.UOI2Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR6Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.ROR1Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[InlineConstantMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.AOR1Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI4Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[MathMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; MST[rv.ROR2Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI2Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; MST[rv.ABSMutator]MSP[] if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.AOR3Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.CRCR6Mutator]MSP[]
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR6Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR3Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR4Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[rv.UOI4Mutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.ROR3Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[rv.CRCR2Mutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.AOD2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[EmptyObjectReturnValsMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI4Mutator]MSP[] vr_2 = null ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR3Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[NegateConditionalsMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR3Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI1Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.UOI4Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[MathMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI3Mutator]MSP[] if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; MST[rv.CRCR4Mutator]MSP[] final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR6Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.CRCR4Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[InlineConstantMutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ABSMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[NullReturnValsMutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI1Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[rv.CRCR3Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[IncrementsMutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR5Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR1Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[InlineConstantMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[NullReturnValsMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR3Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; } } else { MST[rv.AOD1Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.AOD2Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI3Mutator]MSP[] break; case 3 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOD1Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR4Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI1Mutator]MSP[] }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.UOI4Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.ROR5Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[InlineConstantMutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR3Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ROR4Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR2Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; MST[rv.CRCR5Mutator]MSP[] } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[InlineConstantMutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.ABSMutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[rv.CRCR1Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.CRCR5Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.CRCR3Mutator]MSP[]
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { MST[InlineConstantMutator]MSP[] return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[InlineConstantMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[rv.UOI4Mutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.CRCR3Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR2Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { MST[rv.UOI2Mutator]MSP[] return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
case '\r' : MST[rv.UOI4Mutator]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.ABSMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public boolean fn_1 () { MST[rv.CRCR5Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.AOD1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR6Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.CRCR5Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[InlineConstantMutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.ROR5Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI1Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[InlineConstantMutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR1Mutator]MSP[] case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR6Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[experimental.MemberVariableMutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; MST[InlineConstantMutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI4Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.CRCR6Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI3Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR2Mutator]MSP[]
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.ABSMutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI1Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI3Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR5Mutator]MSP[] case 2 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI2Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[NegateConditionalsMutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[MathMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.UOI1Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI2Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[MathMutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI2Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[ArgumentPropagationMutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI1Mutator]MSP[]
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.UOI4Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; MST[experimental.MemberVariableMutator]MSP[] } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI4Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.UOI1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[NegateConditionalsMutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public boolean fn_1 () { MST[rv.ABSMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.CRCR5Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR6Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI3Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.CRCR1Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public boolean fn_1 () { MST[experimental.MemberVariableMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR4Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI4Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[MathMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR3Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI3Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.UOI4Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[InlineConstantMutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[NonVoidMethodCallMutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[ReturnValsMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[ConditionalsBoundaryMutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[rv.CRCR6Mutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.ROR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.ABSMutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI1Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vl_3 >= vl_2 ) { vr_2 = null ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; MST[ConditionalsBoundaryMutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR3Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.ROR2Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[MathMutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR5Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[ReturnValsMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.AOR2Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.OBBN3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.OBBN3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.ABSMutator]MSP[] fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[InlineConstantMutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { MST[rv.ROR2Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR1Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI3Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[rv.CRCR6Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.UOI2Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.OBBN2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR6Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[ReturnValsMutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.ROR2Mutator]MSP[] + lr_3 + vr_30 ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR4Mutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI1Mutator]MSP[] vr_2 = null ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[InlineConstantMutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI3Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[NegateConditionalsMutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.OBBN3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.AOR4Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.ROR1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.CRCR1Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR4Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR2Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[InlineConstantMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR4Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI3Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR2Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR5Mutator]MSP[]
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; } } else { MST[rv.UOI3Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.ABSMutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[rv.CRCR4Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR6Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { MST[rv.CRCR5Mutator]MSP[] if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.ABSMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI4Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR5Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI3Mutator]MSP[] }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.AOR3Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.ABSMutator]MSP[] case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[ReturnValsMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[rv.CRCR5Mutator]MSP[]
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR3Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[EmptyObjectReturnValsMutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI1Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.UOI3Mutator]MSP[]
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ABSMutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[ReturnValsMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[rv.CRCR4Mutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[InlineConstantMutator]MSP[] case 2 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.UOI4Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[experimental.MemberVariableMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.AOD2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[InlineConstantMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.ROR4Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOD2Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[InlineConstantMutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI3Mutator]MSP[] + lr_3 + vr_30 ) ; }
final byte [] vr_17 = new byte [ vl_2 ] ; MST[InlineConstantMutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[InlineConstantMutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; MST[InlineConstantMutator]MSP[] final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.ABSMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR5Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; MST[rv.ROR4Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR6Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI1Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.UOI4Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI2Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR5Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.CRCR3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , MST[NullReturnValsMutator]MSP[] vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.ABSMutator]MSP[]
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR5Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[VoidMethodCallMutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; MST[rv.CRCR5Mutator]MSP[] final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.AOR3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR4Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.ROR5Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR2Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.CRCR5Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI4Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; MST[rv.UOI3Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[InlineConstantMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.ABSMutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR5Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI4Mutator]MSP[] break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR2Mutator]MSP[]
public boolean fn_1 () { MST[rv.CRCR4Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.UOI3Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[NegateConditionalsMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[NegateConditionalsMutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.ROR3Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[InlineConstantMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR2Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.UOI2Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[NullReturnValsMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR5Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.CRCR1Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { MST[rv.AOR2Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOD1Mutator]MSP[] case 2 :
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI2Mutator]MSP[] if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ABSMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR1Mutator]MSP[]
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[NullReturnValsMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[MathMutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR4Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; MST[rv.ROR5Mutator]MSP[] } static byte [] fn_29 ( final tp_3 vr_42 ) { int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[rv.CRCR2Mutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.UOI3Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; MST[ReturnValsMutator]MSP[] fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.ABSMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[ConditionalsBoundaryMutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[experimental.MemberVariableMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI3Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[rv.ROR5Mutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.ROR1Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI3Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR2Mutator]MSP[] case 2 :
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.UOI1Mutator]MSP[] fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[rv.CRCR3Mutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR4Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ABSMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { MST[rv.CRCR3Mutator]MSP[] return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NonVoidMethodCallMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.ROR1Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; MST[NegateConditionalsMutator]MSP[] } static byte [] fn_29 ( final tp_3 vr_42 ) { int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ROR4Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR4Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR1Mutator]MSP[] }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[InlineConstantMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[InlineConstantMutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.ROR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR2Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR3Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR6Mutator]MSP[]
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[InlineConstantMutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR5Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; MST[ReturnValsMutator]MSP[] } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.AOR1Mutator]MSP[] }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR2Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOD2Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; MST[rv.ROR1Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.UOI2Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.ROR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI1Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.ROR2Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI2Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.ROR2Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI3Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
public byte [] fn_8 ( final byte [] vr_23 ) { MST[rv.UOI3Mutator]MSP[] fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vl_2 += vl_14 . length ; MST[rv.ROR1Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[NonVoidMethodCallMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.AOR2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI1Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.CRCR5Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[InlineConstantMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR3Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI1Mutator]MSP[] if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
public boolean fn_1 () { MST[rv.UOI3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI1Mutator]MSP[] }
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOD1Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { MST[rv.CRCR3Mutator]MSP[] return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[InlineConstantMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI4Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[ReturnValsMutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.CRCR5Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.UOI1Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.UOI3Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR3Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.AOD1Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.CRCR6Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR5Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR6Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR1Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI1Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.ABSMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI3Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI2Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vl_2 += vl_14 . length ; MST[rv.UOI4Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; MST[rv.UOI3Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.CRCR6Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; MST[rv.UOI4Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.ABSMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[VoidMethodCallMutator]MSP[] }
final byte [] vr_17 = new byte [ vl_2 ] ; MST[InlineConstantMutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI4Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
case '\r' : MST[experimental.SwitchMutator]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR5Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.ABSMutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[NegateConditionalsMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI4Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR1Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR4Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR4Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[InlineConstantMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR2Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[InlineConstantMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { MST[experimental.MemberVariableMutator]MSP[] vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.ROR5Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI3Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.ROR5Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI4Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[NegateConditionalsMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[InlineConstantMutator]MSP[]
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR4Mutator]MSP[]
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[InlineConstantMutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI2Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[InlineConstantMutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI3Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.ROR1Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.UOI4Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR1Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[VoidMethodCallMutator]MSP[] fn_22 () ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.UOI2Mutator]MSP[]
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.ABSMutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; MST[rv.ROR4Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { MST[ArgumentPropagationMutator]MSP[] String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR5Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR4Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { MST[rv.CRCR1Mutator]MSP[] final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { MST[rv.CRCR6Mutator]MSP[] return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[InlineConstantMutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.ABSMutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[ReturnValsMutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[InlineConstantMutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.ABSMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR3Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[InlineConstantMutator]MSP[]
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI4Mutator]MSP[]
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.ROR4Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[MathMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOD2Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[NullReturnValsMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[MathMutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR5Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI2Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR4Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { MST[rv.CRCR5Mutator]MSP[] return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[BooleanTrueReturnValsMutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; MST[rv.ROR5Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ; MST[NonVoidMethodCallMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR6Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { MST[rv.AOR4Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.CRCR6Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vl_2 += vl_14 . length ; MST[rv.UOI3Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR1Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.AOD2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { MST[ReturnValsMutator]MSP[] return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI4Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.AOR3Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR2Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; MST[rv.CRCR3Mutator]MSP[] vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; MST[rv.ROR4Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI4Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
case '\r' : MST[rv.UOI2Mutator]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[rv.ABSMutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR1Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { MST[rv.CRCR3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { MST[InlineConstantMutator]MSP[] final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.ABSMutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.UOI2Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.UOI2Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[MathMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] + lr_3 + vr_30 ) ; }
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[rv.ROR4Mutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.OBBN2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.AOR4Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR4Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI1Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[ConditionalsBoundaryMutator]MSP[] + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR3Mutator]MSP[]
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[NegateConditionalsMutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.CRCR4Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[MathMutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.ROR4Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { MST[NegateConditionalsMutator]MSP[] System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[VoidMethodCallMutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
public boolean fn_1 () { MST[rv.CRCR6Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR3Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.ROR2Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI2Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR5Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR3Mutator]MSP[] case 2 :
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.CRCR3Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR6Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI3Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[rv.CRCR4Mutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR4Mutator]MSP[] case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR6Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR5Mutator]MSP[] }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR1Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI2Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.CRCR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR2Mutator]MSP[] case 2 :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI2Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[MathMutator]MSP[]
case '\r' : MST[rv.ABSMutator]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { MST[ConstructorCallMutator]MSP[] return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[MathMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI3Mutator]MSP[] + lr_3 + vr_30 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.UOI4Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR4Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; MST[rv.ROR5Mutator]MSP[] if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.AOD2Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[InlineConstantMutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[rv.UOI2Mutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR4Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR3Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI1Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[NullReturnValsMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[InlineConstantMutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI4Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.ABSMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI4Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public boolean fn_1 () { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR3Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[NegateConditionalsMutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOD1Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOD1Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { MST[rv.CRCR5Mutator]MSP[] vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI1Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; MST[rv.ROR5Mutator]MSP[] } break; case 2 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ROR5Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.UOI3Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[experimental.MemberVariableMutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR4Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI4Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.AOR4Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.AOR1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.ROR5Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[MathMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR6Mutator]MSP[]
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; MST[experimental.MemberVariableMutator]MSP[] vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.AOD2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.OBBN1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[NegateConditionalsMutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.ABSMutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.ABSMutator]MSP[] break; case 3 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[NegateConditionalsMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.UOI3Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR3Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; MST[rv.UOI4Mutator]MSP[] } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR1Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[NonVoidMethodCallMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.ROR5Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[InlineConstantMutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR3Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR3Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public boolean fn_1 () { MST[rv.CRCR3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[InlineConstantMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[ArgumentPropagationMutator]MSP[]
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR5Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR5Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR2Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { MST[rv.AOR1Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.CRCR3Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[experimental.MemberVariableMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[EmptyObjectReturnValsMutator]MSP[] fn_22 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.ROR5Mutator]MSP[] + lr_3 + vr_30 ) ; }
public boolean fn_1 () { MST[InlineConstantMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR1Mutator]MSP[]
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR1Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.OBBN1Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI4Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[MathMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[InlineConstantMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.UOI3Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; MST[rv.ROR3Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ROR3Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[BooleanTrueReturnValsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.AOR2Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR4Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR2Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR4Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[experimental.MemberVariableMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI1Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.CRCR6Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR1Mutator]MSP[]
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.CRCR2Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[rv.ROR4Mutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI3Mutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI4Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR2Mutator]MSP[]
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[InlineConstantMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[rv.UOI3Mutator]MSP[] fn_22 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[experimental.SwitchMutator]MSP[] break; case 3 :
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI4Mutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.AOR2Mutator]MSP[] }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR2Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ABSMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR6Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.AOR1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[NegateConditionalsMutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR6Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[VoidMethodCallMutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ABSMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.OBBN2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { MST[EmptyObjectReturnValsMutator]MSP[] String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR3Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR2Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR5Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI1Mutator]MSP[] + lr_3 + vr_30 ) ; }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[rv.CRCR6Mutator]MSP[]
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI4Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR1Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[experimental.MemberVariableMutator]MSP[]
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[rv.CRCR4Mutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.AOR3Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { MST[BooleanTrueReturnValsMutator]MSP[] return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.OBBN1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.OBBN1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ROR2Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR5Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR6Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.UOI3Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR3Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[NegateConditionalsMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ABSMutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI1Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.UOI4Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.ROR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ROR5Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[rv.CRCR3Mutator]MSP[]
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[InlineConstantMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.ABSMutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[MathMutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI4Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[MathMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI4Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.AOR4Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[experimental.RemoveIncrementsMutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public boolean fn_1 () { MST[rv.CRCR6Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR4Mutator]MSP[]
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.AOD2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[NegateConditionalsMutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; MST[ReturnValsMutator]MSP[] fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[ArgumentPropagationMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[experimental.MemberVariableMutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR4Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR3Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; MST[rv.UOI2Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI1Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[MathMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI4Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR5Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI2Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR5Mutator]MSP[] }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[ConditionalsBoundaryMutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; MST[rv.UOI1Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR1Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.ROR3Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; MST[rv.UOI1Mutator]MSP[] } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.UOI1Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI3Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOD1Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR4Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[NullReturnValsMutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI4Mutator]MSP[] + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.ABSMutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.UOI4Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[InlineConstantMutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[InlineConstantMutator]MSP[]
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI2Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR3Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vl_2 += vl_14 . length ; } } else { MST[rv.ABSMutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR6Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR2Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; MST[rv.ABSMutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; MST[rv.UOI1Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; MST[rv.UOI2Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[VoidMethodCallMutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { MST[rv.ABSMutator]MSP[] return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; MST[rv.ROR5Mutator]MSP[] vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.AOR1Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR1Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR6Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[ConditionalsBoundaryMutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[rv.CRCR2Mutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ROR2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[rv.CRCR6Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.AOR4Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.ABSMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.UOI3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI1Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.UOI1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.ROR3Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.ABSMutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI1Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ABSMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR4Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ABSMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI4Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR1Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[rv.CRCR3Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR5Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.ROR4Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI3Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI4Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vl_2 += vl_14 . length ; MST[ConditionalsBoundaryMutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.ROR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR5Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR1Mutator]MSP[]
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[ArgumentPropagationMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[NullReturnValsMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR4Mutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI1Mutator]MSP[] vr_2 = null ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.ROR2Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.ABSMutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR5Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR4Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI3Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.UOI3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.UOI4Mutator]MSP[]
public boolean fn_1 () { MST[rv.UOI3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[MathMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR2Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.UOI1Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR5Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.OBBN3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI1Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR6Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR4Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.CRCR2Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } static byte [] fn_29 ( final tp_3 vr_42 ) { int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR1Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[rv.CRCR5Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.CRCR5Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI4Mutator]MSP[] if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI2Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.OBBN3Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { MST[rv.CRCR6Mutator]MSP[] final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { MST[experimental.MemberVariableMutator]MSP[] final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[NegateConditionalsMutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[NonVoidMethodCallMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[rv.CRCR4Mutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.OBBN1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.AOR3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.ROR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR2Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI2Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI3Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; MST[rv.CRCR1Mutator]MSP[] } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.CRCR3Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI2Mutator]MSP[] break; case 3 :
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[rv.ROR1Mutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR4Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR5Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[InlineConstantMutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR2Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI3Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.ABSMutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.OBBN2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[experimental.MemberVariableMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.CRCR1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[InlineConstantMutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.CRCR1Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.UOI3Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[MathMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR1Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOD1Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.ROR3Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { MST[ReturnValsMutator]MSP[] return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR4Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[NegateConditionalsMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[experimental.MemberVariableMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR1Mutator]MSP[]
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR2Mutator]MSP[] }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[InlineConstantMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[rv.CRCR6Mutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI4Mutator]MSP[] vr_2 = null ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[ReturnValsMutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI1Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.AOR4Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.UOI3Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI1Mutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.AOR2Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR4Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.AOR1Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI1Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ABSMutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[InlineConstantMutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOD2Mutator]MSP[]
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR4Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR3Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.ABSMutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.ABSMutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[ConditionalsBoundaryMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ABSMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR5Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR3Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI3Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[rv.CRCR6Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[ConstructorCallMutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[experimental.MemberVariableMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI3Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[VoidMethodCallMutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.ROR1Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ABSMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; } } else { MST[rv.UOI1Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI4Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[rv.CRCR5Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[rv.UOI1Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[rv.ROR2Mutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { MST[rv.CRCR3Mutator]MSP[] if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR3Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[experimental.SwitchMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR3Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; MST[rv.CRCR1Mutator]MSP[] } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[InlineConstantMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR3Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI1Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR6Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[EmptyObjectReturnValsMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI2Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI4Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[rv.CRCR1Mutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[InlineConstantMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR6Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.CRCR3Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ROR4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI4Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.UOI1Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.CRCR5Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.ROR1Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; MST[rv.UOI3Mutator]MSP[] } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOD2Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI4Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOD1Mutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[MathMutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.UOI3Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[NullReturnValsMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR3Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; MST[rv.ROR2Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR6Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ROR2Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI3Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.AOR3Mutator]MSP[]
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR6Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.CRCR3Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[MathMutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR1Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR2Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[ConstructorCallMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI3Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[MathMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR5Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { MST[ConstructorCallMutator]MSP[] String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOD2Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.ABSMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI2Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; MST[experimental.MemberVariableMutator]MSP[] } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[rv.UOI2Mutator]MSP[] fn_22 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; MST[NonVoidMethodCallMutator]MSP[] } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[InlineConstantMutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR1Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { MST[rv.UOI4Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[experimental.MemberVariableMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[NonVoidMethodCallMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.ABSMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { MST[rv.CRCR1Mutator]MSP[] vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { MST[ReturnValsMutator]MSP[] return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.AOR2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI3Mutator]MSP[] }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.UOI2Mutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.AOR3Mutator]MSP[] }
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR1Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI2Mutator]MSP[] vr_2 = null ; }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR3Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[experimental.MemberVariableMutator]MSP[] } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.AOD1Mutator]MSP[]
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[NegateConditionalsMutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR3Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR4Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ABSMutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[IncrementsMutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR6Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.CRCR1Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR5Mutator]MSP[] case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.OBBN3Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.ROR4Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.UOI1Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR1Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR5Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.AOD1Mutator]MSP[] }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI3Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOD1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[rv.CRCR5Mutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[ReturnValsMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI3Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR5Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI3Mutator]MSP[]
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI4Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[NegateConditionalsMutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public boolean fn_1 () { MST[rv.CRCR5Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR6Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI2Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR3Mutator]MSP[]
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { MST[rv.CRCR1Mutator]MSP[] return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR3Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR2Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI2Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ROR1Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR5Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR1Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[VoidMethodCallMutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR6Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[MathMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[MathMutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI1Mutator]MSP[] break; case 3 :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI3Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[rv.ROR2Mutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.AOR1Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI4Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ROR2Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
final byte [] vr_17 = new byte [ vl_2 ] ; MST[VoidMethodCallMutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI3Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[MathMutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.AOR4Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR1Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.CRCR3Mutator]MSP[]
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[InlineConstantMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; MST[rv.CRCR2Mutator]MSP[] final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; MST[rv.UOI3Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.CRCR2Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR3Mutator]MSP[] } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.AOD2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI3Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR2Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[rv.UOI1Mutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[ReturnValsMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.OBBN2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI4Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR3Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[InlineConstantMutator]MSP[] } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR6Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[rv.CRCR3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI1Mutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR3Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR3Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[VoidMethodCallMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vl_2 += vl_14 . length ; MST[rv.ROR3Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[InlineConstantMutator]MSP[]
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR3Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI1Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
public boolean fn_1 () { MST[rv.UOI4Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.UOI2Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR6Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public byte [] fn_8 ( final byte [] vr_23 ) { MST[rv.ABSMutator]MSP[] fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI4Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.CRCR5Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR1Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.CRCR3Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.CRCR5Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; MST[rv.ABSMutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[ReturnValsMutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; MST[PrimitiveReturnsMutator]MSP[] } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[rv.ROR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[InlineConstantMutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR6Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR5Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { MST[NegateConditionalsMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[InlineConstantMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.ROR3Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.ROR3Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR6Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI1Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[NegateConditionalsMutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI1Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR1Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR4Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; MST[experimental.MemberVariableMutator]MSP[] } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public boolean fn_1 () { MST[rv.UOI4Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { MST[rv.CRCR5Mutator]MSP[] final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI1Mutator]MSP[] + lr_3 + vr_30 ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR1Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[MathMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI2Mutator]MSP[] }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { MST[experimental.MemberVariableMutator]MSP[] if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI4Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[MathMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.CRCR5Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR5Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; MST[rv.CRCR5Mutator]MSP[] vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR5Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.UOI4Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[InlineConstantMutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[ArgumentPropagationMutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.ABSMutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR4Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ; MST[VoidMethodCallMutator]MSP[]
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[experimental.MemberVariableMutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.UOI1Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[experimental.MemberVariableMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[ReturnValsMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vl_2 += vl_14 . length ; MST[rv.UOI4Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public boolean fn_1 () { MST[rv.ROR5Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[InlineConstantMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ; MST[IncrementsMutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.UOI2Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOD1Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR4Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI4Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[MathMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[MathMutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[rv.UOI4Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[VoidMethodCallMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI1Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { MST[NonVoidMethodCallMutator]MSP[] return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[experimental.MemberVariableMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[NegateConditionalsMutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI2Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public boolean fn_1 () { MST[rv.UOI3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.UOI1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public boolean fn_1 () { MST[rv.CRCR1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.AOR2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR4Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI3Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.ROR4Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[rv.ROR5Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR3Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[experimental.MemberVariableMutator]MSP[] }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI3Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.OBBN1Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.ABSMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR1Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI2Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR6Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR5Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[InlineConstantMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[experimental.RemoveIncrementsMutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR5Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.UOI4Mutator]MSP[] fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.AOR1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.OBBN3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI1Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR6Mutator]MSP[] case 2 :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.ROR5Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR6Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOD2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.AOD1Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI3Mutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.CRCR4Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { MST[rv.UOI4Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { MST[InlineConstantMutator]MSP[] if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.ROR5Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR3Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR6Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[ReturnValsMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI1Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; MST[rv.UOI2Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[ConditionalsBoundaryMutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[InlineConstantMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR6Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.UOI1Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOD2Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[MathMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR6Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[NonVoidMethodCallMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { MST[rv.UOI2Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NonVoidMethodCallMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[MathMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI2Mutator]MSP[]
vl_2 += vl_14 . length ; MST[rv.ROR5Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR1Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR2Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
case '\r' : MST[rv.UOI1Mutator]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.ABSMutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.AOR2Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI2Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.ROR5Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI1Mutator]MSP[] case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.ABSMutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR4Mutator]MSP[] } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI4Mutator]MSP[] }
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.CRCR6Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[experimental.RemoveSwitchMutator_0]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; MST[rv.ABSMutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[experimental.RemoveSwitchMutator_1]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR6Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[InlineConstantMutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[MathMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[NullReturnValsMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR3Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR3Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[rv.ROR1Mutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR5Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI2Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR1Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.AOD1Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR6Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; MST[rv.ROR1Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.UOI2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { MST[rv.UOI2Mutator]MSP[] fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { MST[rv.CRCR6Mutator]MSP[] return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[MathMutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { MST[rv.CRCR2Mutator]MSP[] if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[ArgumentPropagationMutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR1Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[InlineConstantMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[NegateConditionalsMutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ; MST[rv.CRCR3Mutator]MSP[]
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[rv.UOI2Mutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.ROR1Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[ReturnValsMutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[rv.CRCR1Mutator]MSP[]
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[ConstructorCallMutator]MSP[] }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[NegateConditionalsMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR5Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI2Mutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[rv.CRCR6Mutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { MST[BooleanTrueReturnValsMutator]MSP[] return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.UOI1Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.AOD2Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR1Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.OBBN1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI3Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; MST[NegateConditionalsMutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR5Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.AOR4Mutator]MSP[] }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI3Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR5Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI3Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.CRCR6Mutator]MSP[]
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[NegateConditionalsMutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR2Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[ArgumentPropagationMutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.ABSMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; MST[NegateConditionalsMutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[InlineConstantMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR6Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[NegateConditionalsMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.ROR4Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR4Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; MST[experimental.MemberVariableMutator]MSP[] vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; MST[experimental.RemoveIncrementsMutator]MSP[] if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI3Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; MST[rv.CRCR6Mutator]MSP[] } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR4Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR6Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[ArgumentPropagationMutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.ABSMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[BooleanFalseReturnValsMutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[ReturnValsMutator]MSP[]
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.ABSMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.ABSMutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[rv.ABSMutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.CRCR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.AOD2Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[MathMutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[rv.CRCR1Mutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR4Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR3Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI3Mutator]MSP[] }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { MST[ReturnValsMutator]MSP[] return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR4Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.UOI1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR2Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public boolean fn_1 () { MST[rv.ABSMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[rv.ABSMutator]MSP[] fn_22 () ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR1Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR5Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[rv.ROR5Mutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR1Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.UOI1Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.ABSMutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI4Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[ReturnValsMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR5Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI3Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[MathMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[InlineConstantMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.ABSMutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR5Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[rv.ROR3Mutator]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[InlineConstantMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.CRCR1Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR2Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; MST[BooleanTrueReturnValsMutator]MSP[] } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI4Mutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR2Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[NonVoidMethodCallMutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[InlineConstantMutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI1Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR1Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR1Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOD2Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[rv.CRCR3Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.CRCR3Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.OBBN3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[ArgumentPropagationMutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI3Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ROR1Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[ReturnValsMutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { MST[VoidMethodCallMutator]MSP[] fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR2Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI1Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[InlineConstantMutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.UOI2Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.CRCR2Mutator]MSP[]
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI1Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { MST[InlineConstantMutator]MSP[] return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[MathMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR2Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR6Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR2Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.CRCR2Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.AOD1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI4Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR5Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[experimental.MemberVariableMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI3Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; MST[rv.CRCR6Mutator]MSP[] vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.AOR1Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[rv.UOI1Mutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.ROR4Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.AOR2Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.UOI4Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; MST[rv.ROR2Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR6Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.CRCR6Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[experimental.MemberVariableMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.AOR3Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR4Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR5Mutator]MSP[]
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR5Mutator]MSP[] } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ; MST[experimental.MemberVariableMutator]MSP[]
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[ReturnValsMutator]MSP[] fn_22 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.ABSMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[InlineConstantMutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI4Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.AOD1Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOD1Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[ReturnValsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.UOI3Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.ABSMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI1Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[InlineConstantMutator]MSP[]
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[rv.CRCR5Mutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[InlineConstantMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.CRCR5Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR1Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.UOI3Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.OBBN1Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[NegateConditionalsMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[InlineConstantMutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[rv.UOI3Mutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.ROR2Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR4Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI1Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; MST[rv.UOI1Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.AOR4Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.ABSMutator]MSP[]
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.ABSMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR3Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[InlineConstantMutator]MSP[]
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR6Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR3Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[NonVoidMethodCallMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI3Mutator]MSP[] vr_2 = null ; }
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ROR3Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR3Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.AOR1Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[rv.UOI4Mutator]MSP[] fn_22 () ;
vl_2 += vl_14 . length ; MST[rv.UOI1Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[rv.CRCR6Mutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR6Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[InlineConstantMutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.UOI2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; } } else { MST[rv.AOD2Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.CRCR5Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR3Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR1Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.CRCR3Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.UOI2Mutator]MSP[] vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.AOR2Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.ABSMutator]MSP[] }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[ArgumentPropagationMutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; MST[rv.CRCR3Mutator]MSP[] } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOD2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[experimental.MemberVariableMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[experimental.RemoveSwitchMutator_0]MSP[] break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[experimental.RemoveSwitchMutator_1]MSP[] break; case 3 :
public boolean fn_1 () { MST[rv.ROR3Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI3Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ; MST[InlineConstantMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR5Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR6Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[MathMutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.ABSMutator]MSP[] + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR1Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[NegateConditionalsMutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI4Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { MST[ReturnValsMutator]MSP[] String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[InlineConstantMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.AOR4Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[ReturnValsMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR3Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.OBBN2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; MST[NegateConditionalsMutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI3Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.UOI3Mutator]MSP[] fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.UOI2Mutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR4Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public boolean fn_1 () { MST[rv.CRCR1Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[NonVoidMethodCallMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[MathMutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ROR5Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; MST[NonVoidMethodCallMutator]MSP[] vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR5Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR6Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ; MST[rv.UOI3Mutator]MSP[]
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR1Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.CRCR1Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[experimental.MemberVariableMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[rv.CRCR1Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.AOD2Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[EmptyObjectReturnValsMutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[MathMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.ABSMutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.ROR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI1Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.OBBN2Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { MST[rv.ABSMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[experimental.MemberVariableMutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[InlineConstantMutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI2Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR3Mutator]MSP[]
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.ABSMutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.CRCR3Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[InlineConstantMutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOD1Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { MST[rv.UOI1Mutator]MSP[] fn_22 () ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR6Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI2Mutator]MSP[] case 2 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOD1Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR5Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[ArgumentPropagationMutator]MSP[]
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[rv.CRCR5Mutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.OBBN3Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[InlineConstantMutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.UOI3Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOD2Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[InlineConstantMutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.ROR2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { MST[rv.ROR5Mutator]MSP[] System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI1Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; MST[rv.CRCR3Mutator]MSP[] } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ABSMutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { MST[NullReturnValsMutator]MSP[] return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI4Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.ABSMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.CRCR6Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.UOI2Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; MST[rv.CRCR6Mutator]MSP[] final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI2Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[NegateConditionalsMutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR5Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR4Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[NullReturnValsMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.UOI2Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.ABSMutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.ROR3Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR3Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.AOR2Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR2Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[NegateConditionalsMutator]MSP[] + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR5Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[MathMutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.AOD2Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[MathMutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[InlineConstantMutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[rv.CRCR2Mutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR3Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[BooleanFalseReturnValsMutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.ROR5Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) { MST[NullReturnValsMutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[MathMutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR6Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR3Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.AOR1Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR1Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[BooleanFalseReturnValsMutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
vl_2 += vl_14 . length ; MST[ConditionalsBoundaryMutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[InlineConstantMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { MST[VoidMethodCallMutator]MSP[] case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI4Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[NegateConditionalsMutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR3Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR4Mutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI4Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ABSMutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR4Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI3Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.AOR3Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; MST[rv.CRCR6Mutator]MSP[] } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[InlineConstantMutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR1Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.OBBN1Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[NegateConditionalsMutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; MST[ConditionalsBoundaryMutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.UOI2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
final byte [] vr_17 = new byte [ vl_2 ] ; fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.UOI2Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOD2Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[ArgumentPropagationMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
public boolean fn_1 () { MST[rv.UOI2Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { MST[rv.ABSMutator]MSP[] vr_2 = null ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI2Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.ROR2Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[InlineConstantMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.ABSMutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.OBBN2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[rv.ROR5Mutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { MST[InlineConstantMutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.AOR4Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } static byte [] fn_29 ( final tp_3 vr_42 ) { int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { MST[rv.CRCR3Mutator]MSP[] vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[InlineConstantMutator]MSP[] case 2 :
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[InlineConstantMutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[ConditionalsBoundaryMutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR1Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.ROR5Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI1Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR4Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[NegateConditionalsMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI4Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.AOR2Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.UOI2Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { MST[rv.CRCR5Mutator]MSP[] final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR1Mutator]MSP[] }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.ROR5Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[ReturnValsMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR3Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR3Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ; MST[rv.CRCR6Mutator]MSP[]
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ; MST[rv.CRCR1Mutator]MSP[]
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI2Mutator]MSP[] + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; MST[NegateConditionalsMutator]MSP[] if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR3Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
public boolean fn_1 () { MST[rv.UOI2Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { MST[rv.CRCR1Mutator]MSP[] fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
public boolean fn_1 () { MST[rv.UOI2Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI4Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.AOD1Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.CRCR6Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.ROR5Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[InlineConstantMutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.CRCR2Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR1Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOD2Mutator]MSP[] case 2 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI2Mutator]MSP[] }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.CRCR2Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.UOI4Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOD1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR1Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { MST[rv.CRCR4Mutator]MSP[] if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { MST[NonVoidMethodCallMutator]MSP[] String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.UOI2Mutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; MST[rv.CRCR5Mutator]MSP[] } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR5Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR6Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR3Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) { MST[rv.CRCR3Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.CRCR4Mutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; MST[rv.CRCR3Mutator]MSP[] } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.UOI4Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[rv.CRCR2Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.CRCR1Mutator]MSP[]
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[rv.ROR5Mutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[experimental.MemberVariableMutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI4Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.AOR2Mutator]MSP[]
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ROR2Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vl_2 += vl_14 . length ; } } else { MST[rv.AOR3Mutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI1Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.CRCR6Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI4Mutator]MSP[] }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.ABSMutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { MST[ReturnValsMutator]MSP[] return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.AOD2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.UOI4Mutator]MSP[] case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.CRCR1Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI1Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[MathMutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; MST[NullReturnValsMutator]MSP[] fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[MathMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI2Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.ABSMutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.CRCR1Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI4Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR5Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; MST[rv.UOI2Mutator]MSP[] } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[rv.CRCR6Mutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR1Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { MST[rv.CRCR1Mutator]MSP[] return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.UOI4Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { MST[PrimitiveReturnsMutator]MSP[] return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR1Mutator]MSP[] case 2 :
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.UOI3Mutator]MSP[]
vl_2 += vl_14 . length ; MST[rv.ROR1Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[rv.UOI2Mutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOD1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR6Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.UOI4Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[NonVoidMethodCallMutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[InlineConstantMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[InlineConstantMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.ROR3Mutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.UOI2Mutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.UOI1Mutator]MSP[]
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.UOI3Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { MST[rv.UOI4Mutator]MSP[] fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; MST[NegateConditionalsMutator]MSP[] } break; case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.ROR2Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[MathMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.ABSMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[InlineConstantMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[rv.CRCR5Mutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI4Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.ROR1Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; MST[rv.UOI1Mutator]MSP[] if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.CRCR1Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[ConstructorCallMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[rv.ROR5Mutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ROR3Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.CRCR5Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOD1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR4Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR3Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOD2Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { MST[rv.ABSMutator]MSP[] vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.OBBN3Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[MathMutator]MSP[] case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ABSMutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.UOI2Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ROR1Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[rv.UOI3Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.UOI3Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.AOR4Mutator]MSP[]
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { MST[rv.ROR2Mutator]MSP[] final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.OBBN3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR2Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; MST[rv.UOI2Mutator]MSP[] } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { MST[rv.CRCR6Mutator]MSP[] return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.ABSMutator]MSP[] + lr_3 + vr_30 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR4Mutator]MSP[] case 2 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { MST[rv.ABSMutator]MSP[] vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.ABSMutator]MSP[]
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.UOI2Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.ABSMutator]MSP[] }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.UOI1Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.CRCR4Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.CRCR1Mutator]MSP[]
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR1Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[MathMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.CRCR5Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.CRCR4Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.ROR3Mutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.CRCR6Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[rv.AOR3Mutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR3Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.OBBN1Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[rv.CRCR1Mutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.ROR2Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.AOR3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[ReturnValsMutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.CRCR3Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[IncrementsMutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[rv.ABSMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.UOI3Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR4Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.UOI1Mutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; MST[rv.UOI1Mutator]MSP[] } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR3Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { MST[rv.UOI4Mutator]MSP[] return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; MST[InlineConstantMutator]MSP[] vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.AOR3Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; vl_15 = 0 ; MST[rv.CRCR1Mutator]MSP[] } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.CRCR4Mutator]MSP[]
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.CRCR3Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.UOI1Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI1Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOD1Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.UOI3Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR1Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.ABSMutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { MST[NonVoidMethodCallMutator]MSP[] return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
public byte [] fn_8 ( final byte [] vr_23 ) { MST[rv.UOI1Mutator]MSP[] fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; fn_8 ( vr_23 , 0 , - 1 ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[InlineConstantMutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { MST[rv.CRCR6Mutator]MSP[] return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.ROR4Mutator]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI4Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; MST[NegateConditionalsMutator]MSP[] vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[MathMutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR2Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.AOR4Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.AOD1Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ROR5Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.ROR5Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; MST[rv.ROR3Mutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.CRCR5Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; MST[rv.ABSMutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR6Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR6Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.AOR4Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[NonVoidMethodCallMutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR3Mutator]MSP[] case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[MathMutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
case '\r' : MST[experimental.RemoveSwitchMutator_3]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
case '\r' : MST[experimental.RemoveSwitchMutator_2]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 : MST[rv.UOI3Mutator]MSP[]
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.UOI4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.ROR4Mutator]MSP[] + lr_3 + vr_30 ) ; }
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.UOI3Mutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.UOI3Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
case '\r' : MST[experimental.RemoveSwitchMutator_1]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.UOI2Mutator]MSP[] + lr_3 + vr_30 ) ; }
case '\r' : MST[experimental.RemoveSwitchMutator_0]MSP[] case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { MST[rv.CRCR6Mutator]MSP[] vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; MST[rv.AOR2Mutator]MSP[] int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vl_2 += vl_14 . length ; MST[rv.ROR4Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI1Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.AOR2Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; MST[NegateConditionalsMutator]MSP[] } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : MST[rv.UOI2Mutator]MSP[] vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[experimental.MemberVariableMutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vl_2 += vl_14 . length ; MST[rv.ROR3Mutator]MSP[] } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vl_2 += vl_14 . length ; MST[rv.ABSMutator]MSP[] vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; MST[rv.ABSMutator]MSP[] } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[ConditionalsBoundaryMutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ABSMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; MST[rv.CRCR5Mutator]MSP[] } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.ROR3Mutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR4Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.ABSMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR5Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.AOR3Mutator]MSP[] case 2 :
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.ROR4Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOD2Mutator]MSP[]
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[RemoveConditionalMutator_ORDER_IF]MSP[] + lr_3 + vr_30 ) ; }
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { MST[ReturnValsMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.AOD2Mutator]MSP[] }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; MST[rv.ROR1Mutator]MSP[] vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { MST[rv.CRCR3Mutator]MSP[] switch ( vr_34 ) { case ' ' : case '\n' :
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.UOI4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR6Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
if ( vr_3 == vl_12 ) { vl_6 = true ; MST[rv.ROR4Mutator]MSP[] break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.CRCR3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.AOR1Mutator]MSP[]
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { MST[experimental.MemberVariableMutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOR2Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[ConditionalsBoundaryMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[NonVoidMethodCallMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[NonVoidMethodCallMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR3Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[ConditionalsBoundaryMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
final byte [] vr_17 = new byte [ vl_2 ] ; MST[rv.CRCR6Mutator]MSP[] fn_5 ( vr_17 , 0 , vr_17 . length ) ; return vr_17 ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 ) { return fn_13 ( vr_21 , vr_27 , false ) ; } public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 ) { return fn_13 ( vr_21 , vr_27 , vr_28 , Integer . vr_29 ) ; }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 MST[rv.ROR1Mutator]MSP[] + lr_3 + vr_30 ) ; }
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.AOR2Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI3Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { MST[rv.ROR5Mutator]MSP[] return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.CRCR4Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( vl_9 & vl_17 ) ; MST[rv.CRCR3Mutator]MSP[] } } } } if ( vl_6 && vl_8 != 0 ) { vl_9 = vl_9 << 6 ; switch ( vl_8 ) { case 2 : vl_9 = vl_9 << 6 ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; break; case 3 :
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; MST[rv.UOI2Mutator]MSP[] } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; MST[MathMutator]MSP[] } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; MST[rv.ROR3Mutator]MSP[] byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR4Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.ABSMutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.ROR5Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { MST[rv.UOI1Mutator]MSP[] return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.CRCR3Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
public boolean fn_1 () { MST[rv.CRCR2Mutator]MSP[] return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
public byte [] fn_8 ( final byte [] vr_23 ) { fn_22 () ; if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = ( vr_23 . length * 3 ) / 4 ; final byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_8 ( vr_23 , 0 , vr_23 . length ) ; MST[rv.AOR4Mutator]MSP[] fn_8 ( vr_23 , 0 , - 1 ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.CRCR5Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR4Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; MST[rv.UOI4Mutator]MSP[] if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[ReturnValsMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[rv.ABSMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[VoidMethodCallMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; MST[rv.ABSMutator]MSP[] } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; MST[rv.UOI2Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { MST[MathMutator]MSP[] if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[rv.CRCR6Mutator]MSP[] case 2 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { MST[rv.AOR1Mutator]MSP[] vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ;
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; MST[ReturnValsMutator]MSP[] } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; MST[rv.UOI3Mutator]MSP[] vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
if ( ( ( vr_42 . vr_44 () % 8 ) != 0 ) && ( ( ( vr_42 . vr_44 () / 8 ) + 1 ) == ( vr_43 / 8 ) ) ) { return vr_45 ; } int vr_47 = 0 ; int vr_7 = vr_45 . length ; if ( ( vr_42 . vr_44 () % 8 ) == 0 ) { vr_47 = 1 ; vr_7 -- ; } final int vr_48 = vr_43 / 8 - vr_7 ; MST[rv.CRCR3Mutator]MSP[] final byte [] vr_49 = new byte [ vr_43 / 8 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.ABSMutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; vl_6 = false ; } int fn_30 () { MST[rv.CRCR6Mutator]MSP[] return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
public boolean fn_1 () { return this . vr_1 == vl_1 ; } boolean fn_2 () { MST[rv.CRCR3Mutator]MSP[] return this . vr_2 != null ; } int fn_3 () { return vr_2 != null ? vl_2 - vl_3 : 0 ; } private void fn_4 () { if ( vr_2 == null ) { vr_2 = new byte [ vl_4 ] ; vl_2 = 0 ; vl_3 = 0 ; } else { final byte [] vr_3 = new byte [ vr_2 . length * vl_5 ] ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[InlineConstantMutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; MST[rv.AOR3Mutator]MSP[] vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ; MST[rv.CRCR4Mutator]MSP[]
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.UOI2Mutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; MST[rv.CRCR2Mutator]MSP[] } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( fn_1 () && vl_2 < vr_26 . length ) { final byte [] vr_37 = new byte [ vl_2 ] ; System . vr_4 ( vr_26 , 0 , vr_37 , 0 , vl_2 ) ; vr_26 = vr_37 ; } return vr_26 ; } private static long fn_23 ( final byte [] vr_23 , int vr_38 , final byte [] vr_39 ) { vr_38 = ( vr_38 / 4 ) * 4 ; long vr_7 = ( vr_23 . length * 4 ) / 3 ; final long vr_40 = vr_7 % 4 ; MST[rv.CRCR2Mutator]MSP[]
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[rv.AOR1Mutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
final tp_2 vr_31 = vr_27 ? new tp_2 ( vr_28 ) : new tp_2 ( 0 , vl_19 , vr_28 ) ; return vr_31 . fn_7 ( vr_21 ) ; } public static byte [] fn_24 ( final String vr_32 ) { MST[ConstructorCallMutator]MSP[] return new tp_2 () . fn_8 ( vr_32 ) ; } public static byte [] fn_24 ( final byte [] vr_33 ) { return new tp_2 () . fn_8 ( vr_33 ) ; } private static boolean fn_11 ( final byte vr_34 ) { switch ( vr_34 ) { case ' ' : case '\n' :
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; MST[InlineConstantMutator]MSP[] } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { vl_8 = ( ++ vl_8 ) % 4 ; MST[rv.ABSMutator]MSP[] vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
if ( vr_3 == vl_12 ) { vl_6 = true ; break; } if ( vr_3 >= 0 && vr_3 < vr_16 . length ) { final int vr_17 = vr_16 [ vr_3 ] ; if ( vr_17 >= 0 ) { MST[rv.ROR4Mutator]MSP[] vl_8 = ( ++ vl_8 ) % 4 ; vl_9 = ( vl_9 << 6 ) + vr_17 ; if ( vl_8 == 0 ) { vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: MST[MathMutator]MSP[] break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[rv.UOI1Mutator]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
if ( vr_23 == null || vr_23 . length == 0 ) { return vr_23 ; } final long vr_7 = fn_23 ( vr_23 , vl_13 , vl_14 ) ; byte [] vr_26 = new byte [ ( int ) vr_7 ] ; fn_6 ( vr_26 , 0 , vr_26 . length ) ; fn_7 ( vr_23 , 0 , vr_23 . length ) ; fn_7 ( vr_23 , 0 , - 1 ) ; if ( vr_2 != vr_26 ) { fn_5 ( vr_26 , 0 , vr_26 . length ) ; MST[rv.CRCR6Mutator]MSP[] }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; MST[rv.ABSMutator]MSP[] } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
System . vr_4 ( vr_45 , vr_47 , vr_49 , vr_48 , vr_7 ) ; return vr_49 ; } private void fn_22 () { vr_2 = null ; vl_2 = 0 ; vl_3 = 0 ; vl_15 = 0 ; vl_8 = 0 ; MST[rv.CRCR1Mutator]MSP[] vl_6 = false ; } int fn_30 () { return vl_13 ; } byte [] fn_31 () { return vl_14 . vr_50 () ; }
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; MST[rv.ABSMutator]MSP[] vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { MST[rv.CRCR2Mutator]MSP[] throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { MST[rv.ABSMutator]MSP[] if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; if ( vl_3 >= vl_2 ) { vr_2 = null ; }
vl_2 += vl_14 . length ; } } else { MST[experimental.MemberVariableMutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 18 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 12 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 6 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ vl_9 & vl_10 ] ; vl_15 += 4 ; if ( vl_13 > 0 && vl_13 <= vl_15 ) { MST[rv.CRCR1Mutator]MSP[] System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; }
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.AOR2Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
return fn_15 ( fn_13 ( vr_21 , false , true ) ) ; } public static byte [] fn_19 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , true ) ; } public byte [] fn_8 ( final String vr_23 ) { return fn_8 ( fn_20 ( vr_23 ) ) ; } private byte [] fn_20 ( final String vr_23 ) { MST[ArgumentPropagationMutator]MSP[] try { return vr_23 . vr_24 ( lr_1 ) ; } catch ( final tp_1 vr_25 ) { throw new fn_21 ( vr_25 ) ; } }
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI4Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; MST[rv.AOD1Mutator]MSP[] if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.CRCR3Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.UOI1Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
return fn_15 ( fn_13 ( vr_21 , true ) ) ; } public static String fn_16 ( final byte [] vr_21 ) { return fn_15 ( fn_13 ( vr_21 , false ) ) ; } public static String fn_14 ( final byte [] vr_21 , final boolean vr_22 ) { MST[InlineConstantMutator]MSP[] return fn_15 ( fn_13 ( vr_21 , vr_22 ) ) ; } public static byte [] fn_17 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false , true ) ; } public static String fn_18 ( final byte [] vr_21 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[rv.UOI4Mutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_40 != 0 ) { vr_7 += 4 - vr_40 ; } if ( vr_38 > 0 ) { final boolean vr_41 = vr_7 % vr_38 == 0 ; vr_7 += ( vr_7 / vr_38 ) * vr_39 . length ; if ( ! vr_41 ) { vr_7 += vr_39 . length ; MST[rv.CRCR6Mutator]MSP[] } } return vr_7 ; } public static tp_3 fn_26 ( final byte [] vr_23 ) { return new tp_3 ( 1 , fn_24 ( vr_23 ) ) ; } public static byte [] fn_27 ( final tp_3 vr_42 ) {
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[InlineConstantMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
vl_2 += vl_14 . length ; vl_15 = 0 ; } } } } } void fn_8 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ; } for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_16 ) { fn_4 () ; MST[rv.CRCR6Mutator]MSP[] } final byte vr_3 = vr_12 [ vr_13 ++ ] ;
System . vr_4 ( vr_2 , 0 , vr_3 , 0 , vr_2 . length ) ; vr_2 = vr_3 ; } } int fn_5 ( final byte [] vr_3 , final int vr_5 , final int vr_6 ) { if ( vr_2 != null ) { final int vr_7 = vr_8 . vr_9 ( fn_3 () , vr_6 ) ; if ( vr_2 != vr_3 ) { System . vr_4 ( vr_2 , vl_3 , vr_3 , vr_5 , vr_7 ) ; vl_3 += vr_7 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vl_3 >= vl_2 ) { vr_2 = null ; }
case '\r' : case '\t' : return true ; default : return false ; } } public String fn_25 ( final byte [] vr_23 ) { return fn_15 ( fn_7 ( vr_23 ) ) ; } private static String fn_15 ( final byte [] fn_7 ) { MST[NonVoidMethodCallMutator]MSP[] String vr_35 = null ; try { vr_35 = new String ( fn_7 , lr_1 ) ; } catch ( final tp_1 vr_36 ) { throw new fn_21 ( vr_36 ) ; } return vr_35 ; } public byte [] fn_7 ( final byte [] vr_23 ) { fn_22 () ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[InlineConstantMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.UOI1Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { MST[InlineConstantMutator]MSP[] return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[InlineConstantMutator]MSP[] for ( final byte vr_20 : vr_19 ) {
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[NonVoidMethodCallMutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 10 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 4 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 2 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; } break; MST[InlineConstantMutator]MSP[] default: break; } if ( vl_13 > 0 && vl_2 > 0 ) { System . vr_4 ( vl_14 , 0 , vr_2 , vl_2 , vl_14 . length ) ;
public static byte [] fn_13 ( final byte [] vr_21 , final boolean vr_27 , final boolean vr_28 , final int vr_30 ) { if ( vr_21 == null || vr_21 . length == 0 ) { return vr_21 ; } final long vr_7 = fn_23 ( vr_21 , vr_27 ? vl_18 : 0 , vr_27 ? vl_19 : vl_20 ) ; if ( vr_7 > vr_30 ) { throw new IllegalArgumentException ( lr_2 + vr_7 + lr_3 + vr_30 ) ; MST[rv.UOI1Mutator]MSP[] }
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { MST[rv.ABSMutator]MSP[] fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( vr_42 == null ) { throw new fn_28 ( lr_4 ) ; } return fn_13 ( fn_29 ( vr_42 ) , false ) ; } static byte [] fn_29 ( final tp_3 vr_42 ) { MST[rv.AOR1Mutator]MSP[] int vr_43 = vr_42 . vr_44 () ; vr_43 = ( ( vr_43 + 7 ) >> 3 ) << 3 ; final byte [] vr_45 = vr_42 . vr_46 () ;
vl_2 += vl_14 . length ; } } else { MST[MathMutator]MSP[] for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { MST[rv.CRCR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) {
vl_2 += vl_14 . length ; } } else { for ( int vr_15 = 0 ; vr_15 < vr_14 ; vr_15 ++ ) { if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } vl_8 = ( ++ vl_8 ) % 3 ; int vr_3 = vr_12 [ vr_13 ++ ] ; if ( vr_3 < 0 ) { MST[rv.AOD2Mutator]MSP[] vr_3 += 256 ; } vl_9 = ( vl_9 << 8 ) + vr_3 ; if ( 0 == vl_8 ) {
vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 16 ) & vl_17 ) ; MST[rv.CRCR5Mutator]MSP[] vr_2 [ vl_2 ++ ] = (byte) ( ( vl_9 >> 8 ) & vl_17 ) ; break; default: break; } } } public static boolean fn_9 ( final byte vr_18 ) { return vr_18 == vl_12 || ( vr_18 >= 0 && vr_18 < vr_16 . length && vr_16 [ vr_18 ] != - 1 ) ; } public static boolean fn_10 ( final byte [] vr_19 ) { for ( final byte vr_20 : vr_19 ) {
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { MST[NegateConditionalsMutator]MSP[] if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
} else { vr_2 = null ; } return vr_7 ; } return vl_6 ? - 1 : 0 ; } void fn_6 ( final byte [] out , final int vr_10 , final int vr_11 ) { MST[experimental.MemberVariableMutator]MSP[] if ( out != null && out . length == vr_11 ) { vr_2 = out ; vl_2 = vr_10 ; vl_3 = vr_10 ; } } void fn_7 ( final byte [] vr_12 , int vr_13 , final int vr_14 ) { if ( vl_6 ) { return; } if ( vr_14 < 0 ) { vl_6 = true ;
if ( vr_2 == null || vr_2 . length - vl_2 < vl_7 ) { fn_4 () ; } switch ( vl_8 ) { case 1 : vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 >> 2 ) & vl_10 ] ; vr_2 [ vl_2 ++ ] = vr_1 [ ( vl_9 << 4 ) & vl_10 ] ; if ( vr_1 == vl_11 ) { MST[rv.UOI1Mutator]MSP[] vr_2 [ vl_2 ++ ] = vl_12 ; vr_2 [ vl_2 ++ ] = vl_12 ; } break; case 2 :
if ( ! fn_9 ( vr_20 ) && ! fn_11 ( vr_20 ) ) { return false ; } } return true ; } private static boolean fn_12 ( final byte [] vr_19 ) { MST[rv.CRCR3Mutator]MSP[] for ( final byte vr_20 : vr_19 ) { if ( fn_9 ( vr_20 ) ) { return true ; } } return false ; } public static byte [] fn_13 ( final byte [] vr_21 ) { return fn_13 ( vr_21 , false ) ; } public static String fn_14 ( final byte [] vr_21 ) {
