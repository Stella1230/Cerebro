@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[PrimitiveReturnsMutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI4Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.AOR1Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.ABSMutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.AOR2Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.AOR3Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.AOR4Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; MST[NonVoidMethodCallMutator]MSP[] if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI1Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[NegateConditionalsMutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI2Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI3Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.ABSMutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.AOD1Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.CRCR6Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[MathMutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI2Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.UOI4Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI1Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[InlineConstantMutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.UOI3Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[rv.CRCR1Mutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[MathMutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.AOR4Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.ROR5Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI4Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI3Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[rv.CRCR4Mutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[rv.CRCR5Mutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.AOR3Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI2Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.ROR2Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI1Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.ROR1Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[ReturnValsMutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[rv.CRCR5Mutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.CRCR3Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[rv.CRCR1Mutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.CRCR5Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.CRCR1Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.ROR2Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.ROR3Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.ROR1Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.ROR5Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.ROR4Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[ReturnValsMutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.ABSMutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[ReturnValsMutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.CRCR4Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.ABSMutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[rv.CRCR4Mutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[rv.CRCR6Mutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[InlineConstantMutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[rv.CRCR2Mutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.CRCR2Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.CRCR6Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.UOI1Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI3Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[NegateConditionalsMutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.UOI4Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[InlineConstantMutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[rv.CRCR2Mutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[ConditionalsBoundaryMutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.UOI2Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.AOD2Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; MST[rv.CRCR6Mutator]MSP[] } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[PrimitiveReturnsMutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI2Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.AOD1Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.AOR2Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.ABSMutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI4Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI3Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.AOR1Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.ROR3Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[rv.UOI1Mutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; MST[PrimitiveReturnsMutator]MSP[] } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.ROR4Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.CRCR3Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.CRCR1Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { MST[rv.AOD2Mutator]MSP[] return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[rv.CRCR5Mutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { MST[ConditionalsBoundaryMutator]MSP[] final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; MST[InlineConstantMutator]MSP[] } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.UOI3Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; MST[BooleanFalseReturnValsMutator]MSP[] } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[ConditionalsBoundaryMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[InlineConstantMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR5Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.UOI1Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; MST[rv.CRCR6Mutator]MSP[] } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; MST[PrimitiveReturnsMutator]MSP[] } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR1Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[rv.ABSMutator]MSP[] } @Override public void clear () {
fn_4 ( vr_1 , vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ; MST[ReturnValsMutator]MSP[]
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void clear () {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.UOI4Mutator]MSP[] remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[rv.UOI3Mutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ; MST[NonVoidMethodCallMutator]MSP[]
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[ArgumentPropagationMutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ; MST[EmptyObjectReturnValsMutator]MSP[]
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI2Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.ROR5Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
return super . fn_14 () ; MST[EmptyObjectReturnValsMutator]MSP[] }
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR6Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR2Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.ROR1Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[NonVoidMethodCallMutator]MSP[] remove ( vr_1 ) ; } } @Override
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[rv.UOI4Mutator]MSP[] } @Override public void clear () {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[BooleanTrueReturnValsMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { MST[rv.ROR5Mutator]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[] return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; } @Override public void clear () {
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[PrimitiveReturnsMutator]MSP[] } @Override public void clear () {
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { MST[rv.ROR2Mutator]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[NegateConditionalsMutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ABSMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[NonVoidMethodCallMutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR5Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.ROR1Mutator]MSP[] remove ( vr_1 ) ; } } @Override
} private long vr_3 () { return System . vr_4 () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
public int size () { fn_6 ( vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] return super . size () ; } @SuppressWarnings ( lr_2 ) private void fn_12 ( final tp_4 vr_26 ) throws IOException , vl_2 { vr_26 . vr_27 () ; vl_3 = ( vr_18 < tp_1 , tp_2 > ) vr_26 . fn_12 () ; } private void fn_13 ( final tp_5 out ) throws IOException { out . vr_28 () ; out . fn_13 ( vl_3 ) ; } @Override public Collection < tp_2 > fn_14 () { fn_6 ( vr_3 () ) ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.UOI1Mutator]MSP[] remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI4Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] return super . fn_9 () ;
super . clear () ; MST[VoidMethodCallMutator]MSP[] vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
public int size () { fn_6 ( vr_3 () ) ; return super . size () ; MST[ReturnValsMutator]MSP[] } @SuppressWarnings ( lr_2 ) private void fn_12 ( final tp_4 vr_26 ) throws IOException , vl_2 { vr_26 . vr_27 () ; vl_3 = ( vr_18 < tp_1 , tp_2 > ) vr_26 . fn_12 () ; } private void fn_13 ( final tp_5 out ) throws IOException { out . vr_28 () ; out . fn_13 ( vl_3 ) ; } @Override public Collection < tp_2 > fn_14 () { fn_6 ( vr_3 () ) ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR2Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[NegateConditionalsMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR6Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.ROR2Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI1Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR1Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; MST[InlineConstantMutator]MSP[] } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.ABSMutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR5Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR4Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[rv.UOI2Mutator]MSP[] } @Override public void clear () {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; MST[NonVoidMethodCallMutator]MSP[] return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
return super . fn_14 () ; MST[NonVoidMethodCallMutator]MSP[] }
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[] } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.ROR4Mutator]MSP[] remove ( vr_1 ) ; } } @Override
public int size () { fn_6 ( vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] return super . size () ; } @SuppressWarnings ( lr_2 ) private void fn_12 ( final tp_4 vr_26 ) throws IOException , vl_2 { vr_26 . vr_27 () ; vl_3 = ( vr_18 < tp_1 , tp_2 > ) vr_26 . fn_12 () ; } private void fn_13 ( final tp_5 out ) throws IOException { out . vr_28 () ; out . fn_13 ( vl_3 ) ; } @Override public Collection < tp_2 > fn_14 () { fn_6 ( vr_3 () ) ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[NegateConditionalsMutator]MSP[] remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.ABSMutator]MSP[] remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.UOI4Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; MST[ReturnValsMutator]MSP[] } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; MST[ReturnValsMutator]MSP[] } @Override public tp_2 get ( final Object vr_1 ) {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.UOI2Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; MST[VoidMethodCallMutator]MSP[] } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
super . clear () ; vr_12 . clear () ; MST[VoidMethodCallMutator]MSP[] } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[ConditionalsBoundaryMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; MST[rv.CRCR3Mutator]MSP[] } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; MST[rv.CRCR5Mutator]MSP[] } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; MST[ReturnValsMutator]MSP[] } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; MST[rv.CRCR1Mutator]MSP[] } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR1Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; MST[NullReturnValsMutator]MSP[] } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; MST[NullReturnValsMutator]MSP[] } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
public int size () { fn_6 ( vr_3 () ) ; return super . size () ; MST[NonVoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_2 ) private void fn_12 ( final tp_4 vr_26 ) throws IOException , vl_2 { vr_26 . vr_27 () ; vl_3 = ( vr_18 < tp_1 , tp_2 > ) vr_26 . fn_12 () ; } private void fn_13 ( final tp_5 out ) throws IOException { out . vr_28 () ; out . fn_13 ( vl_3 ) ; } @Override public Collection < tp_2 > fn_14 () { fn_6 ( vr_3 () ) ;
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; MST[NonVoidMethodCallMutator]MSP[] vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR5Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[NonVoidMethodCallMutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[NonVoidMethodCallMutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[InlineConstantMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public void clear () {
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[rv.ABSMutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[rv.UOI2Mutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; MST[ArgumentPropagationMutator]MSP[] vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.UOI3Mutator]MSP[] remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { MST[NegateConditionalsMutator]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; MST[ArgumentPropagationMutator]MSP[] return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.ROR4Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI2Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR4Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR3Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
return super . fn_14 () ; MST[ReturnValsMutator]MSP[] }
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { MST[rv.ROR5Mutator]MSP[] final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; MST[NonVoidMethodCallMutator]MSP[] vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR2Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; MST[ArgumentPropagationMutator]MSP[] if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; MST[ReturnValsMutator]MSP[] } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[NonVoidMethodCallMutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[InlineConstantMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; MST[NullReturnValsMutator]MSP[] } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[] vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.ROR2Mutator]MSP[] remove ( vr_1 ) ; } } @Override
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; MST[ArgumentPropagationMutator]MSP[] } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
while ( vr_23 . hasNext () ) { MST[rv.ROR4Mutator]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { MST[rv.ROR3Mutator]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { MST[NegateConditionalsMutator]MSP[] final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI4Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI2Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI1Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { MST[rv.ROR1Mutator]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ; MST[NonVoidMethodCallMutator]MSP[]
public int size () { fn_6 ( vr_3 () ) ; return super . size () ; } @SuppressWarnings ( lr_2 ) private void fn_12 ( final tp_4 vr_26 ) throws IOException , vl_2 { vr_26 . vr_27 () ; vl_3 = ( vr_18 < tp_1 , tp_2 > ) vr_26 . fn_12 () ; } private void fn_13 ( final tp_5 out ) throws IOException { out . vr_28 () ; out . fn_13 ( vl_3 ) ; } @Override public Collection < tp_2 > fn_14 () { fn_6 ( vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[]
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ; MST[NonVoidMethodCallMutator]MSP[]
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ABSMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; MST[VoidMethodCallMutator]MSP[] final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR6Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; MST[NonVoidMethodCallMutator]MSP[] } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[rv.UOI1Mutator]MSP[] } @Override public void clear () {
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR1Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[rv.UOI3Mutator]MSP[] } @Override public void clear () {
while ( vr_23 . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.ROR3Mutator]MSP[] remove ( vr_1 ) ; } } @Override
public int size () { fn_6 ( vr_3 () ) ; return super . size () ; MST[PrimitiveReturnsMutator]MSP[] } @SuppressWarnings ( lr_2 ) private void fn_12 ( final tp_4 vr_26 ) throws IOException , vl_2 { vr_26 . vr_27 () ; vl_3 = ( vr_18 < tp_1 , tp_2 > ) vr_26 . fn_12 () ; } private void fn_13 ( final tp_5 out ) throws IOException { out . vr_28 () ; out . fn_13 ( vl_3 ) ; } @Override public Collection < tp_2 > fn_14 () { fn_6 ( vr_3 () ) ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] remove ( vr_1 ) ; } } @Override
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.ROR5Mutator]MSP[] remove ( vr_1 ) ; } } @Override
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[rv.UOI1Mutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; MST[ReturnValsMutator]MSP[] } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; MST[rv.UOI4Mutator]MSP[] return super . fn_10 ( vr_1 , vr_2 ) ; } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { MST[rv.UOI2Mutator]MSP[] remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[ReturnValsMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
public int size () { fn_6 ( vr_3 () ) ; return super . size () ; } @SuppressWarnings ( lr_2 ) private void fn_12 ( final tp_4 vr_26 ) throws IOException , vl_2 { vr_26 . vr_27 () ; vl_3 = ( vr_18 < tp_1 , tp_2 > ) vr_26 . fn_12 () ; } private void fn_13 ( final tp_5 out ) throws IOException { out . vr_28 () ; out . fn_13 ( vl_3 ) ; } @Override public Collection < tp_2 > fn_14 () { fn_6 ( vr_3 () ) ; MST[VoidMethodCallMutator]MSP[]
@Override public long fn_1 ( final tp_1 vr_1 , final tp_2 vr_2 ) { if ( vl_1 >= 0L ) { final long vr_3 = System . vr_4 () ; if ( vr_3 > Long . vr_5 - vl_1 ) { return - 1 ; } return vr_3 + vl_1 ; } return - 1L ; } private static long fn_2 ( final long vr_6 , final tp_3 vr_7 ) { vr_8 . vr_9 ( vr_7 , lr_1 ) ; return tp_3 . vr_10 . vr_11 ( vr_6 , vr_7 ) ; MST[ReturnValsMutator]MSP[] } @Override public void clear () {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI4Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.UOI1Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.CRCR5Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; MST[ArgumentPropagationMutator]MSP[] } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
while ( vr_23 . hasNext () ) { final vr_18 . vr_14 < Object , Long > vr_24 = vr_23 . vr_25 () ; if ( fn_8 ( vr_3 , vr_24 . vr_22 () ) ) { MST[rv.ROR3Mutator]MSP[] super . remove ( vr_24 . vr_21 () ) ; vr_23 . remove () ; } } } private void fn_4 ( final Object vr_1 , final long vr_3 ) { final Long vr_15 = vr_12 . get ( vr_1 ) ; if ( fn_8 ( vr_3 , vr_15 ) ) { remove ( vr_1 ) ; } } @Override
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[NegateConditionalsMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; MST[NonVoidMethodCallMutator]MSP[] return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
for ( final vr_18 . vr_14 < ? extends tp_1 , ? extends tp_2 > vr_20 : vr_19 . fn_7 () ) { MST[NonVoidMethodCallMutator]MSP[] fn_10 ( vr_20 . vr_21 () , vr_20 . vr_22 () ) ; } } @Override public tp_2 remove ( final Object vr_1 ) { vr_12 . remove ( vr_1 ) ; return super . remove ( vr_1 ) ; } private void fn_6 ( final long vr_3 ) { final Iterator < vr_18 . vr_14 < Object , Long > > vr_23 = vr_12 . fn_7 () . iterator () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; MST[ReturnValsMutator]MSP[] } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ABSMutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
super . clear () ; vr_12 . clear () ; } @Override public boolean fn_3 ( final Object vr_1 ) { fn_4 ( vr_1 , vr_3 () ) ; return super . fn_3 ( vr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean fn_5 ( final Object vr_2 ) { fn_6 ( vr_3 () ) ; return super . fn_5 ( vr_2 ) ; } @Override public vr_13 < vr_14 < tp_1 , tp_2 > > fn_7 () { fn_6 ( vr_3 () ) ; return super . fn_7 () ; } @Override public tp_2 get ( final Object vr_1 ) {
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; MST[rv.ROR4Mutator]MSP[] } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
fn_4 ( vr_1 , vr_3 () ) ; return super . get ( vr_1 ) ; } @Override public boolean isEmpty () { fn_6 ( vr_3 () ) ; return super . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[] } private boolean fn_8 ( final long vr_3 , final Long vr_15 ) { if ( vr_15 != null ) { final long fn_1 = vr_15 . vr_16 () ; return fn_1 >= 0 && vr_3 >= fn_1 ; } return false ; } @Override public vr_13 < tp_1 > fn_9 () { fn_6 ( vr_3 () ) ; return super . fn_9 () ;
} private long vr_3 () { return System . vr_4 () ; } @Override public tp_2 fn_10 ( final tp_1 vr_1 , final tp_2 vr_2 ) { fn_4 ( vr_1 , vr_3 () ) ; final long fn_1 = vr_17 . fn_1 ( vr_1 , vr_2 ) ; vr_12 . fn_10 ( vr_1 , Long . valueOf ( fn_1 ) ) ; return super . fn_10 ( vr_1 , vr_2 ) ; MST[ReturnValsMutator]MSP[] } @Override public void fn_11 ( final vr_18 < ? extends tp_1 , ? extends tp_2 > vr_19 ) {
