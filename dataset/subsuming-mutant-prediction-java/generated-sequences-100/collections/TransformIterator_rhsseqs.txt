@Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
public void fn_6 ( final vr_1 < ? super tp_2 , ? extends tp_1 > vl_1 ) { this . vl_1 = vl_1 ; } protected tp_1 fn_2 ( final tp_2 vr_2 ) { return vl_1 . fn_2 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; MST[NullReturnValsMutator]MSP[S] } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
public void fn_6 ( final vr_1 < ? super tp_2 , ? extends tp_1 > vl_1 ) { this . vl_1 = vl_1 ; MST[experimental.MemberVariableMutator]MSP[S] } protected tp_1 fn_2 ( final tp_2 vr_2 ) { return vl_1 . fn_2 ( vr_2 ) ; }
@Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[N] } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; MST[experimental.MemberVariableMutator]MSP[N] } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; MST[ReturnValsMutator]MSP[N] }
public void fn_6 ( final vr_1 < ? super tp_2 , ? extends tp_1 > vl_1 ) { this . vl_1 = vl_1 ; } protected tp_1 fn_2 ( final tp_2 vr_2 ) { return vl_1 . fn_2 ( vr_2 ) ; MST[ArgumentPropagationMutator]MSP[N] }
public void fn_6 ( final vr_1 < ? super tp_2 , ? extends tp_1 > vl_1 ) { this . vl_1 = vl_1 ; } protected tp_1 fn_2 ( final tp_2 vr_2 ) { return vl_1 . fn_2 ( vr_2 ) ; MST[NullReturnValsMutator]MSP[N] }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; MST[NullReturnValsMutator]MSP[S] }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; MST[ReturnValsMutator]MSP[N] } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
public void fn_6 ( final vr_1 < ? super tp_2 , ? extends tp_1 > vl_1 ) { this . vl_1 = vl_1 ; } protected tp_1 fn_2 ( final tp_2 vr_2 ) { return vl_1 . fn_2 ( vr_2 ) ; MST[ReturnValsMutator]MSP[N] }
@Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; MST[VoidMethodCallMutator]MSP[S] } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; MST[ReturnValsMutator]MSP[N] } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; MST[NullReturnValsMutator]MSP[S] } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return fn_2 ( iterator . fn_1 () ) ; MST[ArgumentPropagationMutator]MSP[S] } @Override public void remove () { iterator . remove () ; } public Iterator < ? extends tp_2 > fn_3 () { return iterator ; } public void fn_4 ( final Iterator < ? extends tp_2 > iterator ) { this . iterator = iterator ; } public vr_1 < ? super tp_2 , ? extends tp_1 > fn_5 () { return vl_1 ; }
