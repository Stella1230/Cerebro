@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; MST[ReturnValsMutator]MSP[N] } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; MST[ReturnValsMutator]MSP[S] } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; MST[NullReturnValsMutator]MSP[N] } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; MST[ConstructorCallMutator]MSP[S] } @Override public List < vt_2 > remove ( final Object vr_2 ) {
@Override @SuppressWarnings ( lr_1 ) protected vr_1 < vt_1 , List < vt_2 > > fn_1 () { return ( vr_1 < vt_1 , List < vt_2 > > ) super . fn_1 () ; } @Override public List < vt_2 > get ( final vt_1 vr_2 ) { return fn_2 ( vr_2 ) ; MST[ReturnValsMutator]MSP[S] } @Override List < vt_2 > fn_2 ( final vt_1 vr_2 ) { return new fn_3 ( vr_2 ) ; } @Override public List < vt_2 > remove ( final Object vr_2 ) {
return vr_3 . vr_4 ( fn_1 () . remove ( vr_2 ) ) ; } @Override protected List < vt_2 > fn_4 () { return fn_1 () . get ( vr_2 ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } @Override public void add ( final int vr_5 , final vt_2 vr_6 ) { List < vt_2 > list = fn_4 () ; if ( list == null ) { list = fn_5 () ; fn_1 () . fn_6 ( vr_2 , list ) ; } list . add ( vr_5 , vr_6 ) ; } @Override
return vr_3 . vr_4 ( fn_1 () . remove ( vr_2 ) ) ; } @Override protected List < vt_2 > fn_4 () { return fn_1 () . get ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public void add ( final int vr_5 , final vt_2 vr_6 ) { List < vt_2 > list = fn_4 () ; if ( list == null ) { list = fn_5 () ; fn_1 () . fn_6 ( vr_2 , list ) ; } list . add ( vr_5 , vr_6 ) ; } @Override
return vr_3 . vr_4 ( fn_1 () . remove ( vr_2 ) ) ; } @Override protected List < vt_2 > fn_4 () { return fn_1 () . get ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public void add ( final int vr_5 , final vt_2 vr_6 ) { List < vt_2 > list = fn_4 () ; if ( list == null ) { list = fn_5 () ; fn_1 () . fn_6 ( vr_2 , list ) ; } list . add ( vr_5 , vr_6 ) ; } @Override
return vr_3 . vr_4 ( fn_1 () . remove ( vr_2 ) ) ; } @Override protected List < vt_2 > fn_4 () { return fn_1 () . get ( vr_2 ) ; MST[ArgumentPropagationMutator]MSP[S] } @Override public void add ( final int vr_5 , final vt_2 vr_6 ) { List < vt_2 > list = fn_4 () ; if ( list == null ) { list = fn_5 () ; fn_1 () . fn_6 ( vr_2 , list ) ; } list . add ( vr_5 , vr_6 ) ; } @Override
return vr_3 . vr_4 ( fn_1 () . remove ( vr_2 ) ) ; } @Override protected List < vt_2 > fn_4 () { return fn_1 () . get ( vr_2 ) ; MST[ReturnValsMutator]MSP[N] } @Override public void add ( final int vr_5 , final vt_2 vr_6 ) { List < vt_2 > list = fn_4 () ; if ( list == null ) { list = fn_5 () ; fn_1 () . fn_6 ( vr_2 , list ) ; } list . add ( vr_5 , vr_6 ) ; } @Override
