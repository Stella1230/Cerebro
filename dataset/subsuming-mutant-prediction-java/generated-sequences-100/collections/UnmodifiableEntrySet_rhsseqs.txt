return new fn_9 ( fn_12 () . fn_11 () ) ; MST[ConstructorCallMutator]MSP[N] } @Override public void remove () { throw new fn_2 () ; } @Override public vt_2 fn_13 ( final vt_2 vr_13 ) { throw new fn_2 () ; }
return new fn_9 ( fn_12 () . fn_11 () ) ; } @Override public void remove () { throw new fn_2 () ; MST[ConstructorCallMutator]MSP[S] } @Override public vt_2 fn_13 ( final vt_2 vr_13 ) { throw new fn_2 () ; }
return new fn_9 ( fn_12 () . fn_11 () ) ; MST[ReturnValsMutator]MSP[N] } @Override public void remove () { throw new fn_2 () ; } @Override public vt_2 fn_13 ( final vt_2 vr_13 ) { throw new fn_2 () ; }
return new fn_9 ( fn_12 () . fn_11 () ) ; MST[NullReturnValsMutator]MSP[N] } @Override public void remove () { throw new fn_2 () ; } @Override public vt_2 fn_13 ( final vt_2 vr_13 ) { throw new fn_2 () ; }
return new fn_9 ( fn_12 () . fn_11 () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public void remove () { throw new fn_2 () ; } @Override public vt_2 fn_13 ( final vt_2 vr_13 ) { throw new fn_2 () ; }
return new fn_9 ( fn_12 () . fn_11 () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public void remove () { throw new fn_2 () ; } @Override public vt_2 fn_13 ( final vt_2 vr_13 ) { throw new fn_2 () ; }
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
throw new fn_2 () ; } @Override public void clear () { throw new fn_2 () ; } @Override public boolean remove ( final Object object ) { throw new fn_2 () ; MST[ConstructorCallMutator]MSP[S] } @Override public boolean fn_4 ( final vr_7 < ? super vr_2 . vr_3 < vt_1 , vt_2 > > vr_8 ) { throw new fn_2 () ; } @Override public boolean fn_5 ( final Collection < ? > vr_6 ) { throw new fn_2 () ; } @Override public boolean fn_6 ( final Collection < ? > vr_6 ) { throw new fn_2 () ; }
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[rv.ROR1Mutator]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[rv.ROR5Mutator]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
@Override public Iterator < vr_2 . vr_3 < vt_1 , vt_2 > > iterator () { return new fn_7 ( fn_8 () . iterator () ) ; MST[NullReturnValsMutator]MSP[N] } @Override @SuppressWarnings ( lr_1 ) public Object [] toArray () { final Object [] array = fn_8 () . toArray () ; for ( int vr_9 = 0 ; vr_9 < array . length ; vr_9 ++ ) { array [ vr_9 ] = new fn_9 ( ( vr_2 . vr_3 < vt_1 , vt_2 > ) array [ vr_9 ] ) ; } return array ; } @Override
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[rv.ROR3Mutator]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
@Override public Iterator < vr_2 . vr_3 < vt_1 , vt_2 > > iterator () { return new fn_7 ( fn_8 () . iterator () ) ; MST[ConstructorCallMutator]MSP[N] } @Override @SuppressWarnings ( lr_1 ) public Object [] toArray () { final Object [] array = fn_8 () . toArray () ; for ( int vr_9 = 0 ; vr_9 < array . length ; vr_9 ++ ) { array [ vr_9 ] = new fn_9 ( ( vr_2 . vr_3 < vt_1 , vt_2 > ) array [ vr_9 ] ) ; } return array ; } @Override
throw new fn_2 () ; } @Override public void clear () { throw new fn_2 () ; } @Override public boolean remove ( final Object object ) { throw new fn_2 () ; } @Override public boolean fn_4 ( final vr_7 < ? super vr_2 . vr_3 < vt_1 , vt_2 > > vr_8 ) { throw new fn_2 () ; } @Override public boolean fn_5 ( final Collection < ? > vr_6 ) { throw new fn_2 () ; } @Override public boolean fn_6 ( final Collection < ? > vr_6 ) { throw new fn_2 () ; MST[ConstructorCallMutator]MSP[S] }
@Override public Iterator < vr_2 . vr_3 < vt_1 , vt_2 > > iterator () { return new fn_7 ( fn_8 () . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override @SuppressWarnings ( lr_1 ) public Object [] toArray () { final Object [] array = fn_8 () . toArray () ; for ( int vr_9 = 0 ; vr_9 < array . length ; vr_9 ++ ) { array [ vr_9 ] = new fn_9 ( ( vr_2 . vr_3 < vt_1 , vt_2 > ) array [ vr_9 ] ) ; } return array ; } @Override
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[rv.ROR4Mutator]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[NegateConditionalsMutator]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { return vr_4 ; } return new vr_5 <> ( vr_4 ) ; MST[ConstructorCallMutator]MSP[N] } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { return vr_4 ; } return new vr_5 <> ( vr_4 ) ; MST[ReturnValsMutator]MSP[N] } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
@Override public Iterator < vr_2 . vr_3 < vt_1 , vt_2 > > iterator () { return new fn_7 ( fn_8 () . iterator () ) ; MST[ReturnValsMutator]MSP[N] } @Override @SuppressWarnings ( lr_1 ) public Object [] toArray () { final Object [] array = fn_8 () . toArray () ; for ( int vr_9 = 0 ; vr_9 < array . length ; vr_9 ++ ) { array [ vr_9 ] = new fn_9 ( ( vr_2 . vr_3 < vt_1 , vt_2 > ) array [ vr_9 ] ) ; } return array ; } @Override
@Override public Iterator < vr_2 . vr_3 < vt_1 , vt_2 > > iterator () { return new fn_7 ( fn_8 () . iterator () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override @SuppressWarnings ( lr_1 ) public Object [] toArray () { final Object [] array = fn_8 () . toArray () ; for ( int vr_9 = 0 ; vr_9 < array . length ; vr_9 ++ ) { array [ vr_9 ] = new fn_9 ( ( vr_2 . vr_3 < vt_1 , vt_2 > ) array [ vr_9 ] ) ; } return array ; } @Override
throw new fn_2 () ; } @Override public void clear () { throw new fn_2 () ; } @Override public boolean remove ( final Object object ) { throw new fn_2 () ; } @Override public boolean fn_4 ( final vr_7 < ? super vr_2 . vr_3 < vt_1 , vt_2 > > vr_8 ) { throw new fn_2 () ; } @Override public boolean fn_5 ( final Collection < ? > vr_6 ) { throw new fn_2 () ; MST[ConstructorCallMutator]MSP[S] } @Override public boolean fn_6 ( final Collection < ? > vr_6 ) { throw new fn_2 () ; }
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { return vr_4 ; } return new vr_5 <> ( vr_4 ) ; MST[EmptyObjectReturnValsMutator]MSP[N] } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
public static < vt_1 , vt_2 > vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > fn_1 ( final vr_1 < vr_2 . vr_3 < vt_1 , vt_2 > > vr_4 ) { if ( vr_4 instanceof vl_1 ) { MST[rv.ROR2Mutator]MSP[N] return vr_4 ; } return new vr_5 <> ( vr_4 ) ; } @Override public boolean add ( final vr_2 . vr_3 < vt_1 , vt_2 > object ) { throw new fn_2 () ; } @Override public boolean fn_3 ( final Collection < ? extends vr_2 . vr_3 < vt_1 , vt_2 > > vr_6 ) {
