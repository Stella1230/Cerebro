protected vr_1 < vt_1 , vt_2 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[S] } @Override public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public void remove () { iterator . remove () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ; } @Override public vt_2 fn_6 () {
protected vr_1 < vt_1 , vt_2 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[S] } @Override public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public void remove () { iterator . remove () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ; } @Override public vt_2 fn_6 () {
protected vr_1 < vt_1 , vt_2 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public void remove () { iterator . remove () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ; } @Override public vt_2 fn_6 () {
protected vr_1 < vt_1 , vt_2 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public void remove () { iterator . remove () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ; } @Override public vt_2 fn_6 () {
