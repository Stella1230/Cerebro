int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI4Mutator]MSP[] return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.CRCR6Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI2Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.AOD2Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[InlineConstantMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.ABSMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.UOI3Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR5Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.UOI2Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR5Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.CRCR1Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI1Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { MST[rv.UOI4Mutator]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.CRCR1Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI4Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.CRCR5Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.CRCR1Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.AOR4Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.CRCR5Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.ABSMutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.ROR3Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; MST[InlineConstantMutator]MSP[] switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.ROR4Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI1Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[MathMutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.ROR1Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[InlineConstantMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR2Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.ABSMutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.ABSMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.UOI4Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.UOI3Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.AOR1Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.UOI3Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.UOI3Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.OBBN3Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.CRCR4Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[InlineConstantMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR5Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[MathMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.AOR2Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.UOI1Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[ReturnValsMutator]MSP[] }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR2Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOD1Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; MST[rv.UOI1Mutator]MSP[]
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.ABSMutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.ABSMutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ; MST[NonVoidMethodCallMutator]MSP[]
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR5Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI3Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; MST[rv.UOI4Mutator]MSP[] } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { MST[experimental.SwitchMutator]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.ROR5Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; MST[rv.UOI2Mutator]MSP[] vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[rv.ABSMutator]MSP[] }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.CRCR6Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.ABSMutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI2Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.AOD2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI4Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI4Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.ABSMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI4Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR2Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI1Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.CRCR4Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.ABSMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI3Mutator]MSP[] break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.CRCR3Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[MathMutator]MSP[] return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.UOI3Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; MST[rv.UOI2Mutator]MSP[] } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ; MST[rv.CRCR4Mutator]MSP[]
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.ABSMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.AOD2Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.AOR1Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOD1Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.ABSMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.UOI3Mutator]MSP[] int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[NonVoidMethodCallMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.ROR4Mutator]MSP[] int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[InlineConstantMutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.AOR1Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.ABSMutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.CRCR1Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[MathMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI2Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI4Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOR3Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.ROR1Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR5Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR3Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[InlineConstantMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.UOI2Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[NonVoidMethodCallMutator]MSP[] break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR4Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.UOI2Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.ABSMutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[experimental.MemberVariableMutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[PrimitiveReturnsMutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[experimental.MemberVariableMutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI3Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.AOR4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.UOI4Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.CRCR2Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.ABSMutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { MST[rv.UOI3Mutator]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.CRCR1Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI3Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.AOD2Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR4Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR5Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI2Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI1Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.AOR4Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.UOI1Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI1Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; MST[rv.UOI4Mutator]MSP[] vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; MST[experimental.MemberVariableMutator]MSP[] this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; MST[rv.ABSMutator]MSP[] } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.AOR4Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.CRCR3Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.ABSMutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI1Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI3Mutator]MSP[] return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.AOR2Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[NonVoidMethodCallMutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.UOI1Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; MST[rv.ABSMutator]MSP[] vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[MathMutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI4Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOR3Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI1Mutator]MSP[] break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR2Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[VoidMethodCallMutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI2Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI3Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[InlineConstantMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.AOD1Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI3Mutator]MSP[] break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[ConditionalsBoundaryMutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI2Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.UOI4Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.UOI2Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.CRCR4Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI2Mutator]MSP[] return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[experimental.MemberVariableMutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { MST[rv.UOI2Mutator]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.AOR4Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.UOI1Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR3Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[MathMutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.UOI3Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI3Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.AOR3Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[MathMutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.CRCR3Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { MST[experimental.RemoveSwitchMutator_2]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { MST[experimental.RemoveSwitchMutator_0]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ; MST[ArgumentPropagationMutator]MSP[]
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI2Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { MST[experimental.RemoveSwitchMutator_1]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.AOR2Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.CRCR3Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.AOD2Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI3Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI4Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOR1Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.ABSMutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR6Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[rv.UOI3Mutator]MSP[] }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[InlineConstantMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.ABSMutator]MSP[] break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI2Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.ABSMutator]MSP[] return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.UOI3Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[MathMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.ABSMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.AOD2Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[InlineConstantMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.UOI1Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOD1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.ABSMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[experimental.MemberVariableMutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[InlineConstantMutator]MSP[] break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.ABSMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI1Mutator]MSP[] break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[InlineConstantMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI3Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[MathMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.ABSMutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; MST[rv.UOI4Mutator]MSP[] } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[InlineConstantMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI2Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.AOD2Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.UOI1Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { MST[rv.UOI1Mutator]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[MathMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[NegateConditionalsMutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.CRCR2Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR3Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; MST[rv.UOI4Mutator]MSP[]
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR6Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI3Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.UOI3Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.ROR3Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.AOR1Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI3Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.UOI3Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.ABSMutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.AOR2Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI3Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR3Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.ROR2Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR6Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.ROR1Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.ABSMutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[MathMutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; MST[rv.CRCR6Mutator]MSP[] this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[ArgumentPropagationMutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOD2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[InlineConstantMutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.UOI4Mutator]MSP[] int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[ArgumentPropagationMutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.UOI4Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.CRCR4Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.AOD1Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.AOR2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR5Mutator]MSP[] break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.ABSMutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI3Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ; MST[rv.CRCR2Mutator]MSP[]
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[InlineConstantMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR1Mutator]MSP[] break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI3Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.UOI4Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI3Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[MathMutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.CRCR4Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.ABSMutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR5Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.UOI2Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.UOI4Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR3Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.AOD1Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR5Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[NonVoidMethodCallMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.ROR2Mutator]MSP[] int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.UOI1Mutator]MSP[] int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.AOR2Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.AOR4Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.ABSMutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.ABSMutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; MST[rv.UOI1Mutator]MSP[] } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR1Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI2Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI1Mutator]MSP[] return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[InlineConstantMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.ABSMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[InlineConstantMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.CRCR2Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[InlineConstantMutator]MSP[] break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.CRCR6Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI1Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI1Mutator]MSP[] break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.CRCR1Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.CRCR6Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.UOI3Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI4Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI3Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.AOD1Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI3Mutator]MSP[] break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.AOR3Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; MST[rv.UOI2Mutator]MSP[] } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.ABSMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI1Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR3Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; MST[rv.UOI2Mutator]MSP[]
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.UOI1Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR5Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR3Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.AOR3Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.ABSMutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI3Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI3Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.CRCR1Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.ABSMutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI2Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[MathMutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[InlineConstantMutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI1Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR5Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.UOI4Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR1Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.UOI2Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.ABSMutator]MSP[] break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI2Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ; MST[rv.UOI1Mutator]MSP[]
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[MathMutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.ABSMutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[MathMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[NegateConditionalsMutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { MST[experimental.RemoveSwitchMutator_0]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { MST[experimental.RemoveSwitchMutator_2]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { MST[experimental.RemoveSwitchMutator_1]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.ABSMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[InlineConstantMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.UOI3Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[InlineConstantMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.ABSMutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR5Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; MST[rv.CRCR5Mutator]MSP[] switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.UOI1Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.AOR4Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI3Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.CRCR6Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.UOI1Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[NegateConditionalsMutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[ArgumentPropagationMutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.AOR2Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI4Mutator]MSP[] break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI4Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOD2Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR1Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.OBBN2Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.CRCR5Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI4Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI3Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.UOI4Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.ABSMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.AOR1Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.CRCR3Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI2Mutator]MSP[] break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.CRCR5Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.ABSMutator]MSP[] int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.CRCR1Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI4Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR4Mutator]MSP[] break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.CRCR5Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.UOI3Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.CRCR1Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[MathMutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR4Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.ROR5Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.ABSMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR6Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[InlineConstantMutator]MSP[] break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.UOI2Mutator]MSP[] int vr_16 = - 1 ;
int vr_17 = 0 ; MST[rv.CRCR3Mutator]MSP[] switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.UOI2Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; MST[rv.UOI3Mutator]MSP[] vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[PrimitiveReturnsMutator]MSP[] }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI4Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.AOR2Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.ROR3Mutator]MSP[] int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[InlineConstantMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.ABSMutator]MSP[] break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.CRCR2Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { MST[rv.UOI4Mutator]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI2Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.ABSMutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI1Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR4Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.ABSMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; MST[rv.UOI3Mutator]MSP[] } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[InlineConstantMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI1Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.UOI4Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.AOR2Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI1Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[InlineConstantMutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.UOI2Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; MST[rv.CRCR6Mutator]MSP[] switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.UOI1Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.UOI3Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[MathMutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.UOI2Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.ROR4Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI4Mutator]MSP[] return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI2Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.OBBN2Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[rv.UOI1Mutator]MSP[] }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI3Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.ABSMutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR4Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; MST[rv.CRCR1Mutator]MSP[] this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.UOI3Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR3Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; MST[rv.ABSMutator]MSP[]
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.ABSMutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI2Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; MST[experimental.MemberVariableMutator]MSP[] } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.CRCR4Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.AOD1Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.UOI3Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[ArgumentPropagationMutator]MSP[] }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR5Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[InlineConstantMutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[MathMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI1Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ; MST[rv.CRCR6Mutator]MSP[]
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR4Mutator]MSP[] break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.AOD1Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI3Mutator]MSP[] return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.CRCR2Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.UOI2Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI1Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.ABSMutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR6Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.ABSMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.UOI3Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI1Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.AOR4Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[ConditionalsBoundaryMutator]MSP[] int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI4Mutator]MSP[] break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.UOI2Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[InlineConstantMutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[InlineConstantMutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.AOD2Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[MathMutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.UOI4Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; MST[rv.UOI3Mutator]MSP[] } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[InlineConstantMutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.AOR1Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.AOD1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.ABSMutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[rv.UOI4Mutator]MSP[] }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[InlineConstantMutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOR4Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.ROR5Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI2Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR1Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.CRCR6Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[InlineConstantMutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.UOI1Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.CRCR2Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; MST[experimental.MemberVariableMutator]MSP[] this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI1Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.CRCR6Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.ABSMutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.AOR3Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.CRCR4Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.OBBN2Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { MST[rv.UOI2Mutator]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.OBBN1Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.UOI1Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR1Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI4Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.AOR1Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.CRCR6Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI1Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR6Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.UOI4Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.ABSMutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR1Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.UOI4Mutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOD2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI1Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.ROR1Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI2Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.AOR3Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.ABSMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[NonVoidMethodCallMutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI3Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ; MST[rv.UOI4Mutator]MSP[]
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOR4Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[rv.ABSMutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR5Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.ABSMutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.ROR2Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR1Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI1Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[experimental.MemberVariableMutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI4Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR6Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[ReturnValsMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ; MST[rv.ABSMutator]MSP[]
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI2Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.ROR5Mutator]MSP[] int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI3Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI1Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.ABSMutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[MathMutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI4Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ; MST[rv.CRCR5Mutator]MSP[]
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[rv.ROR1Mutator]MSP[] int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ; MST[rv.CRCR1Mutator]MSP[]
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.ABSMutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI2Mutator]MSP[] break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.UOI4Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.AOD2Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.ABSMutator]MSP[] return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI2Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI4Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.CRCR3Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.CRCR5Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI1Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI4Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.CRCR1Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI2Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.CRCR3Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.CRCR3Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR2Mutator]MSP[] break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI2Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[MathMutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.UOI1Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.UOI1Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.UOI3Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.AOR4Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI4Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOR2Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI2Mutator]MSP[] return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { MST[rv.ABSMutator]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.OBBN1Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI3Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR4Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; MST[rv.CRCR3Mutator]MSP[] this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.UOI1Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI4Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.ROR2Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI1Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[ReturnValsMutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.ABSMutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[MathMutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.AOD1Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI4Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; MST[rv.UOI1Mutator]MSP[] } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[rv.CRCR5Mutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI2Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[MathMutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.ABSMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI4Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.AOR3Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.ABSMutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.UOI2Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.UOI1Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[MathMutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI1Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR5Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI2Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { MST[NegateConditionalsMutator]MSP[] int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.CRCR5Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.ABSMutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[NonVoidMethodCallMutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; MST[rv.ABSMutator]MSP[] } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR5Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.AOR2Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI3Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { MST[rv.ABSMutator]MSP[] case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.AOR4Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI1Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.ROR3Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.UOI3Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; MST[rv.CRCR1Mutator]MSP[] switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.AOD2Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.ABSMutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[IncrementsMutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI2Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI1Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI4Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.AOR3Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.CRCR4Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.CRCR2Mutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.CRCR5Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.ABSMutator]MSP[] break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.UOI1Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.CRCR2Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; MST[rv.UOI1Mutator]MSP[] return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR4Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { MST[rv.UOI3Mutator]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.AOR3Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR2Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.ABSMutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.OBBN1Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.OBBN3Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOD1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { MST[experimental.SwitchMutator]MSP[] case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR6Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[MathMutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI2Mutator]MSP[] break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.AOR3Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.CRCR3Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.UOI2Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR6Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.UOI3Mutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { MST[rv.ROR2Mutator]MSP[] return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; MST[rv.ABSMutator]MSP[] vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR4Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[InlineConstantMutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[ConditionalsBoundaryMutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.CRCR1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.UOI1Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.UOI3Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[MathMutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.UOI4Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.UOI1Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; MST[rv.AOR2Mutator]MSP[] } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR4Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ; MST[InlineConstantMutator]MSP[]
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.AOR2Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[MathMutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { MST[NegateConditionalsMutator]MSP[] System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI2Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; MST[rv.UOI4Mutator]MSP[] } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI3Mutator]MSP[] final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.CRCR2Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; MST[rv.UOI4Mutator]MSP[] vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.ABSMutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.CRCR6Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI1Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; MST[rv.AOR1Mutator]MSP[] return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.UOI2Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI3Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI4Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[rv.UOI2Mutator]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.UOI4Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.UOI2Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; MST[rv.AOD2Mutator]MSP[] vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR2Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; MST[rv.UOI4Mutator]MSP[] break; default:
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.CRCR4Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; MST[rv.UOI3Mutator]MSP[]
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.AOR4Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; MST[rv.ABSMutator]MSP[] } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; MST[rv.AOR1Mutator]MSP[] vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.UOI3Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; MST[rv.UOI3Mutator]MSP[] vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vr_4 = fn_2 ( vr_16 , vr_4 ) ; MST[rv.UOI4Mutator]MSP[] } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[MathMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.CRCR3Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.AOR1Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.ABSMutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[InlineConstantMutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.UOI1Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.UOI4Mutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; MST[rv.CRCR2Mutator]MSP[] vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; MST[rv.OBBN3Mutator]MSP[] case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[rv.UOI2Mutator]MSP[] }
vl_19 = vl_20 = 0 ; MST[rv.CRCR5Mutator]MSP[] this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; MST[rv.UOI4Mutator]MSP[] for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[MathMutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; MST[InlineConstantMutator]MSP[] vl_19 = vr_24 - vr_25 ; if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; MST[rv.CRCR2Mutator]MSP[] break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; MST[rv.ABSMutator]MSP[] if ( vl_19 + length - vl_21 < 0 ) { System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; MST[rv.AOD1Mutator]MSP[] final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
switch ( vl_19 ) { case 1 : vr_16 = fn_13 ( vl_22 [ 0 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] , vr_8 [ vr_12 + 2 ] ) ; MST[rv.AOR2Mutator]MSP[] break; case 2 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vr_8 [ vr_12 ] , vr_8 [ vr_12 + 1 ] ) ; break; case 3 : vr_16 = fn_13 ( vl_22 [ 0 ] , vl_22 [ 1 ] , vl_22 [ 2 ] , vr_8 [ vr_12 ] ) ; break; default:
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.UOI4Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN2Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; MST[rv.CRCR4Mutator]MSP[] case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; }
vl_19 = vl_20 = 0 ; this . vr_4 = vr_3 ; } public final void add ( final byte [] vr_8 , final int vr_12 , final int length ) { if ( length <= 0 ) { return; } vl_20 += length ; if ( vl_19 + length - vl_21 < 0 ) { MST[rv.ROR4Mutator]MSP[] System . vr_22 ( vr_8 , vr_12 , vl_22 , vl_19 , length ) ; vl_19 += length ; return; } int vr_23 ; int vr_24 ; if ( vl_19 > 0 ) { int vr_16 = - 1 ;
private static int fn_13 ( final byte vr_27 , final byte vr_28 , final byte vr_29 , final byte vr_30 ) { return ( vr_27 & 0xff ) | ( ( vr_28 & 0xff ) << 8 ) | ( ( vr_29 & 0xff ) << 16 ) | ( ( vr_30 & 0xff ) << 24 ) ; MST[rv.OBBN3Mutator]MSP[] } @Override @Deprecated int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ; int vr_17 = 0 ; switch ( vl_19 ) {
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; MST[rv.UOI1Mutator]MSP[] vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; MST[rv.AOR3Mutator]MSP[] } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
int vr_17 = 0 ; switch ( vl_19 ) { case 3 : vr_17 ^= ( vl_22 [ 2 ] & 0xff ) << 16 ; case 2 : vr_17 ^= ( vl_22 [ 1 ] & 0xff ) << 8 ; case 1 : vr_17 ^= ( vl_22 [ 0 ] & 0xff ) ; vr_17 *= vl_3 ; vr_17 = Integer . vr_18 ( vr_17 , vl_4 ) ; vr_17 *= vl_5 ; vr_26 ^= vr_17 ; } vr_26 ^= vl_20 ; return fn_3 ( vr_26 ) ; MST[NonVoidMethodCallMutator]MSP[] }
throw new fn_14 ( lr_1 + vl_19 ) ; } vr_4 = fn_2 ( vr_16 , vr_4 ) ; final int vr_25 = vl_21 - vl_19 ; vr_23 = vr_12 + vr_25 ; MST[rv.AOR1Mutator]MSP[] vr_24 = length - vr_25 ; } else { vr_23 = vr_12 ; vr_24 = length ; } final int vr_13 = vr_24 >> 2 ; for ( int vr_14 = 0 ; vr_14 < vr_13 ; vr_14 ++ ) { final int vr_15 = vr_23 + ( vr_14 << 2 ) ; final int vr_16 = fn_4 ( vr_8 , vr_15 ) ;
vr_4 = fn_2 ( vr_16 , vr_4 ) ; } final int vr_25 = ( vr_13 << 2 ) ; vl_19 = vr_24 - vr_25 ; MST[rv.AOD1Mutator]MSP[] if ( vl_19 != 0 ) { System . vr_22 ( vr_8 , vr_23 + vr_25 , vl_22 , 0 , vl_19 ) ; } } public final int fn_15 () { return fn_16 ( vr_4 , vl_19 , vl_22 , vl_20 ) ; } int fn_16 ( final int vr_4 , final int vl_19 , final byte [] vl_22 , final int vl_20 ) { int vr_26 = vr_4 ;
